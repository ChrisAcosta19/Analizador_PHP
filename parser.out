Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AS
    ASYNC
    AWAIT
    BOOL
    CALL
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    CONST
    DECLARE
    DEFAULT
    DIE
    DO
    ELSEIF
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ENUM
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    ITERABLE
    KEY_VALUE
    LIST
    LPAREN
    MATCH
    MIXED
    MOD
    NAMESPACE
    NEW
    NULL
    OBJECT
    OR
    POWER
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    RPAREN
    SELF
    STATIC
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    VOID
    XOR
    YIELD
    YIELD_FROM
    object_declaration

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG statements CLOSE_TAG
Rule 2     statements -> statement2
Rule 3     statements -> statements statement2
Rule 4     statement2 -> statement SEMICOLON
Rule 5     statement2 -> if_statement
Rule 6     statement2 -> while_statement
Rule 7     statement2 -> for_statement
Rule 8     statement2 -> statement_return
Rule 9     statement2 -> function_statement
Rule 10    statement2 -> ONE_LINE_COMMENT
Rule 11    statement2 -> MULTI_LINE_COMMENT
Rule 12    statement -> print_statement
Rule 13    statement -> fscanf_statement
Rule 14    statement -> fgets_statement
Rule 15    statement -> assignment_statement
Rule 16    statement -> array_declaration_statement
Rule 17    statement -> BREAK
Rule 18    statement -> CONTINUE
Rule 19    function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
Rule 20    lambda_function -> LAMBDA arguments COLON expression
Rule 21    arrow_function -> ARROW arguments ARROW expression
Rule 22    statement_return -> RETURN expression SEMICOLON
Rule 23    fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN
Rule 24    fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
Rule 25    variable_list -> variable
Rule 26    variable_list -> variable_list COMMA variable
Rule 27    variable -> ID
Rule 28    assignment_operator -> EQUALS
Rule 29    assignment_operator -> PLUS_EQUALS
Rule 30    assignment_operator -> MINUS_EQUALS
Rule 31    assignment_operator -> TIMES_EQUALS
Rule 32    assignment_operator -> DIVIDE_EQUALS
Rule 33    assignment_operator -> MOD_EQUALS
Rule 34    assignment_statement -> variable assignment_operator argument
Rule 35    assignment_statement -> variable PLUS_PLUS
Rule 36    assignment_statement -> variable MINUS_MINUS
Rule 37    print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN
Rule 38    print_statement -> print_function arguments
Rule 39    print_function -> PRINT
Rule 40    print_function -> ECHO
Rule 41    arguments -> argument
Rule 42    arguments -> arguments DOT argument
Rule 43    arguments -> arguments COMMA argument
Rule 44    argument -> INTEGER
Rule 45    argument -> FLOAT
Rule 46    argument -> STRING
Rule 47    argument -> variable
Rule 48    argument -> expression
Rule 49    argument -> condition
Rule 50    argument -> assignment_statement
Rule 51    expression -> expression PLUS term
Rule 52    expression -> expression MINUS term
Rule 53    expression -> term
Rule 54    term -> term TIMES factor
Rule 55    term -> term DIVIDE factor
Rule 56    term -> factor
Rule 57    factor -> INTEGER
Rule 58    factor -> FLOAT
Rule 59    factor -> variable
Rule 60    factor -> STRING
Rule 61    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 62    if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block
Rule 63    if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block
Rule 64    while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block
Rule 65    for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON
Rule 66    for_part1 -> FOR LEFT_PAREN SEMICOLON
Rule 67    for_statement -> for_part1 condition for_part3
Rule 68    for_statement -> for_part1 for_part3
Rule 69    for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4
Rule 70    for_part3 -> SEMICOLON RIGHT_PAREN for_part4
Rule 71    for_part4 -> block
Rule 72    for_part4 -> SEMICOLON
Rule 73    assignment_list -> assignment_statement
Rule 74    assignment_list -> assignment_list COMMA assignment_statement
Rule 75    statement_list -> statement
Rule 76    statement_list -> statement_list COMMA statement
Rule 77    block -> LEFT_BRACE statements RIGHT_BRACE
Rule 78    block -> LEFT_BRACE RIGHT_BRACE
Rule 79    condition -> TRUE
Rule 80    condition -> FALSE
Rule 81    condition -> expression relational_operator expression
Rule 82    condition -> condition logical_operator condition
Rule 83    condition -> LOGICAL_NOT condition
Rule 84    condition -> LEFT_PAREN condition RIGHT_PAREN
Rule 85    relational_operator -> EQUAL_TO
Rule 86    relational_operator -> NOT_EQUAL_TO
Rule 87    relational_operator -> LESS_THAN
Rule 88    relational_operator -> GREATER_THAN
Rule 89    relational_operator -> LESS_EQUAL
Rule 90    relational_operator -> GREATER_EQUAL
Rule 91    relational_operator -> IDENTICAL_TO
Rule 92    relational_operator -> NOT_IDENTICAL_TO
Rule 93    relational_operator -> DIFFERENT
Rule 94    logical_operator -> LOGICAL_AND
Rule 95    logical_operator -> LOGICAL_OR
Rule 96    logical_operator -> LOGICAL_XOR
Rule 97    array_declaration_statement -> variable EQUALS array
Rule 98    array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN
Rule 99    array -> LEFT_BRACKET array_elements RIGHT_BRACKET
Rule 100   array_elements -> argument
Rule 101   array_elements -> array_elements COMMA argument
Rule 102   list -> LEFT_BRACKET elements RIGHT_BRACKET
Rule 103   elements -> argument
Rule 104   elements -> elements COMMA argument
Rule 105   stack_operations -> PUSH argument
Rule 106   stack_operations -> POP
Rule 107   queue_operations -> ENQUEUE argument
Rule 108   queue_operations -> DEQUEUE
Rule 109   deque_operations -> APPEND argument
Rule 110   deque_operations -> APPENDLEFT argument
Rule 111   deque_operations -> POP
Rule 112   deque_operations -> POPLEFT
Rule 113   set_declaration -> SET LEFT_BRACE set_elements RIGHT_BRACE
Rule 114   set_elements -> argument
Rule 115   set_elements -> set_elements COMMA argument
Rule 116   dictionary_declaration -> DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACE
Rule 117   dictionary_elements -> key_value_pair
Rule 118   dictionary_elements -> dictionary_elements COMMA key_value_pair
Rule 119   key_value_pair -> STRING COLON argument
Rule 120   iterator_declaration -> ITERATOR LEFT_BRACKET elements RIGHT_BRACKET
Rule 121   tree_operations -> ADD_CHILD argument

Terminals, with rules where they appear

ABSTRACT             : 
ADD_CHILD            : 121
AND                  : 
APPEND               : 109
APPENDLEFT           : 110
ARRAY                : 98
ARROW                : 21 21
AS                   : 
ASYNC                : 
AWAIT                : 
BOOL                 : 
BREAK                : 17
CALL                 : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_TAG            : 1
COLON                : 20 119
COMMA                : 24 24 26 43 74 76 101 104 115 118
CONST                : 
CONTINUE             : 18
DECLARE              : 
DEFAULT              : 
DEQUEUE              : 108
DICTIONARY           : 116
DIE                  : 
DIFFERENT            : 93
DIVIDE               : 55
DIVIDE_EQUALS        : 32
DO                   : 
DOT                  : 42
ECHO                 : 40
ELSE                 : 63
ELSEIF               : 
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENQUEUE              : 107
ENUM                 : 
EQUALS               : 28 97
EQUAL_TO             : 85
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 80
FGETS                : 23
FINAL                : 
FINALLY              : 
FLOAT                : 45 58
FN                   : 
FOR                  : 65 66
FOREACH              : 
FSCANF               : 24
FUNCTION             : 19
GLOBAL               : 
GOTO                 : 
GREATER_EQUAL        : 90
GREATER_THAN         : 88
HALT_COMPILER        : 
ID                   : 27
IDENTICAL_TO         : 91
IF                   : 62 63
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 44 57
INTERFACE            : 
ISSET                : 
ITERABLE             : 
ITERATOR             : 120
KEY_VALUE            : 
LAMBDA               : 20
LEFT_BRACE           : 77 78 113 116
LEFT_BRACKET         : 99 102 120
LEFT_PAREN           : 19 23 24 37 61 62 63 64 65 66 84 98
LESS_EQUAL           : 89
LESS_THAN            : 87
LIST                 : 
LOGICAL_AND          : 94
LOGICAL_NOT          : 83
LOGICAL_OR           : 95
LOGICAL_XOR          : 96
LPAREN               : 
MATCH                : 
MINUS                : 52
MINUS_EQUALS         : 30
MINUS_MINUS          : 36
MIXED                : 
MOD                  : 
MOD_EQUALS           : 33
MULTI_LINE_COMMENT   : 11
NAME                 : 19
NAMESPACE            : 
NEW                  : 
NOT_EQUAL_TO         : 86
NOT_IDENTICAL_TO     : 92
NULL                 : 
OBJECT               : 
ONE_LINE_COMMENT     : 10
OPEN_TAG             : 1
OR                   : 
PLUS                 : 51
PLUS_EQUALS          : 29
PLUS_PLUS            : 35
POP                  : 106 111
POPLEFT              : 112
POWER                : 
PRINT                : 39
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUSH                 : 105
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 22
RIGHT_BRACE          : 77 78 113 116
RIGHT_BRACKET        : 99 102 120
RIGHT_PAREN          : 19 23 24 37 61 62 63 64 69 70 84 98
RPAREN               : 
SELF                 : 
SEMICOLON            : 4 22 65 66 69 70 72
SET                  : 113
STATIC               : 
STDIN                : 23 24
STRING               : 24 46 60 119
SWITCH               : 
THROW                : 
TIMES                : 54
TIMES_EQUALS         : 31
TRAIT                : 
TRUE                 : 79
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VOID                 : 
WHILE                : 64
XOR                  : 
YIELD                : 
YIELD_FROM           : 
error                : 
object_declaration   : 

Nonterminals, with rules where they appear

argument             : 34 41 42 43 100 101 103 104 105 107 109 110 114 115 119 121
arguments            : 19 20 21 37 38 42 43
array                : 97
array_declaration_statement : 16
array_elements       : 98 99 101
arrow_function       : 
assignment_list      : 65 74
assignment_operator  : 34
assignment_statement : 15 50 73 74
block                : 19 62 63 63 64 71
condition            : 49 62 63 64 67 82 82 83 84
deque_operations     : 
dictionary_declaration : 
dictionary_elements  : 116 118
elements             : 102 104 120
expression           : 20 21 22 48 51 52 61 81 81
factor               : 54 55 56
fgets_statement      : 14
for_part1            : 67 68
for_part3            : 67 68
for_part4            : 69 70
for_statement        : 7
fscanf_statement     : 13
function_statement   : 9
if_statement         : 5
iterator_declaration : 
key_value_pair       : 117 118
lambda_function      : 
list                 : 
logical_operator     : 82
print_function       : 37 38
print_statement      : 12
program              : 0
queue_operations     : 
relational_operator  : 81
set_declaration      : 
set_elements         : 113 115
stack_operations     : 
statement            : 4 75 76
statement2           : 2 3
statement_list       : 69 76
statement_return     : 8
statements           : 1 3 77
term                 : 51 52 53 54 55
tree_operations      : 
variable             : 25 26 34 35 36 47 59 97
variable_list        : 24 26
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG statements CLOSE_TAG

    OPEN_TAG        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . statements CLOSE_TAG
    (2) statements -> . statement2
    (3) statements -> . statements statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . statement_return
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (62) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block
    (63) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block ELSE block
    (64) while_statement -> . WHILE LEFT_PAREN condition RIGHT_PAREN block
    (67) for_statement -> . for_part1 condition for_part3
    (68) for_statement -> . for_part1 for_part3
    (22) statement_return -> . RETURN expression SEMICOLON
    (19) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (37) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (38) print_statement -> . print_function arguments
    (24) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (23) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (97) array_declaration_statement -> . variable EQUALS array
    (65) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (66) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (39) print_function -> . PRINT
    (40) print_function -> . ECHO
    (27) variable -> . ID

    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    RETURN          shift and go to state 23
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 26
    FGETS           shift and go to state 27
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ECHO            shift and go to state 31
    ID              shift and go to state 32

    statements                     shift and go to state 3
    statement2                     shift and go to state 4
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    statement_return               shift and go to state 9
    function_statement             shift and go to state 10
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    for_part1                      shift and go to state 22
    print_function                 shift and go to state 25
    variable                       shift and go to state 28

state 3

    (1) program -> OPEN_TAG statements . CLOSE_TAG
    (3) statements -> statements . statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . statement_return
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (62) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block
    (63) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block ELSE block
    (64) while_statement -> . WHILE LEFT_PAREN condition RIGHT_PAREN block
    (67) for_statement -> . for_part1 condition for_part3
    (68) for_statement -> . for_part1 for_part3
    (22) statement_return -> . RETURN expression SEMICOLON
    (19) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (37) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (38) print_statement -> . print_function arguments
    (24) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (23) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (97) array_declaration_statement -> . variable EQUALS array
    (65) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (66) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (39) print_function -> . PRINT
    (40) print_function -> . ECHO
    (27) variable -> . ID

    CLOSE_TAG       shift and go to state 33
    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    RETURN          shift and go to state 23
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 26
    FGETS           shift and go to state 27
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ECHO            shift and go to state 31
    ID              shift and go to state 32

    statement2                     shift and go to state 34
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    statement_return               shift and go to state 9
    function_statement             shift and go to state 10
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    for_part1                      shift and go to state 22
    print_function                 shift and go to state 25
    variable                       shift and go to state 28

state 4

    (2) statements -> statement2 .

    CLOSE_TAG       reduce using rule 2 (statements -> statement2 .)
    ONE_LINE_COMMENT reduce using rule 2 (statements -> statement2 .)
    MULTI_LINE_COMMENT reduce using rule 2 (statements -> statement2 .)
    BREAK           reduce using rule 2 (statements -> statement2 .)
    CONTINUE        reduce using rule 2 (statements -> statement2 .)
    IF              reduce using rule 2 (statements -> statement2 .)
    WHILE           reduce using rule 2 (statements -> statement2 .)
    RETURN          reduce using rule 2 (statements -> statement2 .)
    FUNCTION        reduce using rule 2 (statements -> statement2 .)
    FSCANF          reduce using rule 2 (statements -> statement2 .)
    FGETS           reduce using rule 2 (statements -> statement2 .)
    FOR             reduce using rule 2 (statements -> statement2 .)
    PRINT           reduce using rule 2 (statements -> statement2 .)
    ECHO            reduce using rule 2 (statements -> statement2 .)
    ID              reduce using rule 2 (statements -> statement2 .)
    RIGHT_BRACE     reduce using rule 2 (statements -> statement2 .)


state 5

    (4) statement2 -> statement . SEMICOLON

    SEMICOLON       shift and go to state 35


state 6

    (5) statement2 -> if_statement .

    CLOSE_TAG       reduce using rule 5 (statement2 -> if_statement .)
    ONE_LINE_COMMENT reduce using rule 5 (statement2 -> if_statement .)
    MULTI_LINE_COMMENT reduce using rule 5 (statement2 -> if_statement .)
    BREAK           reduce using rule 5 (statement2 -> if_statement .)
    CONTINUE        reduce using rule 5 (statement2 -> if_statement .)
    IF              reduce using rule 5 (statement2 -> if_statement .)
    WHILE           reduce using rule 5 (statement2 -> if_statement .)
    RETURN          reduce using rule 5 (statement2 -> if_statement .)
    FUNCTION        reduce using rule 5 (statement2 -> if_statement .)
    FSCANF          reduce using rule 5 (statement2 -> if_statement .)
    FGETS           reduce using rule 5 (statement2 -> if_statement .)
    FOR             reduce using rule 5 (statement2 -> if_statement .)
    PRINT           reduce using rule 5 (statement2 -> if_statement .)
    ECHO            reduce using rule 5 (statement2 -> if_statement .)
    ID              reduce using rule 5 (statement2 -> if_statement .)
    RIGHT_BRACE     reduce using rule 5 (statement2 -> if_statement .)


state 7

    (6) statement2 -> while_statement .

    CLOSE_TAG       reduce using rule 6 (statement2 -> while_statement .)
    ONE_LINE_COMMENT reduce using rule 6 (statement2 -> while_statement .)
    MULTI_LINE_COMMENT reduce using rule 6 (statement2 -> while_statement .)
    BREAK           reduce using rule 6 (statement2 -> while_statement .)
    CONTINUE        reduce using rule 6 (statement2 -> while_statement .)
    IF              reduce using rule 6 (statement2 -> while_statement .)
    WHILE           reduce using rule 6 (statement2 -> while_statement .)
    RETURN          reduce using rule 6 (statement2 -> while_statement .)
    FUNCTION        reduce using rule 6 (statement2 -> while_statement .)
    FSCANF          reduce using rule 6 (statement2 -> while_statement .)
    FGETS           reduce using rule 6 (statement2 -> while_statement .)
    FOR             reduce using rule 6 (statement2 -> while_statement .)
    PRINT           reduce using rule 6 (statement2 -> while_statement .)
    ECHO            reduce using rule 6 (statement2 -> while_statement .)
    ID              reduce using rule 6 (statement2 -> while_statement .)
    RIGHT_BRACE     reduce using rule 6 (statement2 -> while_statement .)


state 8

    (7) statement2 -> for_statement .

    CLOSE_TAG       reduce using rule 7 (statement2 -> for_statement .)
    ONE_LINE_COMMENT reduce using rule 7 (statement2 -> for_statement .)
    MULTI_LINE_COMMENT reduce using rule 7 (statement2 -> for_statement .)
    BREAK           reduce using rule 7 (statement2 -> for_statement .)
    CONTINUE        reduce using rule 7 (statement2 -> for_statement .)
    IF              reduce using rule 7 (statement2 -> for_statement .)
    WHILE           reduce using rule 7 (statement2 -> for_statement .)
    RETURN          reduce using rule 7 (statement2 -> for_statement .)
    FUNCTION        reduce using rule 7 (statement2 -> for_statement .)
    FSCANF          reduce using rule 7 (statement2 -> for_statement .)
    FGETS           reduce using rule 7 (statement2 -> for_statement .)
    FOR             reduce using rule 7 (statement2 -> for_statement .)
    PRINT           reduce using rule 7 (statement2 -> for_statement .)
    ECHO            reduce using rule 7 (statement2 -> for_statement .)
    ID              reduce using rule 7 (statement2 -> for_statement .)
    RIGHT_BRACE     reduce using rule 7 (statement2 -> for_statement .)


state 9

    (8) statement2 -> statement_return .

    CLOSE_TAG       reduce using rule 8 (statement2 -> statement_return .)
    ONE_LINE_COMMENT reduce using rule 8 (statement2 -> statement_return .)
    MULTI_LINE_COMMENT reduce using rule 8 (statement2 -> statement_return .)
    BREAK           reduce using rule 8 (statement2 -> statement_return .)
    CONTINUE        reduce using rule 8 (statement2 -> statement_return .)
    IF              reduce using rule 8 (statement2 -> statement_return .)
    WHILE           reduce using rule 8 (statement2 -> statement_return .)
    RETURN          reduce using rule 8 (statement2 -> statement_return .)
    FUNCTION        reduce using rule 8 (statement2 -> statement_return .)
    FSCANF          reduce using rule 8 (statement2 -> statement_return .)
    FGETS           reduce using rule 8 (statement2 -> statement_return .)
    FOR             reduce using rule 8 (statement2 -> statement_return .)
    PRINT           reduce using rule 8 (statement2 -> statement_return .)
    ECHO            reduce using rule 8 (statement2 -> statement_return .)
    ID              reduce using rule 8 (statement2 -> statement_return .)
    RIGHT_BRACE     reduce using rule 8 (statement2 -> statement_return .)


state 10

    (9) statement2 -> function_statement .

    CLOSE_TAG       reduce using rule 9 (statement2 -> function_statement .)
    ONE_LINE_COMMENT reduce using rule 9 (statement2 -> function_statement .)
    MULTI_LINE_COMMENT reduce using rule 9 (statement2 -> function_statement .)
    BREAK           reduce using rule 9 (statement2 -> function_statement .)
    CONTINUE        reduce using rule 9 (statement2 -> function_statement .)
    IF              reduce using rule 9 (statement2 -> function_statement .)
    WHILE           reduce using rule 9 (statement2 -> function_statement .)
    RETURN          reduce using rule 9 (statement2 -> function_statement .)
    FUNCTION        reduce using rule 9 (statement2 -> function_statement .)
    FSCANF          reduce using rule 9 (statement2 -> function_statement .)
    FGETS           reduce using rule 9 (statement2 -> function_statement .)
    FOR             reduce using rule 9 (statement2 -> function_statement .)
    PRINT           reduce using rule 9 (statement2 -> function_statement .)
    ECHO            reduce using rule 9 (statement2 -> function_statement .)
    ID              reduce using rule 9 (statement2 -> function_statement .)
    RIGHT_BRACE     reduce using rule 9 (statement2 -> function_statement .)


state 11

    (10) statement2 -> ONE_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    BREAK           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    CONTINUE        reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    IF              reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    WHILE           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    RETURN          reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FUNCTION        reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FSCANF          reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FGETS           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FOR             reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    PRINT           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    ECHO            reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    ID              reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)


state 12

    (11) statement2 -> MULTI_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    BREAK           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    CONTINUE        reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    IF              reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    WHILE           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    RETURN          reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FUNCTION        reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FSCANF          reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FGETS           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FOR             reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    PRINT           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    ECHO            reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    ID              reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)


state 13

    (12) statement -> print_statement .

    SEMICOLON       reduce using rule 12 (statement -> print_statement .)
    RIGHT_PAREN     reduce using rule 12 (statement -> print_statement .)
    COMMA           reduce using rule 12 (statement -> print_statement .)


state 14

    (13) statement -> fscanf_statement .

    SEMICOLON       reduce using rule 13 (statement -> fscanf_statement .)
    RIGHT_PAREN     reduce using rule 13 (statement -> fscanf_statement .)
    COMMA           reduce using rule 13 (statement -> fscanf_statement .)


state 15

    (14) statement -> fgets_statement .

    SEMICOLON       reduce using rule 14 (statement -> fgets_statement .)
    RIGHT_PAREN     reduce using rule 14 (statement -> fgets_statement .)
    COMMA           reduce using rule 14 (statement -> fgets_statement .)


state 16

    (15) statement -> assignment_statement .

    SEMICOLON       reduce using rule 15 (statement -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 15 (statement -> assignment_statement .)
    COMMA           reduce using rule 15 (statement -> assignment_statement .)


state 17

    (16) statement -> array_declaration_statement .

    SEMICOLON       reduce using rule 16 (statement -> array_declaration_statement .)
    RIGHT_PAREN     reduce using rule 16 (statement -> array_declaration_statement .)
    COMMA           reduce using rule 16 (statement -> array_declaration_statement .)


state 18

    (17) statement -> BREAK .

    SEMICOLON       reduce using rule 17 (statement -> BREAK .)
    RIGHT_PAREN     reduce using rule 17 (statement -> BREAK .)
    COMMA           reduce using rule 17 (statement -> BREAK .)


state 19

    (18) statement -> CONTINUE .

    SEMICOLON       reduce using rule 18 (statement -> CONTINUE .)
    RIGHT_PAREN     reduce using rule 18 (statement -> CONTINUE .)
    COMMA           reduce using rule 18 (statement -> CONTINUE .)


state 20

    (62) if_statement -> IF . LEFT_PAREN condition RIGHT_PAREN block
    (63) if_statement -> IF . LEFT_PAREN condition RIGHT_PAREN block ELSE block

    LEFT_PAREN      shift and go to state 36


state 21

    (64) while_statement -> WHILE . LEFT_PAREN condition RIGHT_PAREN block

    LEFT_PAREN      shift and go to state 37


state 22

    (67) for_statement -> for_part1 . condition for_part3
    (68) for_statement -> for_part1 . for_part3
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (69) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (70) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44
    SEMICOLON       shift and go to state 45
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    ID              shift and go to state 32

    condition                      shift and go to state 38
    for_part3                      shift and go to state 39
    expression                     shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 23

    (22) statement_return -> RETURN . expression SEMICOLON
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 32

    expression                     shift and go to state 52
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 24

    (19) function_statement -> FUNCTION . NAME LEFT_PAREN arguments RIGHT_PAREN block

    NAME            shift and go to state 54


state 25

    (37) print_statement -> print_function . LEFT_PAREN arguments RIGHT_PAREN
    (38) print_statement -> print_function . arguments
    (41) arguments -> . argument
    (42) arguments -> . arguments DOT argument
    (43) arguments -> . arguments COMMA argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 55
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43

    arguments                      shift and go to state 56
    argument                       shift and go to state 57
    variable                       shift and go to state 61
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 26

    (24) fscanf_statement -> FSCANF . LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 65


state 27

    (23) fgets_statement -> FGETS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 66


state 28

    (34) assignment_statement -> variable . assignment_operator argument
    (35) assignment_statement -> variable . PLUS_PLUS
    (36) assignment_statement -> variable . MINUS_MINUS
    (97) array_declaration_statement -> variable . EQUALS array
    (28) assignment_operator -> . EQUALS
    (29) assignment_operator -> . PLUS_EQUALS
    (30) assignment_operator -> . MINUS_EQUALS
    (31) assignment_operator -> . TIMES_EQUALS
    (32) assignment_operator -> . DIVIDE_EQUALS
    (33) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 68
    MINUS_MINUS     shift and go to state 69
    EQUALS          shift and go to state 70
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    TIMES_EQUALS    shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MOD_EQUALS      shift and go to state 75

    assignment_operator            shift and go to state 67

state 29

    (65) for_part1 -> FOR . LEFT_PAREN assignment_list SEMICOLON
    (66) for_part1 -> FOR . LEFT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 76


state 30

    (39) print_function -> PRINT .

    LEFT_PAREN      reduce using rule 39 (print_function -> PRINT .)
    INTEGER         reduce using rule 39 (print_function -> PRINT .)
    FLOAT           reduce using rule 39 (print_function -> PRINT .)
    STRING          reduce using rule 39 (print_function -> PRINT .)
    ID              reduce using rule 39 (print_function -> PRINT .)
    TRUE            reduce using rule 39 (print_function -> PRINT .)
    FALSE           reduce using rule 39 (print_function -> PRINT .)
    LOGICAL_NOT     reduce using rule 39 (print_function -> PRINT .)


state 31

    (40) print_function -> ECHO .

    LEFT_PAREN      reduce using rule 40 (print_function -> ECHO .)
    INTEGER         reduce using rule 40 (print_function -> ECHO .)
    FLOAT           reduce using rule 40 (print_function -> ECHO .)
    STRING          reduce using rule 40 (print_function -> ECHO .)
    ID              reduce using rule 40 (print_function -> ECHO .)
    TRUE            reduce using rule 40 (print_function -> ECHO .)
    FALSE           reduce using rule 40 (print_function -> ECHO .)
    LOGICAL_NOT     reduce using rule 40 (print_function -> ECHO .)


state 32

    (27) variable -> ID .

    PLUS_PLUS       reduce using rule 27 (variable -> ID .)
    MINUS_MINUS     reduce using rule 27 (variable -> ID .)
    EQUALS          reduce using rule 27 (variable -> ID .)
    PLUS_EQUALS     reduce using rule 27 (variable -> ID .)
    MINUS_EQUALS    reduce using rule 27 (variable -> ID .)
    TIMES_EQUALS    reduce using rule 27 (variable -> ID .)
    DIVIDE_EQUALS   reduce using rule 27 (variable -> ID .)
    MOD_EQUALS      reduce using rule 27 (variable -> ID .)
    TIMES           reduce using rule 27 (variable -> ID .)
    DIVIDE          reduce using rule 27 (variable -> ID .)
    PLUS            reduce using rule 27 (variable -> ID .)
    MINUS           reduce using rule 27 (variable -> ID .)
    EQUAL_TO        reduce using rule 27 (variable -> ID .)
    NOT_EQUAL_TO    reduce using rule 27 (variable -> ID .)
    LESS_THAN       reduce using rule 27 (variable -> ID .)
    GREATER_THAN    reduce using rule 27 (variable -> ID .)
    LESS_EQUAL      reduce using rule 27 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 27 (variable -> ID .)
    IDENTICAL_TO    reduce using rule 27 (variable -> ID .)
    NOT_IDENTICAL_TO reduce using rule 27 (variable -> ID .)
    DIFFERENT       reduce using rule 27 (variable -> ID .)
    SEMICOLON       reduce using rule 27 (variable -> ID .)
    DOT             reduce using rule 27 (variable -> ID .)
    COMMA           reduce using rule 27 (variable -> ID .)
    RIGHT_PAREN     reduce using rule 27 (variable -> ID .)
    RIGHT_BRACKET   reduce using rule 27 (variable -> ID .)
    LOGICAL_AND     reduce using rule 27 (variable -> ID .)
    LOGICAL_OR      reduce using rule 27 (variable -> ID .)
    LOGICAL_XOR     reduce using rule 27 (variable -> ID .)


state 33

    (1) program -> OPEN_TAG statements CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG statements CLOSE_TAG .)


state 34

    (3) statements -> statements statement2 .

    CLOSE_TAG       reduce using rule 3 (statements -> statements statement2 .)
    ONE_LINE_COMMENT reduce using rule 3 (statements -> statements statement2 .)
    MULTI_LINE_COMMENT reduce using rule 3 (statements -> statements statement2 .)
    BREAK           reduce using rule 3 (statements -> statements statement2 .)
    CONTINUE        reduce using rule 3 (statements -> statements statement2 .)
    IF              reduce using rule 3 (statements -> statements statement2 .)
    WHILE           reduce using rule 3 (statements -> statements statement2 .)
    RETURN          reduce using rule 3 (statements -> statements statement2 .)
    FUNCTION        reduce using rule 3 (statements -> statements statement2 .)
    FSCANF          reduce using rule 3 (statements -> statements statement2 .)
    FGETS           reduce using rule 3 (statements -> statements statement2 .)
    FOR             reduce using rule 3 (statements -> statements statement2 .)
    PRINT           reduce using rule 3 (statements -> statements statement2 .)
    ECHO            reduce using rule 3 (statements -> statements statement2 .)
    ID              reduce using rule 3 (statements -> statements statement2 .)
    RIGHT_BRACE     reduce using rule 3 (statements -> statements statement2 .)


state 35

    (4) statement2 -> statement SEMICOLON .

    CLOSE_TAG       reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 4 (statement2 -> statement SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 4 (statement2 -> statement SEMICOLON .)
    BREAK           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    CONTINUE        reduce using rule 4 (statement2 -> statement SEMICOLON .)
    IF              reduce using rule 4 (statement2 -> statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FUNCTION        reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FSCANF          reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FGETS           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FOR             reduce using rule 4 (statement2 -> statement SEMICOLON .)
    PRINT           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ECHO            reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ID              reduce using rule 4 (statement2 -> statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (statement2 -> statement SEMICOLON .)


state 36

    (62) if_statement -> IF LEFT_PAREN . condition RIGHT_PAREN block
    (63) if_statement -> IF LEFT_PAREN . condition RIGHT_PAREN block ELSE block
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    ID              shift and go to state 32

    condition                      shift and go to state 77
    expression                     shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 37

    (64) while_statement -> WHILE LEFT_PAREN . condition RIGHT_PAREN block
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    ID              shift and go to state 32

    condition                      shift and go to state 78
    expression                     shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 38

    (67) for_statement -> for_part1 condition . for_part3
    (82) condition -> condition . logical_operator condition
    (69) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (70) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

    SEMICOLON       shift and go to state 45
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

    for_part3                      shift and go to state 79
    logical_operator               shift and go to state 80

state 39

    (68) for_statement -> for_part1 for_part3 .

    CLOSE_TAG       reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    ONE_LINE_COMMENT reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    BREAK           reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    CONTINUE        reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    IF              reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    WHILE           reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    RETURN          reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    FUNCTION        reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    FSCANF          reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    FGETS           reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    FOR             reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    PRINT           reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    ECHO            reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    ID              reduce using rule 68 (for_statement -> for_part1 for_part3 .)
    RIGHT_BRACE     reduce using rule 68 (for_statement -> for_part1 for_part3 .)


state 40

    (79) condition -> TRUE .

    SEMICOLON       reduce using rule 79 (condition -> TRUE .)
    LOGICAL_AND     reduce using rule 79 (condition -> TRUE .)
    LOGICAL_OR      reduce using rule 79 (condition -> TRUE .)
    LOGICAL_XOR     reduce using rule 79 (condition -> TRUE .)
    DOT             reduce using rule 79 (condition -> TRUE .)
    COMMA           reduce using rule 79 (condition -> TRUE .)
    RIGHT_PAREN     reduce using rule 79 (condition -> TRUE .)
    RIGHT_BRACKET   reduce using rule 79 (condition -> TRUE .)


state 41

    (80) condition -> FALSE .

    SEMICOLON       reduce using rule 80 (condition -> FALSE .)
    LOGICAL_AND     reduce using rule 80 (condition -> FALSE .)
    LOGICAL_OR      reduce using rule 80 (condition -> FALSE .)
    LOGICAL_XOR     reduce using rule 80 (condition -> FALSE .)
    DOT             reduce using rule 80 (condition -> FALSE .)
    COMMA           reduce using rule 80 (condition -> FALSE .)
    RIGHT_PAREN     reduce using rule 80 (condition -> FALSE .)
    RIGHT_BRACKET   reduce using rule 80 (condition -> FALSE .)


state 42

    (81) condition -> expression . relational_operator expression
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term
    (85) relational_operator -> . EQUAL_TO
    (86) relational_operator -> . NOT_EQUAL_TO
    (87) relational_operator -> . LESS_THAN
    (88) relational_operator -> . GREATER_THAN
    (89) relational_operator -> . LESS_EQUAL
    (90) relational_operator -> . GREATER_EQUAL
    (91) relational_operator -> . IDENTICAL_TO
    (92) relational_operator -> . NOT_IDENTICAL_TO
    (93) relational_operator -> . DIFFERENT

    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    EQUAL_TO        shift and go to state 87
    NOT_EQUAL_TO    shift and go to state 88
    LESS_THAN       shift and go to state 89
    GREATER_THAN    shift and go to state 90
    LESS_EQUAL      shift and go to state 91
    GREATER_EQUAL   shift and go to state 92
    IDENTICAL_TO    shift and go to state 93
    NOT_IDENTICAL_TO shift and go to state 94
    DIFFERENT       shift and go to state 95

    relational_operator            shift and go to state 84

state 43

    (83) condition -> LOGICAL_NOT . condition
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    ID              shift and go to state 32

    condition                      shift and go to state 96
    expression                     shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 44

    (84) condition -> LEFT_PAREN . condition RIGHT_PAREN
    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    ID              shift and go to state 32

    condition                      shift and go to state 97
    expression                     shift and go to state 98
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 45

    (69) for_part3 -> SEMICOLON . statement_list RIGHT_PAREN for_part4
    (70) for_part3 -> SEMICOLON . RIGHT_PAREN for_part4
    (75) statement_list -> . statement
    (76) statement_list -> . statement_list COMMA statement
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (37) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (38) print_statement -> . print_function arguments
    (24) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (23) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (97) array_declaration_statement -> . variable EQUALS array
    (39) print_function -> . PRINT
    (40) print_function -> . ECHO
    (27) variable -> . ID

    RIGHT_PAREN     shift and go to state 100
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FSCANF          shift and go to state 26
    FGETS           shift and go to state 27
    PRINT           shift and go to state 30
    ECHO            shift and go to state 31
    ID              shift and go to state 32

    statement_list                 shift and go to state 99
    statement                      shift and go to state 101
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    print_function                 shift and go to state 25
    variable                       shift and go to state 28

state 46

    (53) expression -> term .
    (54) term -> term . TIMES factor
    (55) term -> term . DIVIDE factor

    PLUS            reduce using rule 53 (expression -> term .)
    MINUS           reduce using rule 53 (expression -> term .)
    EQUAL_TO        reduce using rule 53 (expression -> term .)
    NOT_EQUAL_TO    reduce using rule 53 (expression -> term .)
    LESS_THAN       reduce using rule 53 (expression -> term .)
    GREATER_THAN    reduce using rule 53 (expression -> term .)
    LESS_EQUAL      reduce using rule 53 (expression -> term .)
    GREATER_EQUAL   reduce using rule 53 (expression -> term .)
    IDENTICAL_TO    reduce using rule 53 (expression -> term .)
    NOT_IDENTICAL_TO reduce using rule 53 (expression -> term .)
    DIFFERENT       reduce using rule 53 (expression -> term .)
    SEMICOLON       reduce using rule 53 (expression -> term .)
    DOT             reduce using rule 53 (expression -> term .)
    COMMA           reduce using rule 53 (expression -> term .)
    RIGHT_PAREN     reduce using rule 53 (expression -> term .)
    RIGHT_BRACKET   reduce using rule 53 (expression -> term .)
    LOGICAL_AND     reduce using rule 53 (expression -> term .)
    LOGICAL_OR      reduce using rule 53 (expression -> term .)
    LOGICAL_XOR     reduce using rule 53 (expression -> term .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103


state 47

    (56) term -> factor .

    TIMES           reduce using rule 56 (term -> factor .)
    DIVIDE          reduce using rule 56 (term -> factor .)
    PLUS            reduce using rule 56 (term -> factor .)
    MINUS           reduce using rule 56 (term -> factor .)
    EQUAL_TO        reduce using rule 56 (term -> factor .)
    NOT_EQUAL_TO    reduce using rule 56 (term -> factor .)
    LESS_THAN       reduce using rule 56 (term -> factor .)
    GREATER_THAN    reduce using rule 56 (term -> factor .)
    LESS_EQUAL      reduce using rule 56 (term -> factor .)
    GREATER_EQUAL   reduce using rule 56 (term -> factor .)
    IDENTICAL_TO    reduce using rule 56 (term -> factor .)
    NOT_IDENTICAL_TO reduce using rule 56 (term -> factor .)
    DIFFERENT       reduce using rule 56 (term -> factor .)
    SEMICOLON       reduce using rule 56 (term -> factor .)
    DOT             reduce using rule 56 (term -> factor .)
    COMMA           reduce using rule 56 (term -> factor .)
    RIGHT_PAREN     reduce using rule 56 (term -> factor .)
    RIGHT_BRACKET   reduce using rule 56 (term -> factor .)
    LOGICAL_AND     reduce using rule 56 (term -> factor .)
    LOGICAL_OR      reduce using rule 56 (term -> factor .)
    LOGICAL_XOR     reduce using rule 56 (term -> factor .)


state 48

    (57) factor -> INTEGER .

    TIMES           reduce using rule 57 (factor -> INTEGER .)
    DIVIDE          reduce using rule 57 (factor -> INTEGER .)
    PLUS            reduce using rule 57 (factor -> INTEGER .)
    MINUS           reduce using rule 57 (factor -> INTEGER .)
    EQUAL_TO        reduce using rule 57 (factor -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 57 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 57 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 57 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 57 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 57 (factor -> INTEGER .)
    IDENTICAL_TO    reduce using rule 57 (factor -> INTEGER .)
    NOT_IDENTICAL_TO reduce using rule 57 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 57 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 57 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 57 (factor -> INTEGER .)
    LOGICAL_AND     reduce using rule 57 (factor -> INTEGER .)
    LOGICAL_OR      reduce using rule 57 (factor -> INTEGER .)
    LOGICAL_XOR     reduce using rule 57 (factor -> INTEGER .)
    DOT             reduce using rule 57 (factor -> INTEGER .)
    COMMA           reduce using rule 57 (factor -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 57 (factor -> INTEGER .)


state 49

    (58) factor -> FLOAT .

    TIMES           reduce using rule 58 (factor -> FLOAT .)
    DIVIDE          reduce using rule 58 (factor -> FLOAT .)
    PLUS            reduce using rule 58 (factor -> FLOAT .)
    MINUS           reduce using rule 58 (factor -> FLOAT .)
    EQUAL_TO        reduce using rule 58 (factor -> FLOAT .)
    NOT_EQUAL_TO    reduce using rule 58 (factor -> FLOAT .)
    LESS_THAN       reduce using rule 58 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 58 (factor -> FLOAT .)
    LESS_EQUAL      reduce using rule 58 (factor -> FLOAT .)
    GREATER_EQUAL   reduce using rule 58 (factor -> FLOAT .)
    IDENTICAL_TO    reduce using rule 58 (factor -> FLOAT .)
    NOT_IDENTICAL_TO reduce using rule 58 (factor -> FLOAT .)
    DIFFERENT       reduce using rule 58 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 58 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 58 (factor -> FLOAT .)
    LOGICAL_AND     reduce using rule 58 (factor -> FLOAT .)
    LOGICAL_OR      reduce using rule 58 (factor -> FLOAT .)
    LOGICAL_XOR     reduce using rule 58 (factor -> FLOAT .)
    DOT             reduce using rule 58 (factor -> FLOAT .)
    COMMA           reduce using rule 58 (factor -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 58 (factor -> FLOAT .)


state 50

    (59) factor -> variable .

    TIMES           reduce using rule 59 (factor -> variable .)
    DIVIDE          reduce using rule 59 (factor -> variable .)
    PLUS            reduce using rule 59 (factor -> variable .)
    MINUS           reduce using rule 59 (factor -> variable .)
    EQUAL_TO        reduce using rule 59 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 59 (factor -> variable .)
    LESS_THAN       reduce using rule 59 (factor -> variable .)
    GREATER_THAN    reduce using rule 59 (factor -> variable .)
    LESS_EQUAL      reduce using rule 59 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 59 (factor -> variable .)
    IDENTICAL_TO    reduce using rule 59 (factor -> variable .)
    NOT_IDENTICAL_TO reduce using rule 59 (factor -> variable .)
    DIFFERENT       reduce using rule 59 (factor -> variable .)
    SEMICOLON       reduce using rule 59 (factor -> variable .)
    RIGHT_PAREN     reduce using rule 59 (factor -> variable .)
    LOGICAL_AND     reduce using rule 59 (factor -> variable .)
    LOGICAL_OR      reduce using rule 59 (factor -> variable .)
    LOGICAL_XOR     reduce using rule 59 (factor -> variable .)
    DOT             reduce using rule 59 (factor -> variable .)
    COMMA           reduce using rule 59 (factor -> variable .)
    RIGHT_BRACKET   reduce using rule 59 (factor -> variable .)


state 51

    (60) factor -> STRING .

    TIMES           reduce using rule 60 (factor -> STRING .)
    DIVIDE          reduce using rule 60 (factor -> STRING .)
    PLUS            reduce using rule 60 (factor -> STRING .)
    MINUS           reduce using rule 60 (factor -> STRING .)
    EQUAL_TO        reduce using rule 60 (factor -> STRING .)
    NOT_EQUAL_TO    reduce using rule 60 (factor -> STRING .)
    LESS_THAN       reduce using rule 60 (factor -> STRING .)
    GREATER_THAN    reduce using rule 60 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 60 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 60 (factor -> STRING .)
    IDENTICAL_TO    reduce using rule 60 (factor -> STRING .)
    NOT_IDENTICAL_TO reduce using rule 60 (factor -> STRING .)
    DIFFERENT       reduce using rule 60 (factor -> STRING .)
    SEMICOLON       reduce using rule 60 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 60 (factor -> STRING .)
    LOGICAL_AND     reduce using rule 60 (factor -> STRING .)
    LOGICAL_OR      reduce using rule 60 (factor -> STRING .)
    LOGICAL_XOR     reduce using rule 60 (factor -> STRING .)
    DOT             reduce using rule 60 (factor -> STRING .)
    COMMA           reduce using rule 60 (factor -> STRING .)
    RIGHT_BRACKET   reduce using rule 60 (factor -> STRING .)


state 52

    (22) statement_return -> RETURN expression . SEMICOLON
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 104
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86


state 53

    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 32

    expression                     shift and go to state 105
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 54

    (19) function_statement -> FUNCTION NAME . LEFT_PAREN arguments RIGHT_PAREN block

    LEFT_PAREN      shift and go to state 106


state 55

    (37) print_statement -> print_function LEFT_PAREN . arguments RIGHT_PAREN
    (84) condition -> LEFT_PAREN . condition RIGHT_PAREN
    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (41) arguments -> . argument
    (42) arguments -> . arguments DOT argument
    (43) arguments -> . arguments COMMA argument
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (27) variable -> . ID
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44
    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32

    arguments                      shift and go to state 107
    condition                      shift and go to state 108
    expression                     shift and go to state 109
    argument                       shift and go to state 57
    term                           shift and go to state 46
    variable                       shift and go to state 61
    assignment_statement           shift and go to state 64
    factor                         shift and go to state 47

state 56

    (38) print_statement -> print_function arguments .
    (42) arguments -> arguments . DOT argument
    (43) arguments -> arguments . COMMA argument

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 38 (print_statement -> print_function arguments .)
    RIGHT_PAREN     reduce using rule 38 (print_statement -> print_function arguments .)
    DOT             shift and go to state 110
    COMMA           shift and go to state 111

  ! COMMA           [ reduce using rule 38 (print_statement -> print_function arguments .) ]


state 57

    (41) arguments -> argument .

    DOT             reduce using rule 41 (arguments -> argument .)
    COMMA           reduce using rule 41 (arguments -> argument .)
    SEMICOLON       reduce using rule 41 (arguments -> argument .)
    RIGHT_PAREN     reduce using rule 41 (arguments -> argument .)


state 58

    (44) argument -> INTEGER .
    (57) factor -> INTEGER .

  ! reduce/reduce conflict for DOT resolved using rule 44 (argument -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (argument -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (argument -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 44 (argument -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 44 (argument -> INTEGER .)
    DOT             reduce using rule 44 (argument -> INTEGER .)
    COMMA           reduce using rule 44 (argument -> INTEGER .)
    SEMICOLON       reduce using rule 44 (argument -> INTEGER .)
    RIGHT_PAREN     reduce using rule 44 (argument -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 44 (argument -> INTEGER .)
    TIMES           reduce using rule 57 (factor -> INTEGER .)
    DIVIDE          reduce using rule 57 (factor -> INTEGER .)
    PLUS            reduce using rule 57 (factor -> INTEGER .)
    MINUS           reduce using rule 57 (factor -> INTEGER .)
    EQUAL_TO        reduce using rule 57 (factor -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 57 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 57 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 57 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 57 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 57 (factor -> INTEGER .)
    IDENTICAL_TO    reduce using rule 57 (factor -> INTEGER .)
    NOT_IDENTICAL_TO reduce using rule 57 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 57 (factor -> INTEGER .)

  ! DOT             [ reduce using rule 57 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 57 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 57 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 57 (factor -> INTEGER .) ]
  ! RIGHT_BRACKET   [ reduce using rule 57 (factor -> INTEGER .) ]


state 59

    (45) argument -> FLOAT .
    (58) factor -> FLOAT .

  ! reduce/reduce conflict for DOT resolved using rule 45 (argument -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 45 (argument -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (argument -> FLOAT .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 45 (argument -> FLOAT .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 45 (argument -> FLOAT .)
    DOT             reduce using rule 45 (argument -> FLOAT .)
    COMMA           reduce using rule 45 (argument -> FLOAT .)
    SEMICOLON       reduce using rule 45 (argument -> FLOAT .)
    RIGHT_PAREN     reduce using rule 45 (argument -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 45 (argument -> FLOAT .)
    TIMES           reduce using rule 58 (factor -> FLOAT .)
    DIVIDE          reduce using rule 58 (factor -> FLOAT .)
    PLUS            reduce using rule 58 (factor -> FLOAT .)
    MINUS           reduce using rule 58 (factor -> FLOAT .)
    EQUAL_TO        reduce using rule 58 (factor -> FLOAT .)
    NOT_EQUAL_TO    reduce using rule 58 (factor -> FLOAT .)
    LESS_THAN       reduce using rule 58 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 58 (factor -> FLOAT .)
    LESS_EQUAL      reduce using rule 58 (factor -> FLOAT .)
    GREATER_EQUAL   reduce using rule 58 (factor -> FLOAT .)
    IDENTICAL_TO    reduce using rule 58 (factor -> FLOAT .)
    NOT_IDENTICAL_TO reduce using rule 58 (factor -> FLOAT .)
    DIFFERENT       reduce using rule 58 (factor -> FLOAT .)

  ! DOT             [ reduce using rule 58 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 58 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 58 (factor -> FLOAT .) ]
  ! RIGHT_PAREN     [ reduce using rule 58 (factor -> FLOAT .) ]
  ! RIGHT_BRACKET   [ reduce using rule 58 (factor -> FLOAT .) ]


state 60

    (46) argument -> STRING .
    (60) factor -> STRING .

  ! reduce/reduce conflict for DOT resolved using rule 46 (argument -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 46 (argument -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 46 (argument -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 46 (argument -> STRING .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 46 (argument -> STRING .)
    DOT             reduce using rule 46 (argument -> STRING .)
    COMMA           reduce using rule 46 (argument -> STRING .)
    SEMICOLON       reduce using rule 46 (argument -> STRING .)
    RIGHT_PAREN     reduce using rule 46 (argument -> STRING .)
    RIGHT_BRACKET   reduce using rule 46 (argument -> STRING .)
    TIMES           reduce using rule 60 (factor -> STRING .)
    DIVIDE          reduce using rule 60 (factor -> STRING .)
    PLUS            reduce using rule 60 (factor -> STRING .)
    MINUS           reduce using rule 60 (factor -> STRING .)
    EQUAL_TO        reduce using rule 60 (factor -> STRING .)
    NOT_EQUAL_TO    reduce using rule 60 (factor -> STRING .)
    LESS_THAN       reduce using rule 60 (factor -> STRING .)
    GREATER_THAN    reduce using rule 60 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 60 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 60 (factor -> STRING .)
    IDENTICAL_TO    reduce using rule 60 (factor -> STRING .)
    NOT_IDENTICAL_TO reduce using rule 60 (factor -> STRING .)
    DIFFERENT       reduce using rule 60 (factor -> STRING .)

  ! DOT             [ reduce using rule 60 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 60 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 60 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 60 (factor -> STRING .) ]
  ! RIGHT_BRACKET   [ reduce using rule 60 (factor -> STRING .) ]


state 61

    (47) argument -> variable .
    (34) assignment_statement -> variable . assignment_operator argument
    (35) assignment_statement -> variable . PLUS_PLUS
    (36) assignment_statement -> variable . MINUS_MINUS
    (59) factor -> variable .
    (28) assignment_operator -> . EQUALS
    (29) assignment_operator -> . PLUS_EQUALS
    (30) assignment_operator -> . MINUS_EQUALS
    (31) assignment_operator -> . TIMES_EQUALS
    (32) assignment_operator -> . DIVIDE_EQUALS
    (33) assignment_operator -> . MOD_EQUALS

  ! reduce/reduce conflict for DOT resolved using rule 47 (argument -> variable .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (argument -> variable .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (argument -> variable .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 47 (argument -> variable .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 47 (argument -> variable .)
    DOT             reduce using rule 47 (argument -> variable .)
    COMMA           reduce using rule 47 (argument -> variable .)
    SEMICOLON       reduce using rule 47 (argument -> variable .)
    RIGHT_PAREN     reduce using rule 47 (argument -> variable .)
    RIGHT_BRACKET   reduce using rule 47 (argument -> variable .)
    PLUS_PLUS       shift and go to state 68
    MINUS_MINUS     shift and go to state 69
    TIMES           reduce using rule 59 (factor -> variable .)
    DIVIDE          reduce using rule 59 (factor -> variable .)
    PLUS            reduce using rule 59 (factor -> variable .)
    MINUS           reduce using rule 59 (factor -> variable .)
    EQUAL_TO        reduce using rule 59 (factor -> variable .)
    NOT_EQUAL_TO    reduce using rule 59 (factor -> variable .)
    LESS_THAN       reduce using rule 59 (factor -> variable .)
    GREATER_THAN    reduce using rule 59 (factor -> variable .)
    LESS_EQUAL      reduce using rule 59 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 59 (factor -> variable .)
    IDENTICAL_TO    reduce using rule 59 (factor -> variable .)
    NOT_IDENTICAL_TO reduce using rule 59 (factor -> variable .)
    DIFFERENT       reduce using rule 59 (factor -> variable .)
    EQUALS          shift and go to state 112
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    TIMES_EQUALS    shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MOD_EQUALS      shift and go to state 75

  ! DOT             [ reduce using rule 59 (factor -> variable .) ]
  ! COMMA           [ reduce using rule 59 (factor -> variable .) ]
  ! SEMICOLON       [ reduce using rule 59 (factor -> variable .) ]
  ! RIGHT_PAREN     [ reduce using rule 59 (factor -> variable .) ]
  ! RIGHT_BRACKET   [ reduce using rule 59 (factor -> variable .) ]

    assignment_operator            shift and go to state 67

state 62

    (48) argument -> expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term
    (81) condition -> expression . relational_operator expression
    (85) relational_operator -> . EQUAL_TO
    (86) relational_operator -> . NOT_EQUAL_TO
    (87) relational_operator -> . LESS_THAN
    (88) relational_operator -> . GREATER_THAN
    (89) relational_operator -> . LESS_EQUAL
    (90) relational_operator -> . GREATER_EQUAL
    (91) relational_operator -> . IDENTICAL_TO
    (92) relational_operator -> . NOT_IDENTICAL_TO
    (93) relational_operator -> . DIFFERENT

    DOT             reduce using rule 48 (argument -> expression .)
    COMMA           reduce using rule 48 (argument -> expression .)
    SEMICOLON       reduce using rule 48 (argument -> expression .)
    RIGHT_PAREN     reduce using rule 48 (argument -> expression .)
    RIGHT_BRACKET   reduce using rule 48 (argument -> expression .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    EQUAL_TO        shift and go to state 87
    NOT_EQUAL_TO    shift and go to state 88
    LESS_THAN       shift and go to state 89
    GREATER_THAN    shift and go to state 90
    LESS_EQUAL      shift and go to state 91
    GREATER_EQUAL   shift and go to state 92
    IDENTICAL_TO    shift and go to state 93
    NOT_IDENTICAL_TO shift and go to state 94
    DIFFERENT       shift and go to state 95

    relational_operator            shift and go to state 84

state 63

    (49) argument -> condition .
    (82) condition -> condition . logical_operator condition
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

    DOT             reduce using rule 49 (argument -> condition .)
    COMMA           reduce using rule 49 (argument -> condition .)
    SEMICOLON       reduce using rule 49 (argument -> condition .)
    RIGHT_PAREN     reduce using rule 49 (argument -> condition .)
    RIGHT_BRACKET   reduce using rule 49 (argument -> condition .)
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

    logical_operator               shift and go to state 80

state 64

    (50) argument -> assignment_statement .

    DOT             reduce using rule 50 (argument -> assignment_statement .)
    COMMA           reduce using rule 50 (argument -> assignment_statement .)
    SEMICOLON       reduce using rule 50 (argument -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 50 (argument -> assignment_statement .)
    RIGHT_BRACKET   reduce using rule 50 (argument -> assignment_statement .)


state 65

    (24) fscanf_statement -> FSCANF LEFT_PAREN . STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    STDIN           shift and go to state 113


state 66

    (23) fgets_statement -> FGETS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 114


state 67

    (34) assignment_statement -> variable assignment_operator . argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44

    variable                       shift and go to state 61
    argument                       shift and go to state 115
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 68

    (35) assignment_statement -> variable PLUS_PLUS .

    SEMICOLON       reduce using rule 35 (assignment_statement -> variable PLUS_PLUS .)
    DOT             reduce using rule 35 (assignment_statement -> variable PLUS_PLUS .)
    COMMA           reduce using rule 35 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_PAREN     reduce using rule 35 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_BRACKET   reduce using rule 35 (assignment_statement -> variable PLUS_PLUS .)


state 69

    (36) assignment_statement -> variable MINUS_MINUS .

    SEMICOLON       reduce using rule 36 (assignment_statement -> variable MINUS_MINUS .)
    DOT             reduce using rule 36 (assignment_statement -> variable MINUS_MINUS .)
    COMMA           reduce using rule 36 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_PAREN     reduce using rule 36 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_BRACKET   reduce using rule 36 (assignment_statement -> variable MINUS_MINUS .)


state 70

    (97) array_declaration_statement -> variable EQUALS . array
    (28) assignment_operator -> EQUALS .
    (98) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (99) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET

    INTEGER         reduce using rule 28 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 28 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 28 (assignment_operator -> EQUALS .)
    ID              reduce using rule 28 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 28 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 28 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 28 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 28 (assignment_operator -> EQUALS .)
    ARRAY           shift and go to state 117
    LEFT_BRACKET    shift and go to state 118

    array                          shift and go to state 116

state 71

    (29) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)
    ID              reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 29 (assignment_operator -> PLUS_EQUALS .)


state 72

    (30) assignment_operator -> MINUS_EQUALS .

    INTEGER         reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)
    FLOAT           reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)
    STRING          reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)
    ID              reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)
    TRUE            reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)
    FALSE           reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)
    LEFT_PAREN      reduce using rule 30 (assignment_operator -> MINUS_EQUALS .)


state 73

    (31) assignment_operator -> TIMES_EQUALS .

    INTEGER         reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)
    FLOAT           reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)
    STRING          reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)
    ID              reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)
    TRUE            reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)
    FALSE           reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)
    LOGICAL_NOT     reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)
    LEFT_PAREN      reduce using rule 31 (assignment_operator -> TIMES_EQUALS .)


state 74

    (32) assignment_operator -> DIVIDE_EQUALS .

    INTEGER         reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)
    FLOAT           reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)
    STRING          reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)
    ID              reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)
    TRUE            reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)
    FALSE           reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)
    LOGICAL_NOT     reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_PAREN      reduce using rule 32 (assignment_operator -> DIVIDE_EQUALS .)


state 75

    (33) assignment_operator -> MOD_EQUALS .

    INTEGER         reduce using rule 33 (assignment_operator -> MOD_EQUALS .)
    FLOAT           reduce using rule 33 (assignment_operator -> MOD_EQUALS .)
    STRING          reduce using rule 33 (assignment_operator -> MOD_EQUALS .)
    ID              reduce using rule 33 (assignment_operator -> MOD_EQUALS .)
    TRUE            reduce using rule 33 (assignment_operator -> MOD_EQUALS .)
    FALSE           reduce using rule 33 (assignment_operator -> MOD_EQUALS .)
    LOGICAL_NOT     reduce using rule 33 (assignment_operator -> MOD_EQUALS .)
    LEFT_PAREN      reduce using rule 33 (assignment_operator -> MOD_EQUALS .)


state 76

    (65) for_part1 -> FOR LEFT_PAREN . assignment_list SEMICOLON
    (66) for_part1 -> FOR LEFT_PAREN . SEMICOLON
    (73) assignment_list -> . assignment_statement
    (74) assignment_list -> . assignment_list COMMA assignment_statement
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (27) variable -> . ID

    SEMICOLON       shift and go to state 120
    ID              shift and go to state 32

    assignment_list                shift and go to state 119
    assignment_statement           shift and go to state 121
    variable                       shift and go to state 122

state 77

    (62) if_statement -> IF LEFT_PAREN condition . RIGHT_PAREN block
    (63) if_statement -> IF LEFT_PAREN condition . RIGHT_PAREN block ELSE block
    (82) condition -> condition . logical_operator condition
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

    RIGHT_PAREN     shift and go to state 123
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

    logical_operator               shift and go to state 80

state 78

    (64) while_statement -> WHILE LEFT_PAREN condition . RIGHT_PAREN block
    (82) condition -> condition . logical_operator condition
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

    RIGHT_PAREN     shift and go to state 124
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

    logical_operator               shift and go to state 80

state 79

    (67) for_statement -> for_part1 condition for_part3 .

    CLOSE_TAG       reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    ONE_LINE_COMMENT reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    BREAK           reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    CONTINUE        reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    IF              reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    WHILE           reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    RETURN          reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    FUNCTION        reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    FSCANF          reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    FGETS           reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    FOR             reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    PRINT           reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    ECHO            reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    ID              reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)
    RIGHT_BRACE     reduce using rule 67 (for_statement -> for_part1 condition for_part3 .)


state 80

    (82) condition -> condition logical_operator . condition
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    ID              shift and go to state 32

    condition                      shift and go to state 125
    expression                     shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 81

    (94) logical_operator -> LOGICAL_AND .

    TRUE            reduce using rule 94 (logical_operator -> LOGICAL_AND .)
    FALSE           reduce using rule 94 (logical_operator -> LOGICAL_AND .)
    LOGICAL_NOT     reduce using rule 94 (logical_operator -> LOGICAL_AND .)
    LEFT_PAREN      reduce using rule 94 (logical_operator -> LOGICAL_AND .)
    INTEGER         reduce using rule 94 (logical_operator -> LOGICAL_AND .)
    FLOAT           reduce using rule 94 (logical_operator -> LOGICAL_AND .)
    STRING          reduce using rule 94 (logical_operator -> LOGICAL_AND .)
    ID              reduce using rule 94 (logical_operator -> LOGICAL_AND .)


state 82

    (95) logical_operator -> LOGICAL_OR .

    TRUE            reduce using rule 95 (logical_operator -> LOGICAL_OR .)
    FALSE           reduce using rule 95 (logical_operator -> LOGICAL_OR .)
    LOGICAL_NOT     reduce using rule 95 (logical_operator -> LOGICAL_OR .)
    LEFT_PAREN      reduce using rule 95 (logical_operator -> LOGICAL_OR .)
    INTEGER         reduce using rule 95 (logical_operator -> LOGICAL_OR .)
    FLOAT           reduce using rule 95 (logical_operator -> LOGICAL_OR .)
    STRING          reduce using rule 95 (logical_operator -> LOGICAL_OR .)
    ID              reduce using rule 95 (logical_operator -> LOGICAL_OR .)


state 83

    (96) logical_operator -> LOGICAL_XOR .

    TRUE            reduce using rule 96 (logical_operator -> LOGICAL_XOR .)
    FALSE           reduce using rule 96 (logical_operator -> LOGICAL_XOR .)
    LOGICAL_NOT     reduce using rule 96 (logical_operator -> LOGICAL_XOR .)
    LEFT_PAREN      reduce using rule 96 (logical_operator -> LOGICAL_XOR .)
    INTEGER         reduce using rule 96 (logical_operator -> LOGICAL_XOR .)
    FLOAT           reduce using rule 96 (logical_operator -> LOGICAL_XOR .)
    STRING          reduce using rule 96 (logical_operator -> LOGICAL_XOR .)
    ID              reduce using rule 96 (logical_operator -> LOGICAL_XOR .)


state 84

    (81) condition -> expression relational_operator . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 32

    expression                     shift and go to state 126
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 85

    (51) expression -> expression PLUS . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 32

    term                           shift and go to state 127
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 86

    (52) expression -> expression MINUS . term
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 32

    term                           shift and go to state 128
    factor                         shift and go to state 47
    variable                       shift and go to state 50

state 87

    (85) relational_operator -> EQUAL_TO .

    INTEGER         reduce using rule 85 (relational_operator -> EQUAL_TO .)
    FLOAT           reduce using rule 85 (relational_operator -> EQUAL_TO .)
    STRING          reduce using rule 85 (relational_operator -> EQUAL_TO .)
    LEFT_PAREN      reduce using rule 85 (relational_operator -> EQUAL_TO .)
    ID              reduce using rule 85 (relational_operator -> EQUAL_TO .)


state 88

    (86) relational_operator -> NOT_EQUAL_TO .

    INTEGER         reduce using rule 86 (relational_operator -> NOT_EQUAL_TO .)
    FLOAT           reduce using rule 86 (relational_operator -> NOT_EQUAL_TO .)
    STRING          reduce using rule 86 (relational_operator -> NOT_EQUAL_TO .)
    LEFT_PAREN      reduce using rule 86 (relational_operator -> NOT_EQUAL_TO .)
    ID              reduce using rule 86 (relational_operator -> NOT_EQUAL_TO .)


state 89

    (87) relational_operator -> LESS_THAN .

    INTEGER         reduce using rule 87 (relational_operator -> LESS_THAN .)
    FLOAT           reduce using rule 87 (relational_operator -> LESS_THAN .)
    STRING          reduce using rule 87 (relational_operator -> LESS_THAN .)
    LEFT_PAREN      reduce using rule 87 (relational_operator -> LESS_THAN .)
    ID              reduce using rule 87 (relational_operator -> LESS_THAN .)


state 90

    (88) relational_operator -> GREATER_THAN .

    INTEGER         reduce using rule 88 (relational_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 88 (relational_operator -> GREATER_THAN .)
    STRING          reduce using rule 88 (relational_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 88 (relational_operator -> GREATER_THAN .)
    ID              reduce using rule 88 (relational_operator -> GREATER_THAN .)


state 91

    (89) relational_operator -> LESS_EQUAL .

    INTEGER         reduce using rule 89 (relational_operator -> LESS_EQUAL .)
    FLOAT           reduce using rule 89 (relational_operator -> LESS_EQUAL .)
    STRING          reduce using rule 89 (relational_operator -> LESS_EQUAL .)
    LEFT_PAREN      reduce using rule 89 (relational_operator -> LESS_EQUAL .)
    ID              reduce using rule 89 (relational_operator -> LESS_EQUAL .)


state 92

    (90) relational_operator -> GREATER_EQUAL .

    INTEGER         reduce using rule 90 (relational_operator -> GREATER_EQUAL .)
    FLOAT           reduce using rule 90 (relational_operator -> GREATER_EQUAL .)
    STRING          reduce using rule 90 (relational_operator -> GREATER_EQUAL .)
    LEFT_PAREN      reduce using rule 90 (relational_operator -> GREATER_EQUAL .)
    ID              reduce using rule 90 (relational_operator -> GREATER_EQUAL .)


state 93

    (91) relational_operator -> IDENTICAL_TO .

    INTEGER         reduce using rule 91 (relational_operator -> IDENTICAL_TO .)
    FLOAT           reduce using rule 91 (relational_operator -> IDENTICAL_TO .)
    STRING          reduce using rule 91 (relational_operator -> IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 91 (relational_operator -> IDENTICAL_TO .)
    ID              reduce using rule 91 (relational_operator -> IDENTICAL_TO .)


state 94

    (92) relational_operator -> NOT_IDENTICAL_TO .

    INTEGER         reduce using rule 92 (relational_operator -> NOT_IDENTICAL_TO .)
    FLOAT           reduce using rule 92 (relational_operator -> NOT_IDENTICAL_TO .)
    STRING          reduce using rule 92 (relational_operator -> NOT_IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 92 (relational_operator -> NOT_IDENTICAL_TO .)
    ID              reduce using rule 92 (relational_operator -> NOT_IDENTICAL_TO .)


state 95

    (93) relational_operator -> DIFFERENT .

    INTEGER         reduce using rule 93 (relational_operator -> DIFFERENT .)
    FLOAT           reduce using rule 93 (relational_operator -> DIFFERENT .)
    STRING          reduce using rule 93 (relational_operator -> DIFFERENT .)
    LEFT_PAREN      reduce using rule 93 (relational_operator -> DIFFERENT .)
    ID              reduce using rule 93 (relational_operator -> DIFFERENT .)


state 96

    (83) condition -> LOGICAL_NOT condition .
    (82) condition -> condition . logical_operator condition
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 83 (condition -> LOGICAL_NOT condition .)
    DOT             reduce using rule 83 (condition -> LOGICAL_NOT condition .)
    COMMA           reduce using rule 83 (condition -> LOGICAL_NOT condition .)
    RIGHT_PAREN     reduce using rule 83 (condition -> LOGICAL_NOT condition .)
    RIGHT_BRACKET   reduce using rule 83 (condition -> LOGICAL_NOT condition .)
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

  ! LOGICAL_AND     [ reduce using rule 83 (condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_OR      [ reduce using rule 83 (condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 83 (condition -> LOGICAL_NOT condition .) ]

    logical_operator               shift and go to state 80

state 97

    (84) condition -> LEFT_PAREN condition . RIGHT_PAREN
    (82) condition -> condition . logical_operator condition
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

    RIGHT_PAREN     shift and go to state 129
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

    logical_operator               shift and go to state 80

state 98

    (61) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (81) condition -> expression . relational_operator expression
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term
    (85) relational_operator -> . EQUAL_TO
    (86) relational_operator -> . NOT_EQUAL_TO
    (87) relational_operator -> . LESS_THAN
    (88) relational_operator -> . GREATER_THAN
    (89) relational_operator -> . LESS_EQUAL
    (90) relational_operator -> . GREATER_EQUAL
    (91) relational_operator -> . IDENTICAL_TO
    (92) relational_operator -> . NOT_IDENTICAL_TO
    (93) relational_operator -> . DIFFERENT

    RIGHT_PAREN     shift and go to state 130
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    EQUAL_TO        shift and go to state 87
    NOT_EQUAL_TO    shift and go to state 88
    LESS_THAN       shift and go to state 89
    GREATER_THAN    shift and go to state 90
    LESS_EQUAL      shift and go to state 91
    GREATER_EQUAL   shift and go to state 92
    IDENTICAL_TO    shift and go to state 93
    NOT_IDENTICAL_TO shift and go to state 94
    DIFFERENT       shift and go to state 95

    relational_operator            shift and go to state 84

state 99

    (69) for_part3 -> SEMICOLON statement_list . RIGHT_PAREN for_part4
    (76) statement_list -> statement_list . COMMA statement

    RIGHT_PAREN     shift and go to state 131
    COMMA           shift and go to state 132


state 100

    (70) for_part3 -> SEMICOLON RIGHT_PAREN . for_part4
    (71) for_part4 -> . block
    (72) for_part4 -> . SEMICOLON
    (77) block -> . LEFT_BRACE statements RIGHT_BRACE
    (78) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 133
    LEFT_BRACE      shift and go to state 136

    for_part4                      shift and go to state 134
    block                          shift and go to state 135

state 101

    (75) statement_list -> statement .

    RIGHT_PAREN     reduce using rule 75 (statement_list -> statement .)
    COMMA           reduce using rule 75 (statement_list -> statement .)


state 102

    (54) term -> term TIMES . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 32

    factor                         shift and go to state 137
    variable                       shift and go to state 50

state 103

    (55) term -> term DIVIDE . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (27) variable -> . ID

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 51
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 32

    factor                         shift and go to state 138
    variable                       shift and go to state 50

state 104

    (22) statement_return -> RETURN expression SEMICOLON .

    CLOSE_TAG       reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    FSCANF          reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    FGETS           reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (statement_return -> RETURN expression SEMICOLON .)


state 105

    (61) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    RIGHT_PAREN     shift and go to state 130
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86


state 106

    (19) function_statement -> FUNCTION NAME LEFT_PAREN . arguments RIGHT_PAREN block
    (41) arguments -> . argument
    (42) arguments -> . arguments DOT argument
    (43) arguments -> . arguments COMMA argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44

    arguments                      shift and go to state 139
    argument                       shift and go to state 57
    variable                       shift and go to state 61
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 107

    (37) print_statement -> print_function LEFT_PAREN arguments . RIGHT_PAREN
    (42) arguments -> arguments . DOT argument
    (43) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 140
    DOT             shift and go to state 110
    COMMA           shift and go to state 111


state 108

    (84) condition -> LEFT_PAREN condition . RIGHT_PAREN
    (82) condition -> condition . logical_operator condition
    (49) argument -> condition .
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 129
    DOT             reduce using rule 49 (argument -> condition .)
    COMMA           reduce using rule 49 (argument -> condition .)
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

  ! RIGHT_PAREN     [ reduce using rule 49 (argument -> condition .) ]

    logical_operator               shift and go to state 80

state 109

    (61) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (81) condition -> expression . relational_operator expression
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term
    (48) argument -> expression .
    (85) relational_operator -> . EQUAL_TO
    (86) relational_operator -> . NOT_EQUAL_TO
    (87) relational_operator -> . LESS_THAN
    (88) relational_operator -> . GREATER_THAN
    (89) relational_operator -> . LESS_EQUAL
    (90) relational_operator -> . GREATER_EQUAL
    (91) relational_operator -> . IDENTICAL_TO
    (92) relational_operator -> . NOT_IDENTICAL_TO
    (93) relational_operator -> . DIFFERENT

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 130
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    DOT             reduce using rule 48 (argument -> expression .)
    COMMA           reduce using rule 48 (argument -> expression .)
    EQUAL_TO        shift and go to state 87
    NOT_EQUAL_TO    shift and go to state 88
    LESS_THAN       shift and go to state 89
    GREATER_THAN    shift and go to state 90
    LESS_EQUAL      shift and go to state 91
    GREATER_EQUAL   shift and go to state 92
    IDENTICAL_TO    shift and go to state 93
    NOT_IDENTICAL_TO shift and go to state 94
    DIFFERENT       shift and go to state 95

  ! RIGHT_PAREN     [ reduce using rule 48 (argument -> expression .) ]

    relational_operator            shift and go to state 84

state 110

    (42) arguments -> arguments DOT . argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44

    argument                       shift and go to state 141
    variable                       shift and go to state 61
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 111

    (43) arguments -> arguments COMMA . argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44

    argument                       shift and go to state 142
    variable                       shift and go to state 61
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 112

    (28) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 28 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 28 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 28 (assignment_operator -> EQUALS .)
    ID              reduce using rule 28 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 28 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 28 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 28 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 28 (assignment_operator -> EQUALS .)


state 113

    (24) fscanf_statement -> FSCANF LEFT_PAREN STDIN . COMMA STRING COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 143


state 114

    (23) fgets_statement -> FGETS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 144


state 115

    (34) assignment_statement -> variable assignment_operator argument .

    SEMICOLON       reduce using rule 34 (assignment_statement -> variable assignment_operator argument .)
    DOT             reduce using rule 34 (assignment_statement -> variable assignment_operator argument .)
    COMMA           reduce using rule 34 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_PAREN     reduce using rule 34 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_BRACKET   reduce using rule 34 (assignment_statement -> variable assignment_operator argument .)


state 116

    (97) array_declaration_statement -> variable EQUALS array .

    SEMICOLON       reduce using rule 97 (array_declaration_statement -> variable EQUALS array .)
    RIGHT_PAREN     reduce using rule 97 (array_declaration_statement -> variable EQUALS array .)
    COMMA           reduce using rule 97 (array_declaration_statement -> variable EQUALS array .)


state 117

    (98) array -> ARRAY . LEFT_PAREN array_elements RIGHT_PAREN

    LEFT_PAREN      shift and go to state 145


state 118

    (99) array -> LEFT_BRACKET . array_elements RIGHT_BRACKET
    (100) array_elements -> . argument
    (101) array_elements -> . array_elements COMMA argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44

    array_elements                 shift and go to state 146
    argument                       shift and go to state 147
    variable                       shift and go to state 61
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 119

    (65) for_part1 -> FOR LEFT_PAREN assignment_list . SEMICOLON
    (74) assignment_list -> assignment_list . COMMA assignment_statement

    SEMICOLON       shift and go to state 148
    COMMA           shift and go to state 149


state 120

    (66) for_part1 -> FOR LEFT_PAREN SEMICOLON .

    TRUE            reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FALSE           reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LEFT_PAREN      reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    INTEGER         reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FLOAT           reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    STRING          reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    ID              reduce using rule 66 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)


state 121

    (73) assignment_list -> assignment_statement .

    SEMICOLON       reduce using rule 73 (assignment_list -> assignment_statement .)
    COMMA           reduce using rule 73 (assignment_list -> assignment_statement .)


state 122

    (34) assignment_statement -> variable . assignment_operator argument
    (35) assignment_statement -> variable . PLUS_PLUS
    (36) assignment_statement -> variable . MINUS_MINUS
    (28) assignment_operator -> . EQUALS
    (29) assignment_operator -> . PLUS_EQUALS
    (30) assignment_operator -> . MINUS_EQUALS
    (31) assignment_operator -> . TIMES_EQUALS
    (32) assignment_operator -> . DIVIDE_EQUALS
    (33) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 68
    MINUS_MINUS     shift and go to state 69
    EQUALS          shift and go to state 112
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    TIMES_EQUALS    shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MOD_EQUALS      shift and go to state 75

    assignment_operator            shift and go to state 67

state 123

    (62) if_statement -> IF LEFT_PAREN condition RIGHT_PAREN . block
    (63) if_statement -> IF LEFT_PAREN condition RIGHT_PAREN . block ELSE block
    (77) block -> . LEFT_BRACE statements RIGHT_BRACE
    (78) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 136

    block                          shift and go to state 150

state 124

    (64) while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN . block
    (77) block -> . LEFT_BRACE statements RIGHT_BRACE
    (78) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 136

    block                          shift and go to state 151

state 125

    (82) condition -> condition logical_operator condition .
    (82) condition -> condition . logical_operator condition
    (94) logical_operator -> . LOGICAL_AND
    (95) logical_operator -> . LOGICAL_OR
    (96) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 82 (condition -> condition logical_operator condition .)
    DOT             reduce using rule 82 (condition -> condition logical_operator condition .)
    COMMA           reduce using rule 82 (condition -> condition logical_operator condition .)
    RIGHT_PAREN     reduce using rule 82 (condition -> condition logical_operator condition .)
    RIGHT_BRACKET   reduce using rule 82 (condition -> condition logical_operator condition .)
    LOGICAL_AND     shift and go to state 81
    LOGICAL_OR      shift and go to state 82
    LOGICAL_XOR     shift and go to state 83

  ! LOGICAL_AND     [ reduce using rule 82 (condition -> condition logical_operator condition .) ]
  ! LOGICAL_OR      [ reduce using rule 82 (condition -> condition logical_operator condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 82 (condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 80

state 126

    (81) condition -> expression relational_operator expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 81 (condition -> expression relational_operator expression .)
    LOGICAL_AND     reduce using rule 81 (condition -> expression relational_operator expression .)
    LOGICAL_OR      reduce using rule 81 (condition -> expression relational_operator expression .)
    LOGICAL_XOR     reduce using rule 81 (condition -> expression relational_operator expression .)
    DOT             reduce using rule 81 (condition -> expression relational_operator expression .)
    COMMA           reduce using rule 81 (condition -> expression relational_operator expression .)
    RIGHT_PAREN     reduce using rule 81 (condition -> expression relational_operator expression .)
    RIGHT_BRACKET   reduce using rule 81 (condition -> expression relational_operator expression .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86


state 127

    (51) expression -> expression PLUS term .
    (54) term -> term . TIMES factor
    (55) term -> term . DIVIDE factor

    PLUS            reduce using rule 51 (expression -> expression PLUS term .)
    MINUS           reduce using rule 51 (expression -> expression PLUS term .)
    EQUAL_TO        reduce using rule 51 (expression -> expression PLUS term .)
    NOT_EQUAL_TO    reduce using rule 51 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 51 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 51 (expression -> expression PLUS term .)
    LESS_EQUAL      reduce using rule 51 (expression -> expression PLUS term .)
    GREATER_EQUAL   reduce using rule 51 (expression -> expression PLUS term .)
    IDENTICAL_TO    reduce using rule 51 (expression -> expression PLUS term .)
    NOT_IDENTICAL_TO reduce using rule 51 (expression -> expression PLUS term .)
    DIFFERENT       reduce using rule 51 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 51 (expression -> expression PLUS term .)
    DOT             reduce using rule 51 (expression -> expression PLUS term .)
    COMMA           reduce using rule 51 (expression -> expression PLUS term .)
    RIGHT_PAREN     reduce using rule 51 (expression -> expression PLUS term .)
    RIGHT_BRACKET   reduce using rule 51 (expression -> expression PLUS term .)
    LOGICAL_AND     reduce using rule 51 (expression -> expression PLUS term .)
    LOGICAL_OR      reduce using rule 51 (expression -> expression PLUS term .)
    LOGICAL_XOR     reduce using rule 51 (expression -> expression PLUS term .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103


state 128

    (52) expression -> expression MINUS term .
    (54) term -> term . TIMES factor
    (55) term -> term . DIVIDE factor

    PLUS            reduce using rule 52 (expression -> expression MINUS term .)
    MINUS           reduce using rule 52 (expression -> expression MINUS term .)
    EQUAL_TO        reduce using rule 52 (expression -> expression MINUS term .)
    NOT_EQUAL_TO    reduce using rule 52 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 52 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 52 (expression -> expression MINUS term .)
    LESS_EQUAL      reduce using rule 52 (expression -> expression MINUS term .)
    GREATER_EQUAL   reduce using rule 52 (expression -> expression MINUS term .)
    IDENTICAL_TO    reduce using rule 52 (expression -> expression MINUS term .)
    NOT_IDENTICAL_TO reduce using rule 52 (expression -> expression MINUS term .)
    DIFFERENT       reduce using rule 52 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 52 (expression -> expression MINUS term .)
    DOT             reduce using rule 52 (expression -> expression MINUS term .)
    COMMA           reduce using rule 52 (expression -> expression MINUS term .)
    RIGHT_PAREN     reduce using rule 52 (expression -> expression MINUS term .)
    RIGHT_BRACKET   reduce using rule 52 (expression -> expression MINUS term .)
    LOGICAL_AND     reduce using rule 52 (expression -> expression MINUS term .)
    LOGICAL_OR      reduce using rule 52 (expression -> expression MINUS term .)
    LOGICAL_XOR     reduce using rule 52 (expression -> expression MINUS term .)
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103


state 129

    (84) condition -> LEFT_PAREN condition RIGHT_PAREN .

    SEMICOLON       reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_AND     reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DOT             reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)
    COMMA           reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 84 (condition -> LEFT_PAREN condition RIGHT_PAREN .)


state 130

    (61) factor -> LEFT_PAREN expression RIGHT_PAREN .

    TIMES           reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUAL_TO        reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUAL_TO    reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_THAN       reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL_TO    reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL_TO reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIFFERENT       reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT             reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_AND     reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 131

    (69) for_part3 -> SEMICOLON statement_list RIGHT_PAREN . for_part4
    (71) for_part4 -> . block
    (72) for_part4 -> . SEMICOLON
    (77) block -> . LEFT_BRACE statements RIGHT_BRACE
    (78) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 133
    LEFT_BRACE      shift and go to state 136

    for_part4                      shift and go to state 152
    block                          shift and go to state 135

state 132

    (76) statement_list -> statement_list COMMA . statement
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (37) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (38) print_statement -> . print_function arguments
    (24) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (23) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (97) array_declaration_statement -> . variable EQUALS array
    (39) print_function -> . PRINT
    (40) print_function -> . ECHO
    (27) variable -> . ID

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FSCANF          shift and go to state 26
    FGETS           shift and go to state 27
    PRINT           shift and go to state 30
    ECHO            shift and go to state 31
    ID              shift and go to state 32

    statement                      shift and go to state 153
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    print_function                 shift and go to state 25
    variable                       shift and go to state 28

state 133

    (72) for_part4 -> SEMICOLON .

    CLOSE_TAG       reduce using rule 72 (for_part4 -> SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 72 (for_part4 -> SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 72 (for_part4 -> SEMICOLON .)
    BREAK           reduce using rule 72 (for_part4 -> SEMICOLON .)
    CONTINUE        reduce using rule 72 (for_part4 -> SEMICOLON .)
    IF              reduce using rule 72 (for_part4 -> SEMICOLON .)
    WHILE           reduce using rule 72 (for_part4 -> SEMICOLON .)
    RETURN          reduce using rule 72 (for_part4 -> SEMICOLON .)
    FUNCTION        reduce using rule 72 (for_part4 -> SEMICOLON .)
    FSCANF          reduce using rule 72 (for_part4 -> SEMICOLON .)
    FGETS           reduce using rule 72 (for_part4 -> SEMICOLON .)
    FOR             reduce using rule 72 (for_part4 -> SEMICOLON .)
    PRINT           reduce using rule 72 (for_part4 -> SEMICOLON .)
    ECHO            reduce using rule 72 (for_part4 -> SEMICOLON .)
    ID              reduce using rule 72 (for_part4 -> SEMICOLON .)
    RIGHT_BRACE     reduce using rule 72 (for_part4 -> SEMICOLON .)


state 134

    (70) for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    IF              reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ID              reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 70 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)


state 135

    (71) for_part4 -> block .

    CLOSE_TAG       reduce using rule 71 (for_part4 -> block .)
    ONE_LINE_COMMENT reduce using rule 71 (for_part4 -> block .)
    MULTI_LINE_COMMENT reduce using rule 71 (for_part4 -> block .)
    BREAK           reduce using rule 71 (for_part4 -> block .)
    CONTINUE        reduce using rule 71 (for_part4 -> block .)
    IF              reduce using rule 71 (for_part4 -> block .)
    WHILE           reduce using rule 71 (for_part4 -> block .)
    RETURN          reduce using rule 71 (for_part4 -> block .)
    FUNCTION        reduce using rule 71 (for_part4 -> block .)
    FSCANF          reduce using rule 71 (for_part4 -> block .)
    FGETS           reduce using rule 71 (for_part4 -> block .)
    FOR             reduce using rule 71 (for_part4 -> block .)
    PRINT           reduce using rule 71 (for_part4 -> block .)
    ECHO            reduce using rule 71 (for_part4 -> block .)
    ID              reduce using rule 71 (for_part4 -> block .)
    RIGHT_BRACE     reduce using rule 71 (for_part4 -> block .)


state 136

    (77) block -> LEFT_BRACE . statements RIGHT_BRACE
    (78) block -> LEFT_BRACE . RIGHT_BRACE
    (2) statements -> . statement2
    (3) statements -> . statements statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . statement_return
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (62) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block
    (63) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block ELSE block
    (64) while_statement -> . WHILE LEFT_PAREN condition RIGHT_PAREN block
    (67) for_statement -> . for_part1 condition for_part3
    (68) for_statement -> . for_part1 for_part3
    (22) statement_return -> . RETURN expression SEMICOLON
    (19) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (37) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (38) print_statement -> . print_function arguments
    (24) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (23) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (97) array_declaration_statement -> . variable EQUALS array
    (65) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (66) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (39) print_function -> . PRINT
    (40) print_function -> . ECHO
    (27) variable -> . ID

    RIGHT_BRACE     shift and go to state 155
    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    RETURN          shift and go to state 23
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 26
    FGETS           shift and go to state 27
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ECHO            shift and go to state 31
    ID              shift and go to state 32

    statements                     shift and go to state 154
    statement2                     shift and go to state 4
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    statement_return               shift and go to state 9
    function_statement             shift and go to state 10
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    for_part1                      shift and go to state 22
    print_function                 shift and go to state 25
    variable                       shift and go to state 28

state 137

    (54) term -> term TIMES factor .

    TIMES           reduce using rule 54 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 54 (term -> term TIMES factor .)
    PLUS            reduce using rule 54 (term -> term TIMES factor .)
    MINUS           reduce using rule 54 (term -> term TIMES factor .)
    EQUAL_TO        reduce using rule 54 (term -> term TIMES factor .)
    NOT_EQUAL_TO    reduce using rule 54 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 54 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 54 (term -> term TIMES factor .)
    LESS_EQUAL      reduce using rule 54 (term -> term TIMES factor .)
    GREATER_EQUAL   reduce using rule 54 (term -> term TIMES factor .)
    IDENTICAL_TO    reduce using rule 54 (term -> term TIMES factor .)
    NOT_IDENTICAL_TO reduce using rule 54 (term -> term TIMES factor .)
    DIFFERENT       reduce using rule 54 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 54 (term -> term TIMES factor .)
    DOT             reduce using rule 54 (term -> term TIMES factor .)
    COMMA           reduce using rule 54 (term -> term TIMES factor .)
    RIGHT_PAREN     reduce using rule 54 (term -> term TIMES factor .)
    RIGHT_BRACKET   reduce using rule 54 (term -> term TIMES factor .)
    LOGICAL_AND     reduce using rule 54 (term -> term TIMES factor .)
    LOGICAL_OR      reduce using rule 54 (term -> term TIMES factor .)
    LOGICAL_XOR     reduce using rule 54 (term -> term TIMES factor .)


state 138

    (55) term -> term DIVIDE factor .

    TIMES           reduce using rule 55 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 55 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 55 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 55 (term -> term DIVIDE factor .)
    EQUAL_TO        reduce using rule 55 (term -> term DIVIDE factor .)
    NOT_EQUAL_TO    reduce using rule 55 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 55 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 55 (term -> term DIVIDE factor .)
    LESS_EQUAL      reduce using rule 55 (term -> term DIVIDE factor .)
    GREATER_EQUAL   reduce using rule 55 (term -> term DIVIDE factor .)
    IDENTICAL_TO    reduce using rule 55 (term -> term DIVIDE factor .)
    NOT_IDENTICAL_TO reduce using rule 55 (term -> term DIVIDE factor .)
    DIFFERENT       reduce using rule 55 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 55 (term -> term DIVIDE factor .)
    DOT             reduce using rule 55 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 55 (term -> term DIVIDE factor .)
    RIGHT_PAREN     reduce using rule 55 (term -> term DIVIDE factor .)
    RIGHT_BRACKET   reduce using rule 55 (term -> term DIVIDE factor .)
    LOGICAL_AND     reduce using rule 55 (term -> term DIVIDE factor .)
    LOGICAL_OR      reduce using rule 55 (term -> term DIVIDE factor .)
    LOGICAL_XOR     reduce using rule 55 (term -> term DIVIDE factor .)


state 139

    (19) function_statement -> FUNCTION NAME LEFT_PAREN arguments . RIGHT_PAREN block
    (42) arguments -> arguments . DOT argument
    (43) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 156
    DOT             shift and go to state 110
    COMMA           shift and go to state 111


state 140

    (37) print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .

    SEMICOLON       reduce using rule 37 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 37 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 37 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)


state 141

    (42) arguments -> arguments DOT argument .

    DOT             reduce using rule 42 (arguments -> arguments DOT argument .)
    COMMA           reduce using rule 42 (arguments -> arguments DOT argument .)
    SEMICOLON       reduce using rule 42 (arguments -> arguments DOT argument .)
    RIGHT_PAREN     reduce using rule 42 (arguments -> arguments DOT argument .)


state 142

    (43) arguments -> arguments COMMA argument .

    DOT             reduce using rule 43 (arguments -> arguments COMMA argument .)
    COMMA           reduce using rule 43 (arguments -> arguments COMMA argument .)
    SEMICOLON       reduce using rule 43 (arguments -> arguments COMMA argument .)
    RIGHT_PAREN     reduce using rule 43 (arguments -> arguments COMMA argument .)


state 143

    (24) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA . STRING COMMA variable_list RIGHT_PAREN

    STRING          shift and go to state 157


state 144

    (23) fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 23 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 23 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    COMMA           reduce using rule 23 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)


state 145

    (98) array -> ARRAY LEFT_PAREN . array_elements RIGHT_PAREN
    (100) array_elements -> . argument
    (101) array_elements -> . array_elements COMMA argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44

    array_elements                 shift and go to state 158
    argument                       shift and go to state 147
    variable                       shift and go to state 61
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 146

    (99) array -> LEFT_BRACKET array_elements . RIGHT_BRACKET
    (101) array_elements -> array_elements . COMMA argument

    RIGHT_BRACKET   shift and go to state 159
    COMMA           shift and go to state 160


state 147

    (100) array_elements -> argument .

    RIGHT_BRACKET   reduce using rule 100 (array_elements -> argument .)
    COMMA           reduce using rule 100 (array_elements -> argument .)
    RIGHT_PAREN     reduce using rule 100 (array_elements -> argument .)


state 148

    (65) for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .

    TRUE            reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FALSE           reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LOGICAL_NOT     reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LEFT_PAREN      reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    SEMICOLON       reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    INTEGER         reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FLOAT           reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    STRING          reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    ID              reduce using rule 65 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)


state 149

    (74) assignment_list -> assignment_list COMMA . assignment_statement
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (27) variable -> . ID

    ID              shift and go to state 32

    assignment_statement           shift and go to state 161
    variable                       shift and go to state 122

state 150

    (62) if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .
    (63) if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block . ELSE block

    CLOSE_TAG       reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    BREAK           reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    CONTINUE        reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    IF              reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    WHILE           reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    RETURN          reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    FUNCTION        reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    FSCANF          reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    FGETS           reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    FOR             reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    PRINT           reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    ECHO            reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    ID              reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 62 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block .)
    ELSE            shift and go to state 162


state 151

    (64) while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .

    CLOSE_TAG       reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    BREAK           reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    CONTINUE        reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    IF              reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    WHILE           reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    RETURN          reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    FUNCTION        reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    FSCANF          reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    FGETS           reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    FOR             reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    PRINT           reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    ECHO            reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    ID              reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 64 (while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block .)


state 152

    (69) for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    IF              reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ID              reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 69 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)


state 153

    (76) statement_list -> statement_list COMMA statement .

    RIGHT_PAREN     reduce using rule 76 (statement_list -> statement_list COMMA statement .)
    COMMA           reduce using rule 76 (statement_list -> statement_list COMMA statement .)


state 154

    (77) block -> LEFT_BRACE statements . RIGHT_BRACE
    (3) statements -> statements . statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . statement_return
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (62) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block
    (63) if_statement -> . IF LEFT_PAREN condition RIGHT_PAREN block ELSE block
    (64) while_statement -> . WHILE LEFT_PAREN condition RIGHT_PAREN block
    (67) for_statement -> . for_part1 condition for_part3
    (68) for_statement -> . for_part1 for_part3
    (22) statement_return -> . RETURN expression SEMICOLON
    (19) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (37) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (38) print_statement -> . print_function arguments
    (24) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (23) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (97) array_declaration_statement -> . variable EQUALS array
    (65) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (66) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (39) print_function -> . PRINT
    (40) print_function -> . ECHO
    (27) variable -> . ID

    RIGHT_BRACE     shift and go to state 163
    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    RETURN          shift and go to state 23
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 26
    FGETS           shift and go to state 27
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ECHO            shift and go to state 31
    ID              shift and go to state 32

    statement2                     shift and go to state 34
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    statement_return               shift and go to state 9
    function_statement             shift and go to state 10
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    for_part1                      shift and go to state 22
    print_function                 shift and go to state 25
    variable                       shift and go to state 28

state 155

    (78) block -> LEFT_BRACE RIGHT_BRACE .

    CLOSE_TAG       reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    CONTINUE        reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    FSCANF          reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    FGETS           reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    FOR             reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    ECHO            reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    ID              reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)
    ELSE            reduce using rule 78 (block -> LEFT_BRACE RIGHT_BRACE .)


state 156

    (19) function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN . block
    (77) block -> . LEFT_BRACE statements RIGHT_BRACE
    (78) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 136

    block                          shift and go to state 164

state 157

    (24) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING . COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 165


state 158

    (98) array -> ARRAY LEFT_PAREN array_elements . RIGHT_PAREN
    (101) array_elements -> array_elements . COMMA argument

    RIGHT_PAREN     shift and go to state 166
    COMMA           shift and go to state 160


state 159

    (99) array -> LEFT_BRACKET array_elements RIGHT_BRACKET .

    SEMICOLON       reduce using rule 99 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 99 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    COMMA           reduce using rule 99 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 160

    (101) array_elements -> array_elements COMMA . argument
    (44) argument -> . INTEGER
    (45) argument -> . FLOAT
    (46) argument -> . STRING
    (47) argument -> . variable
    (48) argument -> . expression
    (49) argument -> . condition
    (50) argument -> . assignment_statement
    (27) variable -> . ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . term
    (79) condition -> . TRUE
    (80) condition -> . FALSE
    (81) condition -> . expression relational_operator expression
    (82) condition -> . condition logical_operator condition
    (83) condition -> . LOGICAL_NOT condition
    (84) condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) assignment_statement -> . variable assignment_operator argument
    (35) assignment_statement -> . variable PLUS_PLUS
    (36) assignment_statement -> . variable MINUS_MINUS
    (54) term -> . term TIMES factor
    (55) term -> . term DIVIDE factor
    (56) term -> . factor
    (57) factor -> . INTEGER
    (58) factor -> . FLOAT
    (59) factor -> . variable
    (60) factor -> . STRING
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 60
    ID              shift and go to state 32
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LOGICAL_NOT     shift and go to state 43
    LEFT_PAREN      shift and go to state 44

    argument                       shift and go to state 167
    variable                       shift and go to state 61
    expression                     shift and go to state 62
    condition                      shift and go to state 63
    assignment_statement           shift and go to state 64
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 161

    (74) assignment_list -> assignment_list COMMA assignment_statement .

    SEMICOLON       reduce using rule 74 (assignment_list -> assignment_list COMMA assignment_statement .)
    COMMA           reduce using rule 74 (assignment_list -> assignment_list COMMA assignment_statement .)


state 162

    (63) if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE . block
    (77) block -> . LEFT_BRACE statements RIGHT_BRACE
    (78) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 136

    block                          shift and go to state 168

state 163

    (77) block -> LEFT_BRACE statements RIGHT_BRACE .

    CLOSE_TAG       reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    BREAK           reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CONTINUE        reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    IF              reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    WHILE           reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RETURN          reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FSCANF          reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FGETS           reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FOR             reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PRINT           reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ECHO            reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ID              reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ELSE            reduce using rule 77 (block -> LEFT_BRACE statements RIGHT_BRACE .)


state 164

    (19) function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .

    CLOSE_TAG       reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    BREAK           reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    CONTINUE        reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    IF              reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    WHILE           reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    RETURN          reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FUNCTION        reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FSCANF          reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FGETS           reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FOR             reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    PRINT           reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    ECHO            reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    ID              reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 19 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)


state 165

    (24) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA . variable_list RIGHT_PAREN
    (25) variable_list -> . variable
    (26) variable_list -> . variable_list COMMA variable
    (27) variable -> . ID

    ID              shift and go to state 32

    variable_list                  shift and go to state 169
    variable                       shift and go to state 170

state 166

    (98) array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .

    SEMICOLON       reduce using rule 98 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 98 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    COMMA           reduce using rule 98 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)


state 167

    (101) array_elements -> array_elements COMMA argument .

    RIGHT_BRACKET   reduce using rule 101 (array_elements -> array_elements COMMA argument .)
    COMMA           reduce using rule 101 (array_elements -> array_elements COMMA argument .)
    RIGHT_PAREN     reduce using rule 101 (array_elements -> array_elements COMMA argument .)


state 168

    (63) if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .

    CLOSE_TAG       reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    ONE_LINE_COMMENT reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    MULTI_LINE_COMMENT reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    BREAK           reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    CONTINUE        reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    IF              reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    WHILE           reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    RETURN          reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    FUNCTION        reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    FSCANF          reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    FGETS           reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    FOR             reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    PRINT           reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    ECHO            reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    ID              reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)
    RIGHT_BRACE     reduce using rule 63 (if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block .)


state 169

    (24) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list . RIGHT_PAREN
    (26) variable_list -> variable_list . COMMA variable

    RIGHT_PAREN     shift and go to state 172
    COMMA           shift and go to state 171


state 170

    (25) variable_list -> variable .

    RIGHT_PAREN     reduce using rule 25 (variable_list -> variable .)
    COMMA           reduce using rule 25 (variable_list -> variable .)


state 171

    (26) variable_list -> variable_list COMMA . variable
    (27) variable -> . ID

    ID              shift and go to state 32

    variable                       shift and go to state 173

state 172

    (24) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .

    SEMICOLON       reduce using rule 24 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 24 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    COMMA           reduce using rule 24 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)


state 173

    (26) variable_list -> variable_list COMMA variable .

    RIGHT_PAREN     reduce using rule 26 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 26 (variable_list -> variable_list COMMA variable .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 56 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 96 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 96 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 96 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 108 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 109 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 125 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (argument -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 58
WARNING: reduce/reduce conflict in state 59 resolved using rule (argument -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 59
WARNING: reduce/reduce conflict in state 60 resolved using rule (argument -> STRING)
WARNING: rejected rule (factor -> STRING) in state 60
WARNING: reduce/reduce conflict in state 61 resolved using rule (argument -> variable)
WARNING: rejected rule (factor -> variable) in state 61
