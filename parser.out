Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    ASYNC
    AWAIT
    BOOL
    CALLABLE
    CASE
    CATCH
    CLONE
    COLON
    CONST
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ENUM
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    ITERABLE
    LIST
    LPAREN
    MATCH
    MIXED
    MOD
    NAMESPACE
    NULL
    OBJECT
    POWER
    REQUIRE
    REQUIRE_ONCE
    RPAREN
    SELF
    STATIC
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    VOID
    YIELD
    YIELD_FROM

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG statements CLOSE_TAG
Rule 2     statements -> statement2
Rule 3     statements -> statements statement2
Rule 4     statement2 -> statement SEMICOLON
Rule 5     statement2 -> if_statement
Rule 6     statement2 -> while_statement
Rule 7     statement2 -> for_statement
Rule 8     statement2 -> function_statement
Rule 9     statement2 -> ONE_LINE_COMMENT
Rule 10    statement2 -> MULTI_LINE_COMMENT
Rule 11    statement2 -> class_declaration
Rule 12    statement -> print_statement
Rule 13    statement -> fscanf_statement
Rule 14    statement -> fgets_statement
Rule 15    statement -> assignment_statement
Rule 16    statement -> array_declaration_statement
Rule 17    statement -> BREAK
Rule 18    statement -> CONTINUE
Rule 19    statement -> function_call
Rule 20    statement -> return_statement
Rule 21    function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block
Rule 22    function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
Rule 23    anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
Rule 24    anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block
Rule 25    return_statement -> RETURN arguments
Rule 26    function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN
Rule 27    function_call -> function_name LEFT_PAREN RIGHT_PAREN
Rule 28    function_name -> NAME
Rule 29    function_name -> variable
Rule 30    fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN
Rule 31    fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
Rule 32    variable_list -> variable
Rule 33    variable_list -> variable_list COMMA variable
Rule 34    variable -> ID
Rule 35    variable -> ID CALL NAME
Rule 36    assignment_statement -> variable assignment_operator argument
Rule 37    assignment_statement -> variable PLUS_PLUS
Rule 38    assignment_statement -> variable MINUS_MINUS
Rule 39    assignment_operator -> EQUALS
Rule 40    assignment_operator -> PLUS_EQUALS
Rule 41    assignment_operator -> MINUS_EQUALS
Rule 42    assignment_operator -> TIMES_EQUALS
Rule 43    assignment_operator -> DIVIDE_EQUALS
Rule 44    assignment_operator -> MOD_EQUALS
Rule 45    print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN
Rule 46    print_statement -> print_function arguments
Rule 47    print_function -> PRINT
Rule 48    print_function -> ECHO
Rule 49    arguments -> argument
Rule 50    arguments -> arguments DOT argument
Rule 51    arguments -> arguments COMMA argument
Rule 52    argument -> STRING
Rule 53    argument -> expression
Rule 54    argument -> assignment_statement
Rule 55    argument -> variable CALL function_call
Rule 56    argument -> array
Rule 57    argument -> function_call
Rule 58    argument -> anonymous_function
Rule 59    argument -> fgets_statement
Rule 60    argument -> array_indexing
Rule 61    argument -> casting argument
Rule 62    argument -> object_creation
Rule 63    expression -> expression PLUS term
Rule 64    expression -> expression MINUS term
Rule 65    expression -> term
Rule 66    term -> term TIMES factor
Rule 67    term -> term DIVIDE factor
Rule 68    term -> factor
Rule 69    factor -> INTEGER
Rule 70    factor -> FLOAT
Rule 71    factor -> condition
Rule 72    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 73    if_statement -> IF parenthesized_condition block
Rule 74    if_statement -> IF parenthesized_condition block else_if_extended
Rule 75    if_statement -> IF parenthesized_condition block else_if_extended if_part3
Rule 76    if_statement -> IF parenthesized_condition block if_part3
Rule 77    else_if_extended -> if_part2
Rule 78    else_if_extended -> else_if_extended if_part2
Rule 79    if_part2 -> ELSEIF parenthesized_condition block
Rule 80    if_part3 -> ELSE block
Rule 81    while_statement -> WHILE parenthesized_condition block
Rule 82    for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON
Rule 83    for_part1 -> FOR LEFT_PAREN SEMICOLON
Rule 84    for_statement -> for_part1 condition for_part3
Rule 85    for_statement -> for_part1 for_part3
Rule 86    for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4
Rule 87    for_part3 -> SEMICOLON RIGHT_PAREN for_part4
Rule 88    for_part4 -> block
Rule 89    for_part4 -> SEMICOLON
Rule 90    assignment_list -> assignment_statement
Rule 91    assignment_list -> assignment_list COMMA assignment_statement
Rule 92    statement_list -> statement
Rule 93    statement_list -> statement_list COMMA statement
Rule 94    block -> LEFT_BRACE statements RIGHT_BRACE
Rule 95    block -> LEFT_BRACE RIGHT_BRACE
Rule 96    condition -> simple_condition
Rule 97    condition -> negated_condition
Rule 98    condition -> complex_condition
Rule 99    condition -> parenthesized_condition
Rule 100   simple_condition -> TRUE
Rule 101   simple_condition -> FALSE
Rule 102   simple_condition -> variable
Rule 103   simple_condition -> relational_expression
Rule 104   negated_condition -> LOGICAL_NOT condition
Rule 105   complex_condition -> condition logical_operator condition
Rule 106   parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN
Rule 107   relational_expression -> expression relational_operator expression
Rule 108   relational_operator -> EQUAL_TO
Rule 109   relational_operator -> NOT_EQUAL_TO
Rule 110   relational_operator -> LESS_THAN
Rule 111   relational_operator -> GREATER_THAN
Rule 112   relational_operator -> LESS_EQUAL
Rule 113   relational_operator -> GREATER_EQUAL
Rule 114   relational_operator -> IDENTICAL_TO
Rule 115   relational_operator -> NOT_IDENTICAL_TO
Rule 116   relational_operator -> DIFFERENT
Rule 117   logical_operator -> LOGICAL_AND
Rule 118   logical_operator -> LOGICAL_OR
Rule 119   logical_operator -> LOGICAL_XOR
Rule 120   casting -> LEFT_PAREN casting_type RIGHT_PAREN
Rule 121   casting_type -> INT_TYPE
Rule 122   casting_type -> FLOAT_TYPE
Rule 123   array_declaration_statement -> variable EQUALS array
Rule 124   array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN
Rule 125   array -> LEFT_BRACKET array_elements RIGHT_BRACKET
Rule 126   array_elements -> array_argument
Rule 127   array_elements -> array_elements COMMA array_argument
Rule 128   array_argument -> argument
Rule 129   array_argument -> clave KEY_VALUE argument
Rule 130   clave -> STRING
Rule 131   clave -> INTEGER
Rule 132   array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 133   class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
Rule 134   class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE
Rule 135   class_statements -> class_statement
Rule 136   class_statements -> class_statements class_statement
Rule 137   class_statement -> method_declaration
Rule 138   class_statement -> property_declaration
Rule 139   class_statement -> ONE_LINE_COMMENT
Rule 140   class_statement -> MULTI_LINE_COMMENT
Rule 141   method_declaration -> visibility_operator function_statement
Rule 142   property_declaration -> visibility_operator variable SEMICOLON
Rule 143   visibility_operator -> PUBLIC
Rule 144   visibility_operator -> PRIVATE
Rule 145   visibility_operator -> PROTECTED
Rule 146   object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN
Rule 147   object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN

Terminals, with rules where they appear

ABSTRACT             : 
ARRAY                : 124
AS                   : 
ASYNC                : 
AWAIT                : 
BOOL                 : 
BREAK                : 17
CALL                 : 35 55
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 133 134
CLONE                : 
CLOSE_TAG            : 1
COLON                : 
COMMA                : 31 31 33 51 91 93 127
CONST                : 
CONTINUE             : 18
DECLARE              : 
DEFAULT              : 
DIE                  : 
DIFFERENT            : 116
DIVIDE               : 67
DIVIDE_EQUALS        : 43
DO                   : 
DOT                  : 50
ECHO                 : 48
ELSE                 : 80
ELSEIF               : 79
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENUM                 : 
EQUALS               : 39 123
EQUAL_TO             : 108
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 101
FGETS                : 30
FINAL                : 
FINALLY              : 
FLOAT                : 70
FLOAT_TYPE           : 122
FN                   : 
FOR                  : 82 83
FOREACH              : 
FSCANF               : 31
FUNCTION             : 21 22 23 24
GLOBAL               : 
GOTO                 : 
GREATER_EQUAL        : 113
GREATER_THAN         : 111
HALT_COMPILER        : 
ID                   : 34 35
IDENTICAL_TO         : 114
IF                   : 73 74 75 76
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 69 131 132
INTERFACE            : 
INT_TYPE             : 121
ISSET                : 
ITERABLE             : 
KEY_VALUE            : 129
LEFT_BRACE           : 94 95 133 134
LEFT_BRACKET         : 125 132
LEFT_PAREN           : 21 22 23 24 26 27 30 31 45 72 82 83 106 120 124 146 147
LESS_EQUAL           : 112
LESS_THAN            : 110
LIST                 : 
LOGICAL_AND          : 117
LOGICAL_NOT          : 104
LOGICAL_OR           : 118
LOGICAL_XOR          : 119
LPAREN               : 
MATCH                : 
MINUS                : 64
MINUS_EQUALS         : 41
MINUS_MINUS          : 38
MIXED                : 
MOD                  : 
MOD_EQUALS           : 44
MULTI_LINE_COMMENT   : 10 140
NAME                 : 21 22 28 35 133 134 146 147
NAMESPACE            : 
NEW                  : 146 147
NOT_EQUAL_TO         : 109
NOT_IDENTICAL_TO     : 115
NULL                 : 
OBJECT               : 
ONE_LINE_COMMENT     : 9 139
OPEN_TAG             : 1
PLUS                 : 63
PLUS_EQUALS          : 40
PLUS_PLUS            : 37
POWER                : 
PRINT                : 47
PRIVATE              : 144
PROTECTED            : 145
PUBLIC               : 143
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 25
RIGHT_BRACE          : 94 95 133 134
RIGHT_BRACKET        : 125 132
RIGHT_PAREN          : 21 22 23 24 26 27 30 31 45 72 86 87 106 120 124 146 147
RPAREN               : 
SELF                 : 
SEMICOLON            : 4 82 83 86 87 89 142
STATIC               : 
STDIN                : 30 31
STRING               : 31 52 130
SWITCH               : 
THROW                : 
TIMES                : 66
TIMES_EQUALS         : 42
TRAIT                : 
TRUE                 : 100
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VOID                 : 
WHILE                : 81
YIELD                : 
YIELD_FROM           : 
error                : 

Nonterminals, with rules where they appear

anonymous_function   : 58
argument             : 36 49 50 51 61 128 129
arguments            : 25 26 45 46 50 51 147
array                : 56 123
array_argument       : 126 127
array_declaration_statement : 16
array_elements       : 21 23 124 125 127
array_indexing       : 60
assignment_list      : 82 91
assignment_operator  : 36
assignment_statement : 15 54 90 91
block                : 21 22 23 24 73 74 75 76 79 80 81 88
casting              : 61
casting_type         : 120
class_declaration    : 11
class_statement      : 135 136
class_statements     : 133 136
clave                : 129
complex_condition    : 98
condition            : 71 84 104 105 105 106
else_if_extended     : 74 75 78
expression           : 53 63 64 72 107 107
factor               : 66 67 68
fgets_statement      : 14 59
for_part1            : 84 85
for_part3            : 84 85
for_part4            : 86 87
for_statement        : 7
fscanf_statement     : 13
function_call        : 19 55 57
function_name        : 26 27
function_statement   : 8 141
if_part2             : 77 78
if_part3             : 75 76
if_statement         : 5
logical_operator     : 105
method_declaration   : 137
negated_condition    : 97
object_creation      : 62
parenthesized_condition : 73 74 75 76 79 81 99
print_function       : 45 46
print_statement      : 12
program              : 0
property_declaration : 138
relational_expression : 103
relational_operator  : 107
return_statement     : 20
simple_condition     : 96
statement            : 4 92 93
statement2           : 2 3
statement_list       : 86 93
statements           : 1 3 94
term                 : 63 64 65 66 67
variable             : 29 32 33 36 37 38 55 102 123 132 142
variable_list        : 31 33
visibility_operator  : 141 142
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG statements CLOSE_TAG

    OPEN_TAG        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . statements CLOSE_TAG
    (2) statements -> . statement2
    (3) statements -> . statements statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement2 -> . class_declaration
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (19) statement -> . function_call
    (20) statement -> . return_statement
    (73) if_statement -> . IF parenthesized_condition block
    (74) if_statement -> . IF parenthesized_condition block else_if_extended
    (75) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (76) if_statement -> . IF parenthesized_condition block if_part3
    (81) while_statement -> . WHILE parenthesized_condition block
    (84) for_statement -> . for_part1 condition for_part3
    (85) for_statement -> . for_part1 for_part3
    (21) function_statement -> . FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block
    (22) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (133) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (134) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (45) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (46) print_statement -> . print_function arguments
    (31) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (123) array_declaration_statement -> . variable EQUALS array
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (25) return_statement -> . RETURN arguments
    (82) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (83) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (47) print_function -> . PRINT
    (48) print_function -> . ECHO
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (28) function_name -> . NAME
    (29) function_name -> . variable

    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FUNCTION        shift and go to state 25
    CLASS           shift and go to state 27
    FSCANF          shift and go to state 29
    FGETS           shift and go to state 30
    RETURN          shift and go to state 33
    FOR             shift and go to state 34
    PRINT           shift and go to state 35
    ECHO            shift and go to state 36
    ID              shift and go to state 37
    NAME            shift and go to state 26

    statements                     shift and go to state 3
    statement2                     shift and go to state 4
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    class_declaration              shift and go to state 12
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    function_call                  shift and go to state 20
    return_statement               shift and go to state 21
    for_part1                      shift and go to state 24
    print_function                 shift and go to state 28
    variable                       shift and go to state 31
    function_name                  shift and go to state 32

state 3

    (1) program -> OPEN_TAG statements . CLOSE_TAG
    (3) statements -> statements . statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement2 -> . class_declaration
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (19) statement -> . function_call
    (20) statement -> . return_statement
    (73) if_statement -> . IF parenthesized_condition block
    (74) if_statement -> . IF parenthesized_condition block else_if_extended
    (75) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (76) if_statement -> . IF parenthesized_condition block if_part3
    (81) while_statement -> . WHILE parenthesized_condition block
    (84) for_statement -> . for_part1 condition for_part3
    (85) for_statement -> . for_part1 for_part3
    (21) function_statement -> . FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block
    (22) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (133) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (134) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (45) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (46) print_statement -> . print_function arguments
    (31) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (123) array_declaration_statement -> . variable EQUALS array
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (25) return_statement -> . RETURN arguments
    (82) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (83) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (47) print_function -> . PRINT
    (48) print_function -> . ECHO
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (28) function_name -> . NAME
    (29) function_name -> . variable

    CLOSE_TAG       shift and go to state 38
    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FUNCTION        shift and go to state 25
    CLASS           shift and go to state 27
    FSCANF          shift and go to state 29
    FGETS           shift and go to state 30
    RETURN          shift and go to state 33
    FOR             shift and go to state 34
    PRINT           shift and go to state 35
    ECHO            shift and go to state 36
    ID              shift and go to state 37
    NAME            shift and go to state 26

    statement2                     shift and go to state 39
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    class_declaration              shift and go to state 12
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    function_call                  shift and go to state 20
    return_statement               shift and go to state 21
    for_part1                      shift and go to state 24
    print_function                 shift and go to state 28
    variable                       shift and go to state 31
    function_name                  shift and go to state 32

state 4

    (2) statements -> statement2 .

    CLOSE_TAG       reduce using rule 2 (statements -> statement2 .)
    ONE_LINE_COMMENT reduce using rule 2 (statements -> statement2 .)
    MULTI_LINE_COMMENT reduce using rule 2 (statements -> statement2 .)
    BREAK           reduce using rule 2 (statements -> statement2 .)
    CONTINUE        reduce using rule 2 (statements -> statement2 .)
    IF              reduce using rule 2 (statements -> statement2 .)
    WHILE           reduce using rule 2 (statements -> statement2 .)
    FUNCTION        reduce using rule 2 (statements -> statement2 .)
    CLASS           reduce using rule 2 (statements -> statement2 .)
    FSCANF          reduce using rule 2 (statements -> statement2 .)
    FGETS           reduce using rule 2 (statements -> statement2 .)
    RETURN          reduce using rule 2 (statements -> statement2 .)
    FOR             reduce using rule 2 (statements -> statement2 .)
    PRINT           reduce using rule 2 (statements -> statement2 .)
    ECHO            reduce using rule 2 (statements -> statement2 .)
    ID              reduce using rule 2 (statements -> statement2 .)
    NAME            reduce using rule 2 (statements -> statement2 .)
    RIGHT_BRACE     reduce using rule 2 (statements -> statement2 .)


state 5

    (4) statement2 -> statement . SEMICOLON

    SEMICOLON       shift and go to state 40


state 6

    (5) statement2 -> if_statement .

    CLOSE_TAG       reduce using rule 5 (statement2 -> if_statement .)
    ONE_LINE_COMMENT reduce using rule 5 (statement2 -> if_statement .)
    MULTI_LINE_COMMENT reduce using rule 5 (statement2 -> if_statement .)
    BREAK           reduce using rule 5 (statement2 -> if_statement .)
    CONTINUE        reduce using rule 5 (statement2 -> if_statement .)
    IF              reduce using rule 5 (statement2 -> if_statement .)
    WHILE           reduce using rule 5 (statement2 -> if_statement .)
    FUNCTION        reduce using rule 5 (statement2 -> if_statement .)
    CLASS           reduce using rule 5 (statement2 -> if_statement .)
    FSCANF          reduce using rule 5 (statement2 -> if_statement .)
    FGETS           reduce using rule 5 (statement2 -> if_statement .)
    RETURN          reduce using rule 5 (statement2 -> if_statement .)
    FOR             reduce using rule 5 (statement2 -> if_statement .)
    PRINT           reduce using rule 5 (statement2 -> if_statement .)
    ECHO            reduce using rule 5 (statement2 -> if_statement .)
    ID              reduce using rule 5 (statement2 -> if_statement .)
    NAME            reduce using rule 5 (statement2 -> if_statement .)
    RIGHT_BRACE     reduce using rule 5 (statement2 -> if_statement .)


state 7

    (6) statement2 -> while_statement .

    CLOSE_TAG       reduce using rule 6 (statement2 -> while_statement .)
    ONE_LINE_COMMENT reduce using rule 6 (statement2 -> while_statement .)
    MULTI_LINE_COMMENT reduce using rule 6 (statement2 -> while_statement .)
    BREAK           reduce using rule 6 (statement2 -> while_statement .)
    CONTINUE        reduce using rule 6 (statement2 -> while_statement .)
    IF              reduce using rule 6 (statement2 -> while_statement .)
    WHILE           reduce using rule 6 (statement2 -> while_statement .)
    FUNCTION        reduce using rule 6 (statement2 -> while_statement .)
    CLASS           reduce using rule 6 (statement2 -> while_statement .)
    FSCANF          reduce using rule 6 (statement2 -> while_statement .)
    FGETS           reduce using rule 6 (statement2 -> while_statement .)
    RETURN          reduce using rule 6 (statement2 -> while_statement .)
    FOR             reduce using rule 6 (statement2 -> while_statement .)
    PRINT           reduce using rule 6 (statement2 -> while_statement .)
    ECHO            reduce using rule 6 (statement2 -> while_statement .)
    ID              reduce using rule 6 (statement2 -> while_statement .)
    NAME            reduce using rule 6 (statement2 -> while_statement .)
    RIGHT_BRACE     reduce using rule 6 (statement2 -> while_statement .)


state 8

    (7) statement2 -> for_statement .

    CLOSE_TAG       reduce using rule 7 (statement2 -> for_statement .)
    ONE_LINE_COMMENT reduce using rule 7 (statement2 -> for_statement .)
    MULTI_LINE_COMMENT reduce using rule 7 (statement2 -> for_statement .)
    BREAK           reduce using rule 7 (statement2 -> for_statement .)
    CONTINUE        reduce using rule 7 (statement2 -> for_statement .)
    IF              reduce using rule 7 (statement2 -> for_statement .)
    WHILE           reduce using rule 7 (statement2 -> for_statement .)
    FUNCTION        reduce using rule 7 (statement2 -> for_statement .)
    CLASS           reduce using rule 7 (statement2 -> for_statement .)
    FSCANF          reduce using rule 7 (statement2 -> for_statement .)
    FGETS           reduce using rule 7 (statement2 -> for_statement .)
    RETURN          reduce using rule 7 (statement2 -> for_statement .)
    FOR             reduce using rule 7 (statement2 -> for_statement .)
    PRINT           reduce using rule 7 (statement2 -> for_statement .)
    ECHO            reduce using rule 7 (statement2 -> for_statement .)
    ID              reduce using rule 7 (statement2 -> for_statement .)
    NAME            reduce using rule 7 (statement2 -> for_statement .)
    RIGHT_BRACE     reduce using rule 7 (statement2 -> for_statement .)


state 9

    (8) statement2 -> function_statement .

    CLOSE_TAG       reduce using rule 8 (statement2 -> function_statement .)
    ONE_LINE_COMMENT reduce using rule 8 (statement2 -> function_statement .)
    MULTI_LINE_COMMENT reduce using rule 8 (statement2 -> function_statement .)
    BREAK           reduce using rule 8 (statement2 -> function_statement .)
    CONTINUE        reduce using rule 8 (statement2 -> function_statement .)
    IF              reduce using rule 8 (statement2 -> function_statement .)
    WHILE           reduce using rule 8 (statement2 -> function_statement .)
    FUNCTION        reduce using rule 8 (statement2 -> function_statement .)
    CLASS           reduce using rule 8 (statement2 -> function_statement .)
    FSCANF          reduce using rule 8 (statement2 -> function_statement .)
    FGETS           reduce using rule 8 (statement2 -> function_statement .)
    RETURN          reduce using rule 8 (statement2 -> function_statement .)
    FOR             reduce using rule 8 (statement2 -> function_statement .)
    PRINT           reduce using rule 8 (statement2 -> function_statement .)
    ECHO            reduce using rule 8 (statement2 -> function_statement .)
    ID              reduce using rule 8 (statement2 -> function_statement .)
    NAME            reduce using rule 8 (statement2 -> function_statement .)
    RIGHT_BRACE     reduce using rule 8 (statement2 -> function_statement .)


state 10

    (9) statement2 -> ONE_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    BREAK           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    CONTINUE        reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    IF              reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    WHILE           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FUNCTION        reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    CLASS           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FSCANF          reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FGETS           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    RETURN          reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FOR             reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    PRINT           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    ECHO            reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    ID              reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    NAME            reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)


state 11

    (10) statement2 -> MULTI_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    BREAK           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    CONTINUE        reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    IF              reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    WHILE           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FUNCTION        reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    CLASS           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FSCANF          reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FGETS           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    RETURN          reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FOR             reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    PRINT           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    ECHO            reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    ID              reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    NAME            reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)


state 12

    (11) statement2 -> class_declaration .

    CLOSE_TAG       reduce using rule 11 (statement2 -> class_declaration .)
    ONE_LINE_COMMENT reduce using rule 11 (statement2 -> class_declaration .)
    MULTI_LINE_COMMENT reduce using rule 11 (statement2 -> class_declaration .)
    BREAK           reduce using rule 11 (statement2 -> class_declaration .)
    CONTINUE        reduce using rule 11 (statement2 -> class_declaration .)
    IF              reduce using rule 11 (statement2 -> class_declaration .)
    WHILE           reduce using rule 11 (statement2 -> class_declaration .)
    FUNCTION        reduce using rule 11 (statement2 -> class_declaration .)
    CLASS           reduce using rule 11 (statement2 -> class_declaration .)
    FSCANF          reduce using rule 11 (statement2 -> class_declaration .)
    FGETS           reduce using rule 11 (statement2 -> class_declaration .)
    RETURN          reduce using rule 11 (statement2 -> class_declaration .)
    FOR             reduce using rule 11 (statement2 -> class_declaration .)
    PRINT           reduce using rule 11 (statement2 -> class_declaration .)
    ECHO            reduce using rule 11 (statement2 -> class_declaration .)
    ID              reduce using rule 11 (statement2 -> class_declaration .)
    NAME            reduce using rule 11 (statement2 -> class_declaration .)
    RIGHT_BRACE     reduce using rule 11 (statement2 -> class_declaration .)


state 13

    (12) statement -> print_statement .

    SEMICOLON       reduce using rule 12 (statement -> print_statement .)
    RIGHT_PAREN     reduce using rule 12 (statement -> print_statement .)
    COMMA           reduce using rule 12 (statement -> print_statement .)


state 14

    (13) statement -> fscanf_statement .

    SEMICOLON       reduce using rule 13 (statement -> fscanf_statement .)
    RIGHT_PAREN     reduce using rule 13 (statement -> fscanf_statement .)
    COMMA           reduce using rule 13 (statement -> fscanf_statement .)


state 15

    (14) statement -> fgets_statement .

    SEMICOLON       reduce using rule 14 (statement -> fgets_statement .)
    RIGHT_PAREN     reduce using rule 14 (statement -> fgets_statement .)
    COMMA           reduce using rule 14 (statement -> fgets_statement .)


state 16

    (15) statement -> assignment_statement .

    SEMICOLON       reduce using rule 15 (statement -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 15 (statement -> assignment_statement .)
    COMMA           reduce using rule 15 (statement -> assignment_statement .)


state 17

    (16) statement -> array_declaration_statement .

    SEMICOLON       reduce using rule 16 (statement -> array_declaration_statement .)
    RIGHT_PAREN     reduce using rule 16 (statement -> array_declaration_statement .)
    COMMA           reduce using rule 16 (statement -> array_declaration_statement .)


state 18

    (17) statement -> BREAK .

    SEMICOLON       reduce using rule 17 (statement -> BREAK .)
    RIGHT_PAREN     reduce using rule 17 (statement -> BREAK .)
    COMMA           reduce using rule 17 (statement -> BREAK .)


state 19

    (18) statement -> CONTINUE .

    SEMICOLON       reduce using rule 18 (statement -> CONTINUE .)
    RIGHT_PAREN     reduce using rule 18 (statement -> CONTINUE .)
    COMMA           reduce using rule 18 (statement -> CONTINUE .)


state 20

    (19) statement -> function_call .

    SEMICOLON       reduce using rule 19 (statement -> function_call .)
    RIGHT_PAREN     reduce using rule 19 (statement -> function_call .)
    COMMA           reduce using rule 19 (statement -> function_call .)


state 21

    (20) statement -> return_statement .

    SEMICOLON       reduce using rule 20 (statement -> return_statement .)
    RIGHT_PAREN     reduce using rule 20 (statement -> return_statement .)
    COMMA           reduce using rule 20 (statement -> return_statement .)


state 22

    (73) if_statement -> IF . parenthesized_condition block
    (74) if_statement -> IF . parenthesized_condition block else_if_extended
    (75) if_statement -> IF . parenthesized_condition block else_if_extended if_part3
    (76) if_statement -> IF . parenthesized_condition block if_part3
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 42

    parenthesized_condition        shift and go to state 41

state 23

    (81) while_statement -> WHILE . parenthesized_condition block
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 42

    parenthesized_condition        shift and go to state 43

state 24

    (84) for_statement -> for_part1 . condition for_part3
    (85) for_statement -> for_part1 . for_part3
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (86) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (87) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    SEMICOLON       shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    ID              shift and go to state 37
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61

    condition                      shift and go to state 44
    for_part3                      shift and go to state 45
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54
    expression                     shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59

state 25

    (21) function_statement -> FUNCTION . NAME LEFT_PAREN array_elements RIGHT_PAREN block
    (22) function_statement -> FUNCTION . NAME LEFT_PAREN RIGHT_PAREN block

    NAME            shift and go to state 62


state 26

    (28) function_name -> NAME .

    LEFT_PAREN      reduce using rule 28 (function_name -> NAME .)


state 27

    (133) class_declaration -> CLASS . NAME LEFT_BRACE class_statements RIGHT_BRACE
    (134) class_declaration -> CLASS . NAME LEFT_BRACE RIGHT_BRACE

    NAME            shift and go to state 63


state 28

    (45) print_statement -> print_function . LEFT_PAREN arguments RIGHT_PAREN
    (46) print_statement -> print_function . arguments
    (49) arguments -> . argument
    (50) arguments -> . arguments DOT argument
    (51) arguments -> . arguments COMMA argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    LEFT_PAREN      shift and go to state 64
    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    arguments                      shift and go to state 65
    argument                       shift and go to state 66
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 29

    (31) fscanf_statement -> FSCANF . LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 83


state 30

    (30) fgets_statement -> FGETS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84


state 31

    (36) assignment_statement -> variable . assignment_operator argument
    (37) assignment_statement -> variable . PLUS_PLUS
    (38) assignment_statement -> variable . MINUS_MINUS
    (123) array_declaration_statement -> variable . EQUALS array
    (29) function_name -> variable .
    (39) assignment_operator -> . EQUALS
    (40) assignment_operator -> . PLUS_EQUALS
    (41) assignment_operator -> . MINUS_EQUALS
    (42) assignment_operator -> . TIMES_EQUALS
    (43) assignment_operator -> . DIVIDE_EQUALS
    (44) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 86
    MINUS_MINUS     shift and go to state 87
    EQUALS          shift and go to state 88
    LEFT_PAREN      reduce using rule 29 (function_name -> variable .)
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 90
    TIMES_EQUALS    shift and go to state 91
    DIVIDE_EQUALS   shift and go to state 92
    MOD_EQUALS      shift and go to state 93

    assignment_operator            shift and go to state 85

state 32

    (26) function_call -> function_name . LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> function_name . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 94


state 33

    (25) return_statement -> RETURN . arguments
    (49) arguments -> . argument
    (50) arguments -> . arguments DOT argument
    (51) arguments -> . arguments COMMA argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    arguments                      shift and go to state 95
    argument                       shift and go to state 66
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 34

    (82) for_part1 -> FOR . LEFT_PAREN assignment_list SEMICOLON
    (83) for_part1 -> FOR . LEFT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 97


state 35

    (47) print_function -> PRINT .

    LEFT_PAREN      reduce using rule 47 (print_function -> PRINT .)
    STRING          reduce using rule 47 (print_function -> PRINT .)
    ID              reduce using rule 47 (print_function -> PRINT .)
    ARRAY           reduce using rule 47 (print_function -> PRINT .)
    LEFT_BRACKET    reduce using rule 47 (print_function -> PRINT .)
    FUNCTION        reduce using rule 47 (print_function -> PRINT .)
    FGETS           reduce using rule 47 (print_function -> PRINT .)
    NEW             reduce using rule 47 (print_function -> PRINT .)
    NAME            reduce using rule 47 (print_function -> PRINT .)
    INTEGER         reduce using rule 47 (print_function -> PRINT .)
    FLOAT           reduce using rule 47 (print_function -> PRINT .)
    TRUE            reduce using rule 47 (print_function -> PRINT .)
    FALSE           reduce using rule 47 (print_function -> PRINT .)
    LOGICAL_NOT     reduce using rule 47 (print_function -> PRINT .)


state 36

    (48) print_function -> ECHO .

    LEFT_PAREN      reduce using rule 48 (print_function -> ECHO .)
    STRING          reduce using rule 48 (print_function -> ECHO .)
    ID              reduce using rule 48 (print_function -> ECHO .)
    ARRAY           reduce using rule 48 (print_function -> ECHO .)
    LEFT_BRACKET    reduce using rule 48 (print_function -> ECHO .)
    FUNCTION        reduce using rule 48 (print_function -> ECHO .)
    FGETS           reduce using rule 48 (print_function -> ECHO .)
    NEW             reduce using rule 48 (print_function -> ECHO .)
    NAME            reduce using rule 48 (print_function -> ECHO .)
    INTEGER         reduce using rule 48 (print_function -> ECHO .)
    FLOAT           reduce using rule 48 (print_function -> ECHO .)
    TRUE            reduce using rule 48 (print_function -> ECHO .)
    FALSE           reduce using rule 48 (print_function -> ECHO .)
    LOGICAL_NOT     reduce using rule 48 (print_function -> ECHO .)


state 37

    (34) variable -> ID .
    (35) variable -> ID . CALL NAME

  ! shift/reduce conflict for CALL resolved as shift
    PLUS_PLUS       reduce using rule 34 (variable -> ID .)
    MINUS_MINUS     reduce using rule 34 (variable -> ID .)
    EQUALS          reduce using rule 34 (variable -> ID .)
    PLUS_EQUALS     reduce using rule 34 (variable -> ID .)
    MINUS_EQUALS    reduce using rule 34 (variable -> ID .)
    TIMES_EQUALS    reduce using rule 34 (variable -> ID .)
    DIVIDE_EQUALS   reduce using rule 34 (variable -> ID .)
    MOD_EQUALS      reduce using rule 34 (variable -> ID .)
    LEFT_PAREN      reduce using rule 34 (variable -> ID .)
    SEMICOLON       reduce using rule 34 (variable -> ID .)
    LOGICAL_AND     reduce using rule 34 (variable -> ID .)
    LOGICAL_OR      reduce using rule 34 (variable -> ID .)
    LOGICAL_XOR     reduce using rule 34 (variable -> ID .)
    TIMES           reduce using rule 34 (variable -> ID .)
    DIVIDE          reduce using rule 34 (variable -> ID .)
    PLUS            reduce using rule 34 (variable -> ID .)
    MINUS           reduce using rule 34 (variable -> ID .)
    EQUAL_TO        reduce using rule 34 (variable -> ID .)
    NOT_EQUAL_TO    reduce using rule 34 (variable -> ID .)
    LESS_THAN       reduce using rule 34 (variable -> ID .)
    GREATER_THAN    reduce using rule 34 (variable -> ID .)
    LESS_EQUAL      reduce using rule 34 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 34 (variable -> ID .)
    IDENTICAL_TO    reduce using rule 34 (variable -> ID .)
    NOT_IDENTICAL_TO reduce using rule 34 (variable -> ID .)
    DIFFERENT       reduce using rule 34 (variable -> ID .)
    LEFT_BRACKET    reduce using rule 34 (variable -> ID .)
    DOT             reduce using rule 34 (variable -> ID .)
    COMMA           reduce using rule 34 (variable -> ID .)
    RIGHT_PAREN     reduce using rule 34 (variable -> ID .)
    RIGHT_BRACKET   reduce using rule 34 (variable -> ID .)
    CALL            shift and go to state 98

  ! CALL            [ reduce using rule 34 (variable -> ID .) ]


state 38

    (1) program -> OPEN_TAG statements CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG statements CLOSE_TAG .)


state 39

    (3) statements -> statements statement2 .

    CLOSE_TAG       reduce using rule 3 (statements -> statements statement2 .)
    ONE_LINE_COMMENT reduce using rule 3 (statements -> statements statement2 .)
    MULTI_LINE_COMMENT reduce using rule 3 (statements -> statements statement2 .)
    BREAK           reduce using rule 3 (statements -> statements statement2 .)
    CONTINUE        reduce using rule 3 (statements -> statements statement2 .)
    IF              reduce using rule 3 (statements -> statements statement2 .)
    WHILE           reduce using rule 3 (statements -> statements statement2 .)
    FUNCTION        reduce using rule 3 (statements -> statements statement2 .)
    CLASS           reduce using rule 3 (statements -> statements statement2 .)
    FSCANF          reduce using rule 3 (statements -> statements statement2 .)
    FGETS           reduce using rule 3 (statements -> statements statement2 .)
    RETURN          reduce using rule 3 (statements -> statements statement2 .)
    FOR             reduce using rule 3 (statements -> statements statement2 .)
    PRINT           reduce using rule 3 (statements -> statements statement2 .)
    ECHO            reduce using rule 3 (statements -> statements statement2 .)
    ID              reduce using rule 3 (statements -> statements statement2 .)
    NAME            reduce using rule 3 (statements -> statements statement2 .)
    RIGHT_BRACE     reduce using rule 3 (statements -> statements statement2 .)


state 40

    (4) statement2 -> statement SEMICOLON .

    CLOSE_TAG       reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 4 (statement2 -> statement SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 4 (statement2 -> statement SEMICOLON .)
    BREAK           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    CONTINUE        reduce using rule 4 (statement2 -> statement SEMICOLON .)
    IF              reduce using rule 4 (statement2 -> statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FUNCTION        reduce using rule 4 (statement2 -> statement SEMICOLON .)
    CLASS           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FSCANF          reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FGETS           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FOR             reduce using rule 4 (statement2 -> statement SEMICOLON .)
    PRINT           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ECHO            reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ID              reduce using rule 4 (statement2 -> statement SEMICOLON .)
    NAME            reduce using rule 4 (statement2 -> statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (statement2 -> statement SEMICOLON .)


state 41

    (73) if_statement -> IF parenthesized_condition . block
    (74) if_statement -> IF parenthesized_condition . block else_if_extended
    (75) if_statement -> IF parenthesized_condition . block else_if_extended if_part3
    (76) if_statement -> IF parenthesized_condition . block if_part3
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 99

state 42

    (106) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    ID              shift and go to state 37
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61

    condition                      shift and go to state 101
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54
    expression                     shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59

state 43

    (81) while_statement -> WHILE parenthesized_condition . block
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 102

state 44

    (84) for_statement -> for_part1 condition . for_part3
    (105) complex_condition -> condition . logical_operator condition
    (71) factor -> condition .
    (86) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (87) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (117) logical_operator -> . LOGICAL_AND
    (118) logical_operator -> . LOGICAL_OR
    (119) logical_operator -> . LOGICAL_XOR

    TIMES           reduce using rule 71 (factor -> condition .)
    DIVIDE          reduce using rule 71 (factor -> condition .)
    PLUS            reduce using rule 71 (factor -> condition .)
    MINUS           reduce using rule 71 (factor -> condition .)
    EQUAL_TO        reduce using rule 71 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 71 (factor -> condition .)
    LESS_THAN       reduce using rule 71 (factor -> condition .)
    GREATER_THAN    reduce using rule 71 (factor -> condition .)
    LESS_EQUAL      reduce using rule 71 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 71 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 71 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 71 (factor -> condition .)
    DIFFERENT       reduce using rule 71 (factor -> condition .)
    SEMICOLON       shift and go to state 50
    LOGICAL_AND     shift and go to state 105
    LOGICAL_OR      shift and go to state 106
    LOGICAL_XOR     shift and go to state 107

    for_part3                      shift and go to state 103
    logical_operator               shift and go to state 104

state 45

    (85) for_statement -> for_part1 for_part3 .

    CLOSE_TAG       reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    ONE_LINE_COMMENT reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    BREAK           reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    CONTINUE        reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    IF              reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    WHILE           reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    FUNCTION        reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    CLASS           reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    FSCANF          reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    FGETS           reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    RETURN          reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    FOR             reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    PRINT           reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    ECHO            reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    ID              reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    NAME            reduce using rule 85 (for_statement -> for_part1 for_part3 .)
    RIGHT_BRACE     reduce using rule 85 (for_statement -> for_part1 for_part3 .)


state 46

    (96) condition -> simple_condition .

    SEMICOLON       reduce using rule 96 (condition -> simple_condition .)
    LOGICAL_AND     reduce using rule 96 (condition -> simple_condition .)
    LOGICAL_OR      reduce using rule 96 (condition -> simple_condition .)
    LOGICAL_XOR     reduce using rule 96 (condition -> simple_condition .)
    TIMES           reduce using rule 96 (condition -> simple_condition .)
    DIVIDE          reduce using rule 96 (condition -> simple_condition .)
    PLUS            reduce using rule 96 (condition -> simple_condition .)
    MINUS           reduce using rule 96 (condition -> simple_condition .)
    EQUAL_TO        reduce using rule 96 (condition -> simple_condition .)
    NOT_EQUAL_TO    reduce using rule 96 (condition -> simple_condition .)
    LESS_THAN       reduce using rule 96 (condition -> simple_condition .)
    GREATER_THAN    reduce using rule 96 (condition -> simple_condition .)
    LESS_EQUAL      reduce using rule 96 (condition -> simple_condition .)
    GREATER_EQUAL   reduce using rule 96 (condition -> simple_condition .)
    IDENTICAL_TO    reduce using rule 96 (condition -> simple_condition .)
    NOT_IDENTICAL_TO reduce using rule 96 (condition -> simple_condition .)
    DIFFERENT       reduce using rule 96 (condition -> simple_condition .)
    DOT             reduce using rule 96 (condition -> simple_condition .)
    COMMA           reduce using rule 96 (condition -> simple_condition .)
    RIGHT_PAREN     reduce using rule 96 (condition -> simple_condition .)
    RIGHT_BRACKET   reduce using rule 96 (condition -> simple_condition .)


state 47

    (97) condition -> negated_condition .

    SEMICOLON       reduce using rule 97 (condition -> negated_condition .)
    LOGICAL_AND     reduce using rule 97 (condition -> negated_condition .)
    LOGICAL_OR      reduce using rule 97 (condition -> negated_condition .)
    LOGICAL_XOR     reduce using rule 97 (condition -> negated_condition .)
    TIMES           reduce using rule 97 (condition -> negated_condition .)
    DIVIDE          reduce using rule 97 (condition -> negated_condition .)
    PLUS            reduce using rule 97 (condition -> negated_condition .)
    MINUS           reduce using rule 97 (condition -> negated_condition .)
    EQUAL_TO        reduce using rule 97 (condition -> negated_condition .)
    NOT_EQUAL_TO    reduce using rule 97 (condition -> negated_condition .)
    LESS_THAN       reduce using rule 97 (condition -> negated_condition .)
    GREATER_THAN    reduce using rule 97 (condition -> negated_condition .)
    LESS_EQUAL      reduce using rule 97 (condition -> negated_condition .)
    GREATER_EQUAL   reduce using rule 97 (condition -> negated_condition .)
    IDENTICAL_TO    reduce using rule 97 (condition -> negated_condition .)
    NOT_IDENTICAL_TO reduce using rule 97 (condition -> negated_condition .)
    DIFFERENT       reduce using rule 97 (condition -> negated_condition .)
    DOT             reduce using rule 97 (condition -> negated_condition .)
    COMMA           reduce using rule 97 (condition -> negated_condition .)
    RIGHT_PAREN     reduce using rule 97 (condition -> negated_condition .)
    RIGHT_BRACKET   reduce using rule 97 (condition -> negated_condition .)


state 48

    (98) condition -> complex_condition .

    SEMICOLON       reduce using rule 98 (condition -> complex_condition .)
    LOGICAL_AND     reduce using rule 98 (condition -> complex_condition .)
    LOGICAL_OR      reduce using rule 98 (condition -> complex_condition .)
    LOGICAL_XOR     reduce using rule 98 (condition -> complex_condition .)
    TIMES           reduce using rule 98 (condition -> complex_condition .)
    DIVIDE          reduce using rule 98 (condition -> complex_condition .)
    PLUS            reduce using rule 98 (condition -> complex_condition .)
    MINUS           reduce using rule 98 (condition -> complex_condition .)
    EQUAL_TO        reduce using rule 98 (condition -> complex_condition .)
    NOT_EQUAL_TO    reduce using rule 98 (condition -> complex_condition .)
    LESS_THAN       reduce using rule 98 (condition -> complex_condition .)
    GREATER_THAN    reduce using rule 98 (condition -> complex_condition .)
    LESS_EQUAL      reduce using rule 98 (condition -> complex_condition .)
    GREATER_EQUAL   reduce using rule 98 (condition -> complex_condition .)
    IDENTICAL_TO    reduce using rule 98 (condition -> complex_condition .)
    NOT_IDENTICAL_TO reduce using rule 98 (condition -> complex_condition .)
    DIFFERENT       reduce using rule 98 (condition -> complex_condition .)
    DOT             reduce using rule 98 (condition -> complex_condition .)
    COMMA           reduce using rule 98 (condition -> complex_condition .)
    RIGHT_PAREN     reduce using rule 98 (condition -> complex_condition .)
    RIGHT_BRACKET   reduce using rule 98 (condition -> complex_condition .)


state 49

    (99) condition -> parenthesized_condition .

    SEMICOLON       reduce using rule 99 (condition -> parenthesized_condition .)
    LOGICAL_AND     reduce using rule 99 (condition -> parenthesized_condition .)
    LOGICAL_OR      reduce using rule 99 (condition -> parenthesized_condition .)
    LOGICAL_XOR     reduce using rule 99 (condition -> parenthesized_condition .)
    TIMES           reduce using rule 99 (condition -> parenthesized_condition .)
    DIVIDE          reduce using rule 99 (condition -> parenthesized_condition .)
    PLUS            reduce using rule 99 (condition -> parenthesized_condition .)
    MINUS           reduce using rule 99 (condition -> parenthesized_condition .)
    EQUAL_TO        reduce using rule 99 (condition -> parenthesized_condition .)
    NOT_EQUAL_TO    reduce using rule 99 (condition -> parenthesized_condition .)
    LESS_THAN       reduce using rule 99 (condition -> parenthesized_condition .)
    GREATER_THAN    reduce using rule 99 (condition -> parenthesized_condition .)
    LESS_EQUAL      reduce using rule 99 (condition -> parenthesized_condition .)
    GREATER_EQUAL   reduce using rule 99 (condition -> parenthesized_condition .)
    IDENTICAL_TO    reduce using rule 99 (condition -> parenthesized_condition .)
    NOT_IDENTICAL_TO reduce using rule 99 (condition -> parenthesized_condition .)
    DIFFERENT       reduce using rule 99 (condition -> parenthesized_condition .)
    DOT             reduce using rule 99 (condition -> parenthesized_condition .)
    COMMA           reduce using rule 99 (condition -> parenthesized_condition .)
    RIGHT_PAREN     reduce using rule 99 (condition -> parenthesized_condition .)
    RIGHT_BRACKET   reduce using rule 99 (condition -> parenthesized_condition .)


state 50

    (86) for_part3 -> SEMICOLON . statement_list RIGHT_PAREN for_part4
    (87) for_part3 -> SEMICOLON . RIGHT_PAREN for_part4
    (92) statement_list -> . statement
    (93) statement_list -> . statement_list COMMA statement
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (19) statement -> . function_call
    (20) statement -> . return_statement
    (45) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (46) print_statement -> . print_function arguments
    (31) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (123) array_declaration_statement -> . variable EQUALS array
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (25) return_statement -> . RETURN arguments
    (47) print_function -> . PRINT
    (48) print_function -> . ECHO
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (28) function_name -> . NAME
    (29) function_name -> . variable

    RIGHT_PAREN     shift and go to state 109
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FSCANF          shift and go to state 29
    FGETS           shift and go to state 30
    RETURN          shift and go to state 33
    PRINT           shift and go to state 35
    ECHO            shift and go to state 36
    ID              shift and go to state 37
    NAME            shift and go to state 26

    statement_list                 shift and go to state 108
    statement                      shift and go to state 110
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    function_call                  shift and go to state 20
    return_statement               shift and go to state 21
    print_function                 shift and go to state 28
    variable                       shift and go to state 31
    function_name                  shift and go to state 32

state 51

    (100) simple_condition -> TRUE .

    SEMICOLON       reduce using rule 100 (simple_condition -> TRUE .)
    LOGICAL_AND     reduce using rule 100 (simple_condition -> TRUE .)
    LOGICAL_OR      reduce using rule 100 (simple_condition -> TRUE .)
    LOGICAL_XOR     reduce using rule 100 (simple_condition -> TRUE .)
    TIMES           reduce using rule 100 (simple_condition -> TRUE .)
    DIVIDE          reduce using rule 100 (simple_condition -> TRUE .)
    PLUS            reduce using rule 100 (simple_condition -> TRUE .)
    MINUS           reduce using rule 100 (simple_condition -> TRUE .)
    EQUAL_TO        reduce using rule 100 (simple_condition -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 100 (simple_condition -> TRUE .)
    LESS_THAN       reduce using rule 100 (simple_condition -> TRUE .)
    GREATER_THAN    reduce using rule 100 (simple_condition -> TRUE .)
    LESS_EQUAL      reduce using rule 100 (simple_condition -> TRUE .)
    GREATER_EQUAL   reduce using rule 100 (simple_condition -> TRUE .)
    IDENTICAL_TO    reduce using rule 100 (simple_condition -> TRUE .)
    NOT_IDENTICAL_TO reduce using rule 100 (simple_condition -> TRUE .)
    DIFFERENT       reduce using rule 100 (simple_condition -> TRUE .)
    DOT             reduce using rule 100 (simple_condition -> TRUE .)
    COMMA           reduce using rule 100 (simple_condition -> TRUE .)
    RIGHT_PAREN     reduce using rule 100 (simple_condition -> TRUE .)
    RIGHT_BRACKET   reduce using rule 100 (simple_condition -> TRUE .)


state 52

    (101) simple_condition -> FALSE .

    SEMICOLON       reduce using rule 101 (simple_condition -> FALSE .)
    LOGICAL_AND     reduce using rule 101 (simple_condition -> FALSE .)
    LOGICAL_OR      reduce using rule 101 (simple_condition -> FALSE .)
    LOGICAL_XOR     reduce using rule 101 (simple_condition -> FALSE .)
    TIMES           reduce using rule 101 (simple_condition -> FALSE .)
    DIVIDE          reduce using rule 101 (simple_condition -> FALSE .)
    PLUS            reduce using rule 101 (simple_condition -> FALSE .)
    MINUS           reduce using rule 101 (simple_condition -> FALSE .)
    EQUAL_TO        reduce using rule 101 (simple_condition -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 101 (simple_condition -> FALSE .)
    LESS_THAN       reduce using rule 101 (simple_condition -> FALSE .)
    GREATER_THAN    reduce using rule 101 (simple_condition -> FALSE .)
    LESS_EQUAL      reduce using rule 101 (simple_condition -> FALSE .)
    GREATER_EQUAL   reduce using rule 101 (simple_condition -> FALSE .)
    IDENTICAL_TO    reduce using rule 101 (simple_condition -> FALSE .)
    NOT_IDENTICAL_TO reduce using rule 101 (simple_condition -> FALSE .)
    DIFFERENT       reduce using rule 101 (simple_condition -> FALSE .)
    DOT             reduce using rule 101 (simple_condition -> FALSE .)
    COMMA           reduce using rule 101 (simple_condition -> FALSE .)
    RIGHT_PAREN     reduce using rule 101 (simple_condition -> FALSE .)
    RIGHT_BRACKET   reduce using rule 101 (simple_condition -> FALSE .)


state 53

    (102) simple_condition -> variable .

    SEMICOLON       reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_AND     reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 102 (simple_condition -> variable .)
    TIMES           reduce using rule 102 (simple_condition -> variable .)
    DIVIDE          reduce using rule 102 (simple_condition -> variable .)
    PLUS            reduce using rule 102 (simple_condition -> variable .)
    MINUS           reduce using rule 102 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 102 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 102 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 102 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 102 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 102 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 102 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 102 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 102 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 102 (simple_condition -> variable .)
    RIGHT_PAREN     reduce using rule 102 (simple_condition -> variable .)
    DOT             reduce using rule 102 (simple_condition -> variable .)
    COMMA           reduce using rule 102 (simple_condition -> variable .)
    RIGHT_BRACKET   reduce using rule 102 (simple_condition -> variable .)


state 54

    (103) simple_condition -> relational_expression .

    SEMICOLON       reduce using rule 103 (simple_condition -> relational_expression .)
    LOGICAL_AND     reduce using rule 103 (simple_condition -> relational_expression .)
    LOGICAL_OR      reduce using rule 103 (simple_condition -> relational_expression .)
    LOGICAL_XOR     reduce using rule 103 (simple_condition -> relational_expression .)
    TIMES           reduce using rule 103 (simple_condition -> relational_expression .)
    DIVIDE          reduce using rule 103 (simple_condition -> relational_expression .)
    PLUS            reduce using rule 103 (simple_condition -> relational_expression .)
    MINUS           reduce using rule 103 (simple_condition -> relational_expression .)
    EQUAL_TO        reduce using rule 103 (simple_condition -> relational_expression .)
    NOT_EQUAL_TO    reduce using rule 103 (simple_condition -> relational_expression .)
    LESS_THAN       reduce using rule 103 (simple_condition -> relational_expression .)
    GREATER_THAN    reduce using rule 103 (simple_condition -> relational_expression .)
    LESS_EQUAL      reduce using rule 103 (simple_condition -> relational_expression .)
    GREATER_EQUAL   reduce using rule 103 (simple_condition -> relational_expression .)
    IDENTICAL_TO    reduce using rule 103 (simple_condition -> relational_expression .)
    NOT_IDENTICAL_TO reduce using rule 103 (simple_condition -> relational_expression .)
    DIFFERENT       reduce using rule 103 (simple_condition -> relational_expression .)
    DOT             reduce using rule 103 (simple_condition -> relational_expression .)
    COMMA           reduce using rule 103 (simple_condition -> relational_expression .)
    RIGHT_PAREN     reduce using rule 103 (simple_condition -> relational_expression .)
    RIGHT_BRACKET   reduce using rule 103 (simple_condition -> relational_expression .)


state 55

    (104) negated_condition -> LOGICAL_NOT . condition
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    ID              shift and go to state 37
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61

    condition                      shift and go to state 111
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54
    expression                     shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59

state 56

    (106) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    ID              shift and go to state 37
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61

    condition                      shift and go to state 101
    expression                     shift and go to state 112
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    term                           shift and go to state 58
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54
    factor                         shift and go to state 59

state 57

    (107) relational_expression -> expression . relational_operator expression
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (108) relational_operator -> . EQUAL_TO
    (109) relational_operator -> . NOT_EQUAL_TO
    (110) relational_operator -> . LESS_THAN
    (111) relational_operator -> . GREATER_THAN
    (112) relational_operator -> . LESS_EQUAL
    (113) relational_operator -> . GREATER_EQUAL
    (114) relational_operator -> . IDENTICAL_TO
    (115) relational_operator -> . NOT_IDENTICAL_TO
    (116) relational_operator -> . DIFFERENT

    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    EQUAL_TO        shift and go to state 116
    NOT_EQUAL_TO    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_EQUAL      shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    IDENTICAL_TO    shift and go to state 122
    NOT_IDENTICAL_TO shift and go to state 123
    DIFFERENT       shift and go to state 124

    relational_operator            shift and go to state 113

state 58

    (65) expression -> term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 65 (expression -> term .)
    MINUS           reduce using rule 65 (expression -> term .)
    EQUAL_TO        reduce using rule 65 (expression -> term .)
    NOT_EQUAL_TO    reduce using rule 65 (expression -> term .)
    LESS_THAN       reduce using rule 65 (expression -> term .)
    GREATER_THAN    reduce using rule 65 (expression -> term .)
    LESS_EQUAL      reduce using rule 65 (expression -> term .)
    GREATER_EQUAL   reduce using rule 65 (expression -> term .)
    IDENTICAL_TO    reduce using rule 65 (expression -> term .)
    NOT_IDENTICAL_TO reduce using rule 65 (expression -> term .)
    DIFFERENT       reduce using rule 65 (expression -> term .)
    DOT             reduce using rule 65 (expression -> term .)
    COMMA           reduce using rule 65 (expression -> term .)
    SEMICOLON       reduce using rule 65 (expression -> term .)
    RIGHT_PAREN     reduce using rule 65 (expression -> term .)
    RIGHT_BRACKET   reduce using rule 65 (expression -> term .)
    LOGICAL_AND     reduce using rule 65 (expression -> term .)
    LOGICAL_OR      reduce using rule 65 (expression -> term .)
    LOGICAL_XOR     reduce using rule 65 (expression -> term .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 126

  ! TIMES           [ reduce using rule 65 (expression -> term .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> term .) ]


state 59

    (68) term -> factor .

    TIMES           reduce using rule 68 (term -> factor .)
    DIVIDE          reduce using rule 68 (term -> factor .)
    PLUS            reduce using rule 68 (term -> factor .)
    MINUS           reduce using rule 68 (term -> factor .)
    EQUAL_TO        reduce using rule 68 (term -> factor .)
    NOT_EQUAL_TO    reduce using rule 68 (term -> factor .)
    LESS_THAN       reduce using rule 68 (term -> factor .)
    GREATER_THAN    reduce using rule 68 (term -> factor .)
    LESS_EQUAL      reduce using rule 68 (term -> factor .)
    GREATER_EQUAL   reduce using rule 68 (term -> factor .)
    IDENTICAL_TO    reduce using rule 68 (term -> factor .)
    NOT_IDENTICAL_TO reduce using rule 68 (term -> factor .)
    DIFFERENT       reduce using rule 68 (term -> factor .)
    DOT             reduce using rule 68 (term -> factor .)
    COMMA           reduce using rule 68 (term -> factor .)
    SEMICOLON       reduce using rule 68 (term -> factor .)
    RIGHT_PAREN     reduce using rule 68 (term -> factor .)
    RIGHT_BRACKET   reduce using rule 68 (term -> factor .)
    LOGICAL_AND     reduce using rule 68 (term -> factor .)
    LOGICAL_OR      reduce using rule 68 (term -> factor .)
    LOGICAL_XOR     reduce using rule 68 (term -> factor .)


state 60

    (69) factor -> INTEGER .

    TIMES           reduce using rule 69 (factor -> INTEGER .)
    DIVIDE          reduce using rule 69 (factor -> INTEGER .)
    PLUS            reduce using rule 69 (factor -> INTEGER .)
    MINUS           reduce using rule 69 (factor -> INTEGER .)
    EQUAL_TO        reduce using rule 69 (factor -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 69 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 69 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 69 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 69 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 69 (factor -> INTEGER .)
    IDENTICAL_TO    reduce using rule 69 (factor -> INTEGER .)
    NOT_IDENTICAL_TO reduce using rule 69 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 69 (factor -> INTEGER .)
    DOT             reduce using rule 69 (factor -> INTEGER .)
    COMMA           reduce using rule 69 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 69 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 69 (factor -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 69 (factor -> INTEGER .)
    LOGICAL_AND     reduce using rule 69 (factor -> INTEGER .)
    LOGICAL_OR      reduce using rule 69 (factor -> INTEGER .)
    LOGICAL_XOR     reduce using rule 69 (factor -> INTEGER .)


state 61

    (70) factor -> FLOAT .

    TIMES           reduce using rule 70 (factor -> FLOAT .)
    DIVIDE          reduce using rule 70 (factor -> FLOAT .)
    PLUS            reduce using rule 70 (factor -> FLOAT .)
    MINUS           reduce using rule 70 (factor -> FLOAT .)
    EQUAL_TO        reduce using rule 70 (factor -> FLOAT .)
    NOT_EQUAL_TO    reduce using rule 70 (factor -> FLOAT .)
    LESS_THAN       reduce using rule 70 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 70 (factor -> FLOAT .)
    LESS_EQUAL      reduce using rule 70 (factor -> FLOAT .)
    GREATER_EQUAL   reduce using rule 70 (factor -> FLOAT .)
    IDENTICAL_TO    reduce using rule 70 (factor -> FLOAT .)
    NOT_IDENTICAL_TO reduce using rule 70 (factor -> FLOAT .)
    DIFFERENT       reduce using rule 70 (factor -> FLOAT .)
    DOT             reduce using rule 70 (factor -> FLOAT .)
    COMMA           reduce using rule 70 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 70 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 70 (factor -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 70 (factor -> FLOAT .)
    LOGICAL_AND     reduce using rule 70 (factor -> FLOAT .)
    LOGICAL_OR      reduce using rule 70 (factor -> FLOAT .)
    LOGICAL_XOR     reduce using rule 70 (factor -> FLOAT .)


state 62

    (21) function_statement -> FUNCTION NAME . LEFT_PAREN array_elements RIGHT_PAREN block
    (22) function_statement -> FUNCTION NAME . LEFT_PAREN RIGHT_PAREN block

    LEFT_PAREN      shift and go to state 127


state 63

    (133) class_declaration -> CLASS NAME . LEFT_BRACE class_statements RIGHT_BRACE
    (134) class_declaration -> CLASS NAME . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 128


state 64

    (45) print_statement -> print_function LEFT_PAREN . arguments RIGHT_PAREN
    (120) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (106) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (49) arguments -> . argument
    (50) arguments -> . arguments DOT argument
    (51) arguments -> . arguments COMMA argument
    (121) casting_type -> . INT_TYPE
    (122) casting_type -> . FLOAT_TYPE
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression
    (28) function_name -> . NAME
    (29) function_name -> . variable

    INT_TYPE        shift and go to state 133
    FLOAT_TYPE      shift and go to state 134
    STRING          shift and go to state 67
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 129
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    NEW             shift and go to state 81
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    NAME            shift and go to state 26

    arguments                      shift and go to state 130
    casting_type                   shift and go to state 131
    expression                     shift and go to state 132
    condition                      shift and go to state 101
    argument                       shift and go to state 66
    term                           shift and go to state 58
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 135
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    factor                         shift and go to state 59
    relational_expression          shift and go to state 54
    function_name                  shift and go to state 32

state 65

    (46) print_statement -> print_function arguments .
    (50) arguments -> arguments . DOT argument
    (51) arguments -> arguments . COMMA argument

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 46 (print_statement -> print_function arguments .)
    RIGHT_PAREN     reduce using rule 46 (print_statement -> print_function arguments .)
    DOT             shift and go to state 136
    COMMA           shift and go to state 137

  ! COMMA           [ reduce using rule 46 (print_statement -> print_function arguments .) ]


state 66

    (49) arguments -> argument .

    DOT             reduce using rule 49 (arguments -> argument .)
    COMMA           reduce using rule 49 (arguments -> argument .)
    SEMICOLON       reduce using rule 49 (arguments -> argument .)
    RIGHT_PAREN     reduce using rule 49 (arguments -> argument .)


state 67

    (52) argument -> STRING .

    DOT             reduce using rule 52 (argument -> STRING .)
    COMMA           reduce using rule 52 (argument -> STRING .)
    SEMICOLON       reduce using rule 52 (argument -> STRING .)
    RIGHT_PAREN     reduce using rule 52 (argument -> STRING .)
    RIGHT_BRACKET   reduce using rule 52 (argument -> STRING .)


state 68

    (53) argument -> expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (107) relational_expression -> expression . relational_operator expression
    (108) relational_operator -> . EQUAL_TO
    (109) relational_operator -> . NOT_EQUAL_TO
    (110) relational_operator -> . LESS_THAN
    (111) relational_operator -> . GREATER_THAN
    (112) relational_operator -> . LESS_EQUAL
    (113) relational_operator -> . GREATER_EQUAL
    (114) relational_operator -> . IDENTICAL_TO
    (115) relational_operator -> . NOT_IDENTICAL_TO
    (116) relational_operator -> . DIFFERENT

    DOT             reduce using rule 53 (argument -> expression .)
    COMMA           reduce using rule 53 (argument -> expression .)
    SEMICOLON       reduce using rule 53 (argument -> expression .)
    RIGHT_PAREN     reduce using rule 53 (argument -> expression .)
    RIGHT_BRACKET   reduce using rule 53 (argument -> expression .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    EQUAL_TO        shift and go to state 116
    NOT_EQUAL_TO    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_EQUAL      shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    IDENTICAL_TO    shift and go to state 122
    NOT_IDENTICAL_TO shift and go to state 123
    DIFFERENT       shift and go to state 124

    relational_operator            shift and go to state 113

state 69

    (54) argument -> assignment_statement .

    DOT             reduce using rule 54 (argument -> assignment_statement .)
    COMMA           reduce using rule 54 (argument -> assignment_statement .)
    SEMICOLON       reduce using rule 54 (argument -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 54 (argument -> assignment_statement .)
    RIGHT_BRACKET   reduce using rule 54 (argument -> assignment_statement .)


state 70

    (55) argument -> variable . CALL function_call
    (36) assignment_statement -> variable . assignment_operator argument
    (37) assignment_statement -> variable . PLUS_PLUS
    (38) assignment_statement -> variable . MINUS_MINUS
    (132) array_indexing -> variable . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (29) function_name -> variable .
    (102) simple_condition -> variable .
    (39) assignment_operator -> . EQUALS
    (40) assignment_operator -> . PLUS_EQUALS
    (41) assignment_operator -> . MINUS_EQUALS
    (42) assignment_operator -> . TIMES_EQUALS
    (43) assignment_operator -> . DIVIDE_EQUALS
    (44) assignment_operator -> . MOD_EQUALS

    CALL            shift and go to state 138
    PLUS_PLUS       shift and go to state 86
    MINUS_MINUS     shift and go to state 87
    LEFT_BRACKET    shift and go to state 139
    LEFT_PAREN      reduce using rule 29 (function_name -> variable .)
    LOGICAL_AND     reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 102 (simple_condition -> variable .)
    TIMES           reduce using rule 102 (simple_condition -> variable .)
    DIVIDE          reduce using rule 102 (simple_condition -> variable .)
    PLUS            reduce using rule 102 (simple_condition -> variable .)
    MINUS           reduce using rule 102 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 102 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 102 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 102 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 102 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 102 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 102 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 102 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 102 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 102 (simple_condition -> variable .)
    DOT             reduce using rule 102 (simple_condition -> variable .)
    COMMA           reduce using rule 102 (simple_condition -> variable .)
    SEMICOLON       reduce using rule 102 (simple_condition -> variable .)
    RIGHT_PAREN     reduce using rule 102 (simple_condition -> variable .)
    RIGHT_BRACKET   reduce using rule 102 (simple_condition -> variable .)
    EQUALS          shift and go to state 140
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 90
    TIMES_EQUALS    shift and go to state 91
    DIVIDE_EQUALS   shift and go to state 92
    MOD_EQUALS      shift and go to state 93

    assignment_operator            shift and go to state 85

state 71

    (57) argument -> function_call .

    DOT             reduce using rule 57 (argument -> function_call .)
    COMMA           reduce using rule 57 (argument -> function_call .)
    SEMICOLON       reduce using rule 57 (argument -> function_call .)
    RIGHT_PAREN     reduce using rule 57 (argument -> function_call .)
    RIGHT_BRACKET   reduce using rule 57 (argument -> function_call .)


state 72

    (56) argument -> array .

    DOT             reduce using rule 56 (argument -> array .)
    COMMA           reduce using rule 56 (argument -> array .)
    SEMICOLON       reduce using rule 56 (argument -> array .)
    RIGHT_PAREN     reduce using rule 56 (argument -> array .)
    RIGHT_BRACKET   reduce using rule 56 (argument -> array .)


state 73

    (58) argument -> anonymous_function .

    DOT             reduce using rule 58 (argument -> anonymous_function .)
    COMMA           reduce using rule 58 (argument -> anonymous_function .)
    SEMICOLON       reduce using rule 58 (argument -> anonymous_function .)
    RIGHT_PAREN     reduce using rule 58 (argument -> anonymous_function .)
    RIGHT_BRACKET   reduce using rule 58 (argument -> anonymous_function .)


state 74

    (59) argument -> fgets_statement .

    DOT             reduce using rule 59 (argument -> fgets_statement .)
    COMMA           reduce using rule 59 (argument -> fgets_statement .)
    SEMICOLON       reduce using rule 59 (argument -> fgets_statement .)
    RIGHT_PAREN     reduce using rule 59 (argument -> fgets_statement .)
    RIGHT_BRACKET   reduce using rule 59 (argument -> fgets_statement .)


state 75

    (60) argument -> array_indexing .

    DOT             reduce using rule 60 (argument -> array_indexing .)
    COMMA           reduce using rule 60 (argument -> array_indexing .)
    SEMICOLON       reduce using rule 60 (argument -> array_indexing .)
    RIGHT_PAREN     reduce using rule 60 (argument -> array_indexing .)
    RIGHT_BRACKET   reduce using rule 60 (argument -> array_indexing .)


state 76

    (61) argument -> casting . argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    casting                        shift and go to state 76
    argument                       shift and go to state 141
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 77

    (62) argument -> object_creation .

    DOT             reduce using rule 62 (argument -> object_creation .)
    COMMA           reduce using rule 62 (argument -> object_creation .)
    SEMICOLON       reduce using rule 62 (argument -> object_creation .)
    RIGHT_PAREN     reduce using rule 62 (argument -> object_creation .)
    RIGHT_BRACKET   reduce using rule 62 (argument -> object_creation .)


state 78

    (124) array -> ARRAY . LEFT_PAREN array_elements RIGHT_PAREN

    LEFT_PAREN      shift and go to state 142


state 79

    (125) array -> LEFT_BRACKET . array_elements RIGHT_BRACKET
    (126) array_elements -> . array_argument
    (127) array_elements -> . array_elements COMMA array_argument
    (128) array_argument -> . argument
    (129) array_argument -> . clave KEY_VALUE argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (130) clave -> . STRING
    (131) clave -> . INTEGER
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 147
    INTEGER         shift and go to state 148
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    array_elements                 shift and go to state 143
    array_argument                 shift and go to state 144
    argument                       shift and go to state 145
    clave                          shift and go to state 146
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 80

    (23) anonymous_function -> FUNCTION . LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> FUNCTION . LEFT_PAREN RIGHT_PAREN block

    LEFT_PAREN      shift and go to state 149


state 81

    (146) object_creation -> NEW . NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> NEW . NAME LEFT_PAREN arguments RIGHT_PAREN

    NAME            shift and go to state 150


state 82

    (71) factor -> condition .
    (105) complex_condition -> condition . logical_operator condition
    (117) logical_operator -> . LOGICAL_AND
    (118) logical_operator -> . LOGICAL_OR
    (119) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    TIMES           reduce using rule 71 (factor -> condition .)
    DIVIDE          reduce using rule 71 (factor -> condition .)
    PLUS            reduce using rule 71 (factor -> condition .)
    MINUS           reduce using rule 71 (factor -> condition .)
    EQUAL_TO        reduce using rule 71 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 71 (factor -> condition .)
    LESS_THAN       reduce using rule 71 (factor -> condition .)
    GREATER_THAN    reduce using rule 71 (factor -> condition .)
    LESS_EQUAL      reduce using rule 71 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 71 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 71 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 71 (factor -> condition .)
    DIFFERENT       reduce using rule 71 (factor -> condition .)
    DOT             reduce using rule 71 (factor -> condition .)
    COMMA           reduce using rule 71 (factor -> condition .)
    SEMICOLON       reduce using rule 71 (factor -> condition .)
    RIGHT_PAREN     reduce using rule 71 (factor -> condition .)
    RIGHT_BRACKET   reduce using rule 71 (factor -> condition .)
    LOGICAL_AND     shift and go to state 105
    LOGICAL_OR      shift and go to state 106
    LOGICAL_XOR     shift and go to state 107

  ! LOGICAL_AND     [ reduce using rule 71 (factor -> condition .) ]
  ! LOGICAL_OR      [ reduce using rule 71 (factor -> condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 71 (factor -> condition .) ]

    logical_operator               shift and go to state 104

state 83

    (31) fscanf_statement -> FSCANF LEFT_PAREN . STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    STDIN           shift and go to state 151


state 84

    (30) fgets_statement -> FGETS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 152


state 85

    (36) assignment_statement -> variable assignment_operator . argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    variable                       shift and go to state 70
    argument                       shift and go to state 153
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 86

    (37) assignment_statement -> variable PLUS_PLUS .

    SEMICOLON       reduce using rule 37 (assignment_statement -> variable PLUS_PLUS .)
    DOT             reduce using rule 37 (assignment_statement -> variable PLUS_PLUS .)
    COMMA           reduce using rule 37 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_PAREN     reduce using rule 37 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_BRACKET   reduce using rule 37 (assignment_statement -> variable PLUS_PLUS .)


state 87

    (38) assignment_statement -> variable MINUS_MINUS .

    SEMICOLON       reduce using rule 38 (assignment_statement -> variable MINUS_MINUS .)
    DOT             reduce using rule 38 (assignment_statement -> variable MINUS_MINUS .)
    COMMA           reduce using rule 38 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_PAREN     reduce using rule 38 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_BRACKET   reduce using rule 38 (assignment_statement -> variable MINUS_MINUS .)


state 88

    (123) array_declaration_statement -> variable EQUALS . array
    (39) assignment_operator -> EQUALS .
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET

  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    STRING          reduce using rule 39 (assignment_operator -> EQUALS .)
    ID              reduce using rule 39 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 39 (assignment_operator -> EQUALS .)
    FGETS           reduce using rule 39 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 39 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 39 (assignment_operator -> EQUALS .)
    NAME            reduce using rule 39 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 39 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 39 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 39 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 39 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 39 (assignment_operator -> EQUALS .)
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79

  ! ARRAY           [ reduce using rule 39 (assignment_operator -> EQUALS .) ]
  ! LEFT_BRACKET    [ reduce using rule 39 (assignment_operator -> EQUALS .) ]

    array                          shift and go to state 154

state 89

    (40) assignment_operator -> PLUS_EQUALS .

    STRING          reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    ID              reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    FGETS           reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    NAME            reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    INTEGER         reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 40 (assignment_operator -> PLUS_EQUALS .)


state 90

    (41) assignment_operator -> MINUS_EQUALS .

    STRING          reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    ID              reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    ARRAY           reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    FUNCTION        reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    FGETS           reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    LEFT_PAREN      reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    NEW             reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    NAME            reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    INTEGER         reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    FLOAT           reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    TRUE            reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    FALSE           reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 41 (assignment_operator -> MINUS_EQUALS .)


state 91

    (42) assignment_operator -> TIMES_EQUALS .

    STRING          reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    ID              reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    ARRAY           reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    LEFT_BRACKET    reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    FUNCTION        reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    FGETS           reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    LEFT_PAREN      reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    NEW             reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    NAME            reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    INTEGER         reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    FLOAT           reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    TRUE            reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    FALSE           reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)
    LOGICAL_NOT     reduce using rule 42 (assignment_operator -> TIMES_EQUALS .)


state 92

    (43) assignment_operator -> DIVIDE_EQUALS .

    STRING          reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    ID              reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    ARRAY           reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_BRACKET    reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    FUNCTION        reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    FGETS           reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_PAREN      reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    NEW             reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    NAME            reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    INTEGER         reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    FLOAT           reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    TRUE            reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    FALSE           reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)
    LOGICAL_NOT     reduce using rule 43 (assignment_operator -> DIVIDE_EQUALS .)


state 93

    (44) assignment_operator -> MOD_EQUALS .

    STRING          reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    ID              reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    ARRAY           reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    LEFT_BRACKET    reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    FUNCTION        reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    FGETS           reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    LEFT_PAREN      reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    NEW             reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    NAME            reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    INTEGER         reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    FLOAT           reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    TRUE            reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    FALSE           reduce using rule 44 (assignment_operator -> MOD_EQUALS .)
    LOGICAL_NOT     reduce using rule 44 (assignment_operator -> MOD_EQUALS .)


state 94

    (26) function_call -> function_name LEFT_PAREN . arguments RIGHT_PAREN
    (27) function_call -> function_name LEFT_PAREN . RIGHT_PAREN
    (49) arguments -> . argument
    (50) arguments -> . arguments DOT argument
    (51) arguments -> . arguments COMMA argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    RIGHT_PAREN     shift and go to state 156
    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    function_name                  shift and go to state 32
    arguments                      shift and go to state 155
    argument                       shift and go to state 66
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 95

    (25) return_statement -> RETURN arguments .
    (50) arguments -> arguments . DOT argument
    (51) arguments -> arguments . COMMA argument

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 25 (return_statement -> RETURN arguments .)
    RIGHT_PAREN     reduce using rule 25 (return_statement -> RETURN arguments .)
    DOT             shift and go to state 136
    COMMA           shift and go to state 137

  ! COMMA           [ reduce using rule 25 (return_statement -> RETURN arguments .) ]


state 96

    (120) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (106) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (121) casting_type -> . INT_TYPE
    (122) casting_type -> . FLOAT_TYPE
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression

    INT_TYPE        shift and go to state 133
    FLOAT_TYPE      shift and go to state 134
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    ID              shift and go to state 37

    casting_type                   shift and go to state 131
    expression                     shift and go to state 112
    condition                      shift and go to state 101
    term                           shift and go to state 58
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    factor                         shift and go to state 59
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54

state 97

    (82) for_part1 -> FOR LEFT_PAREN . assignment_list SEMICOLON
    (83) for_part1 -> FOR LEFT_PAREN . SEMICOLON
    (90) assignment_list -> . assignment_statement
    (91) assignment_list -> . assignment_list COMMA assignment_statement
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME

    SEMICOLON       shift and go to state 158
    ID              shift and go to state 37

    assignment_list                shift and go to state 157
    assignment_statement           shift and go to state 159
    variable                       shift and go to state 160

state 98

    (35) variable -> ID CALL . NAME

    NAME            shift and go to state 161


state 99

    (73) if_statement -> IF parenthesized_condition block .
    (74) if_statement -> IF parenthesized_condition block . else_if_extended
    (75) if_statement -> IF parenthesized_condition block . else_if_extended if_part3
    (76) if_statement -> IF parenthesized_condition block . if_part3
    (77) else_if_extended -> . if_part2
    (78) else_if_extended -> . else_if_extended if_part2
    (80) if_part3 -> . ELSE block
    (79) if_part2 -> . ELSEIF parenthesized_condition block

    CLOSE_TAG       reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    BREAK           reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    CONTINUE        reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    IF              reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    WHILE           reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    FUNCTION        reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    CLASS           reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    FSCANF          reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    FGETS           reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    RETURN          reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    FOR             reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    PRINT           reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    ECHO            reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    ID              reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    NAME            reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 73 (if_statement -> IF parenthesized_condition block .)
    ELSE            shift and go to state 165
    ELSEIF          shift and go to state 166

    else_if_extended               shift and go to state 162
    if_part3                       shift and go to state 163
    if_part2                       shift and go to state 164

state 100

    (94) block -> LEFT_BRACE . statements RIGHT_BRACE
    (95) block -> LEFT_BRACE . RIGHT_BRACE
    (2) statements -> . statement2
    (3) statements -> . statements statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement2 -> . class_declaration
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (19) statement -> . function_call
    (20) statement -> . return_statement
    (73) if_statement -> . IF parenthesized_condition block
    (74) if_statement -> . IF parenthesized_condition block else_if_extended
    (75) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (76) if_statement -> . IF parenthesized_condition block if_part3
    (81) while_statement -> . WHILE parenthesized_condition block
    (84) for_statement -> . for_part1 condition for_part3
    (85) for_statement -> . for_part1 for_part3
    (21) function_statement -> . FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block
    (22) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (133) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (134) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (45) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (46) print_statement -> . print_function arguments
    (31) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (123) array_declaration_statement -> . variable EQUALS array
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (25) return_statement -> . RETURN arguments
    (82) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (83) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (47) print_function -> . PRINT
    (48) print_function -> . ECHO
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (28) function_name -> . NAME
    (29) function_name -> . variable

    RIGHT_BRACE     shift and go to state 168
    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FUNCTION        shift and go to state 25
    CLASS           shift and go to state 27
    FSCANF          shift and go to state 29
    FGETS           shift and go to state 30
    RETURN          shift and go to state 33
    FOR             shift and go to state 34
    PRINT           shift and go to state 35
    ECHO            shift and go to state 36
    ID              shift and go to state 37
    NAME            shift and go to state 26

    statements                     shift and go to state 167
    statement2                     shift and go to state 4
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    class_declaration              shift and go to state 12
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    function_call                  shift and go to state 20
    return_statement               shift and go to state 21
    for_part1                      shift and go to state 24
    print_function                 shift and go to state 28
    variable                       shift and go to state 31
    function_name                  shift and go to state 32

state 101

    (106) parenthesized_condition -> LEFT_PAREN condition . RIGHT_PAREN
    (105) complex_condition -> condition . logical_operator condition
    (71) factor -> condition .
    (117) logical_operator -> . LOGICAL_AND
    (118) logical_operator -> . LOGICAL_OR
    (119) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 169
    TIMES           reduce using rule 71 (factor -> condition .)
    DIVIDE          reduce using rule 71 (factor -> condition .)
    PLUS            reduce using rule 71 (factor -> condition .)
    MINUS           reduce using rule 71 (factor -> condition .)
    EQUAL_TO        reduce using rule 71 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 71 (factor -> condition .)
    LESS_THAN       reduce using rule 71 (factor -> condition .)
    GREATER_THAN    reduce using rule 71 (factor -> condition .)
    LESS_EQUAL      reduce using rule 71 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 71 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 71 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 71 (factor -> condition .)
    DIFFERENT       reduce using rule 71 (factor -> condition .)
    DOT             reduce using rule 71 (factor -> condition .)
    COMMA           reduce using rule 71 (factor -> condition .)
    LOGICAL_AND     shift and go to state 105
    LOGICAL_OR      shift and go to state 106
    LOGICAL_XOR     shift and go to state 107

  ! RIGHT_PAREN     [ reduce using rule 71 (factor -> condition .) ]

    logical_operator               shift and go to state 104

state 102

    (81) while_statement -> WHILE parenthesized_condition block .

    CLOSE_TAG       reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    BREAK           reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    CONTINUE        reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    IF              reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    WHILE           reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    FUNCTION        reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    CLASS           reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    FSCANF          reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    FGETS           reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    RETURN          reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    FOR             reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    PRINT           reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    ECHO            reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    ID              reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    NAME            reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 81 (while_statement -> WHILE parenthesized_condition block .)


state 103

    (84) for_statement -> for_part1 condition for_part3 .

    CLOSE_TAG       reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    ONE_LINE_COMMENT reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    BREAK           reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    CONTINUE        reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    IF              reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    WHILE           reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    FUNCTION        reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    CLASS           reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    FSCANF          reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    FGETS           reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    RETURN          reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    FOR             reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    PRINT           reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    ECHO            reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    ID              reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    NAME            reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)
    RIGHT_BRACE     reduce using rule 84 (for_statement -> for_part1 condition for_part3 .)


state 104

    (105) complex_condition -> condition logical_operator . condition
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    ID              shift and go to state 37
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61

    condition                      shift and go to state 170
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54
    expression                     shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59

state 105

    (117) logical_operator -> LOGICAL_AND .

    TRUE            reduce using rule 117 (logical_operator -> LOGICAL_AND .)
    FALSE           reduce using rule 117 (logical_operator -> LOGICAL_AND .)
    LOGICAL_NOT     reduce using rule 117 (logical_operator -> LOGICAL_AND .)
    LEFT_PAREN      reduce using rule 117 (logical_operator -> LOGICAL_AND .)
    ID              reduce using rule 117 (logical_operator -> LOGICAL_AND .)
    INTEGER         reduce using rule 117 (logical_operator -> LOGICAL_AND .)
    FLOAT           reduce using rule 117 (logical_operator -> LOGICAL_AND .)


state 106

    (118) logical_operator -> LOGICAL_OR .

    TRUE            reduce using rule 118 (logical_operator -> LOGICAL_OR .)
    FALSE           reduce using rule 118 (logical_operator -> LOGICAL_OR .)
    LOGICAL_NOT     reduce using rule 118 (logical_operator -> LOGICAL_OR .)
    LEFT_PAREN      reduce using rule 118 (logical_operator -> LOGICAL_OR .)
    ID              reduce using rule 118 (logical_operator -> LOGICAL_OR .)
    INTEGER         reduce using rule 118 (logical_operator -> LOGICAL_OR .)
    FLOAT           reduce using rule 118 (logical_operator -> LOGICAL_OR .)


state 107

    (119) logical_operator -> LOGICAL_XOR .

    TRUE            reduce using rule 119 (logical_operator -> LOGICAL_XOR .)
    FALSE           reduce using rule 119 (logical_operator -> LOGICAL_XOR .)
    LOGICAL_NOT     reduce using rule 119 (logical_operator -> LOGICAL_XOR .)
    LEFT_PAREN      reduce using rule 119 (logical_operator -> LOGICAL_XOR .)
    ID              reduce using rule 119 (logical_operator -> LOGICAL_XOR .)
    INTEGER         reduce using rule 119 (logical_operator -> LOGICAL_XOR .)
    FLOAT           reduce using rule 119 (logical_operator -> LOGICAL_XOR .)


state 108

    (86) for_part3 -> SEMICOLON statement_list . RIGHT_PAREN for_part4
    (93) statement_list -> statement_list . COMMA statement

    RIGHT_PAREN     shift and go to state 171
    COMMA           shift and go to state 172


state 109

    (87) for_part3 -> SEMICOLON RIGHT_PAREN . for_part4
    (88) for_part4 -> . block
    (89) for_part4 -> . SEMICOLON
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 173
    LEFT_BRACE      shift and go to state 100

    for_part4                      shift and go to state 174
    block                          shift and go to state 175

state 110

    (92) statement_list -> statement .

    RIGHT_PAREN     reduce using rule 92 (statement_list -> statement .)
    COMMA           reduce using rule 92 (statement_list -> statement .)


state 111

    (104) negated_condition -> LOGICAL_NOT condition .
    (105) complex_condition -> condition . logical_operator condition
    (71) factor -> condition .
    (117) logical_operator -> . LOGICAL_AND
    (118) logical_operator -> . LOGICAL_OR
    (119) logical_operator -> . LOGICAL_XOR

  ! reduce/reduce conflict for TIMES resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for PLUS resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for MINUS resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 71 (factor -> condition .)
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .)
    DOT             reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .)
    COMMA           reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .)
    RIGHT_PAREN     reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .)
    RIGHT_BRACKET   reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .)
    TIMES           reduce using rule 71 (factor -> condition .)
    DIVIDE          reduce using rule 71 (factor -> condition .)
    PLUS            reduce using rule 71 (factor -> condition .)
    MINUS           reduce using rule 71 (factor -> condition .)
    EQUAL_TO        reduce using rule 71 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 71 (factor -> condition .)
    LESS_THAN       reduce using rule 71 (factor -> condition .)
    GREATER_THAN    reduce using rule 71 (factor -> condition .)
    LESS_EQUAL      reduce using rule 71 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 71 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 71 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 71 (factor -> condition .)
    DIFFERENT       reduce using rule 71 (factor -> condition .)
    LOGICAL_AND     shift and go to state 105
    LOGICAL_OR      shift and go to state 106
    LOGICAL_XOR     shift and go to state 107

  ! LOGICAL_AND     [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_OR      [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! TIMES           [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! DIVIDE          [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! PLUS            [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! MINUS           [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! EQUAL_TO        [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LESS_THAN       [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! GREATER_THAN    [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LESS_EQUAL      [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! GREATER_EQUAL   [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! IDENTICAL_TO    [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]
  ! DIFFERENT       [ reduce using rule 104 (negated_condition -> LOGICAL_NOT condition .) ]

    logical_operator               shift and go to state 104

state 112

    (72) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (107) relational_expression -> expression . relational_operator expression
    (108) relational_operator -> . EQUAL_TO
    (109) relational_operator -> . NOT_EQUAL_TO
    (110) relational_operator -> . LESS_THAN
    (111) relational_operator -> . GREATER_THAN
    (112) relational_operator -> . LESS_EQUAL
    (113) relational_operator -> . GREATER_EQUAL
    (114) relational_operator -> . IDENTICAL_TO
    (115) relational_operator -> . NOT_IDENTICAL_TO
    (116) relational_operator -> . DIFFERENT

    RIGHT_PAREN     shift and go to state 176
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    EQUAL_TO        shift and go to state 116
    NOT_EQUAL_TO    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_EQUAL      shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    IDENTICAL_TO    shift and go to state 122
    NOT_IDENTICAL_TO shift and go to state 123
    DIFFERENT       shift and go to state 124

    relational_operator            shift and go to state 113

state 113

    (107) relational_expression -> expression relational_operator . expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression

    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    LEFT_PAREN      shift and go to state 178
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    ID              shift and go to state 37

    expression                     shift and go to state 177
    term                           shift and go to state 58
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54

state 114

    (63) expression -> expression PLUS . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term

    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    LEFT_PAREN      shift and go to state 178
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    ID              shift and go to state 37

    expression                     shift and go to state 57
    term                           shift and go to state 179
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54

state 115

    (64) expression -> expression MINUS . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term

    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    LEFT_PAREN      shift and go to state 178
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    ID              shift and go to state 37

    expression                     shift and go to state 57
    term                           shift and go to state 180
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54

state 116

    (108) relational_operator -> EQUAL_TO .

    INTEGER         reduce using rule 108 (relational_operator -> EQUAL_TO .)
    FLOAT           reduce using rule 108 (relational_operator -> EQUAL_TO .)
    LEFT_PAREN      reduce using rule 108 (relational_operator -> EQUAL_TO .)
    TRUE            reduce using rule 108 (relational_operator -> EQUAL_TO .)
    FALSE           reduce using rule 108 (relational_operator -> EQUAL_TO .)
    LOGICAL_NOT     reduce using rule 108 (relational_operator -> EQUAL_TO .)
    ID              reduce using rule 108 (relational_operator -> EQUAL_TO .)


state 117

    (109) relational_operator -> NOT_EQUAL_TO .

    INTEGER         reduce using rule 109 (relational_operator -> NOT_EQUAL_TO .)
    FLOAT           reduce using rule 109 (relational_operator -> NOT_EQUAL_TO .)
    LEFT_PAREN      reduce using rule 109 (relational_operator -> NOT_EQUAL_TO .)
    TRUE            reduce using rule 109 (relational_operator -> NOT_EQUAL_TO .)
    FALSE           reduce using rule 109 (relational_operator -> NOT_EQUAL_TO .)
    LOGICAL_NOT     reduce using rule 109 (relational_operator -> NOT_EQUAL_TO .)
    ID              reduce using rule 109 (relational_operator -> NOT_EQUAL_TO .)


state 118

    (110) relational_operator -> LESS_THAN .

    INTEGER         reduce using rule 110 (relational_operator -> LESS_THAN .)
    FLOAT           reduce using rule 110 (relational_operator -> LESS_THAN .)
    LEFT_PAREN      reduce using rule 110 (relational_operator -> LESS_THAN .)
    TRUE            reduce using rule 110 (relational_operator -> LESS_THAN .)
    FALSE           reduce using rule 110 (relational_operator -> LESS_THAN .)
    LOGICAL_NOT     reduce using rule 110 (relational_operator -> LESS_THAN .)
    ID              reduce using rule 110 (relational_operator -> LESS_THAN .)


state 119

    (111) relational_operator -> GREATER_THAN .

    INTEGER         reduce using rule 111 (relational_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 111 (relational_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 111 (relational_operator -> GREATER_THAN .)
    TRUE            reduce using rule 111 (relational_operator -> GREATER_THAN .)
    FALSE           reduce using rule 111 (relational_operator -> GREATER_THAN .)
    LOGICAL_NOT     reduce using rule 111 (relational_operator -> GREATER_THAN .)
    ID              reduce using rule 111 (relational_operator -> GREATER_THAN .)


state 120

    (112) relational_operator -> LESS_EQUAL .

    INTEGER         reduce using rule 112 (relational_operator -> LESS_EQUAL .)
    FLOAT           reduce using rule 112 (relational_operator -> LESS_EQUAL .)
    LEFT_PAREN      reduce using rule 112 (relational_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 112 (relational_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 112 (relational_operator -> LESS_EQUAL .)
    LOGICAL_NOT     reduce using rule 112 (relational_operator -> LESS_EQUAL .)
    ID              reduce using rule 112 (relational_operator -> LESS_EQUAL .)


state 121

    (113) relational_operator -> GREATER_EQUAL .

    INTEGER         reduce using rule 113 (relational_operator -> GREATER_EQUAL .)
    FLOAT           reduce using rule 113 (relational_operator -> GREATER_EQUAL .)
    LEFT_PAREN      reduce using rule 113 (relational_operator -> GREATER_EQUAL .)
    TRUE            reduce using rule 113 (relational_operator -> GREATER_EQUAL .)
    FALSE           reduce using rule 113 (relational_operator -> GREATER_EQUAL .)
    LOGICAL_NOT     reduce using rule 113 (relational_operator -> GREATER_EQUAL .)
    ID              reduce using rule 113 (relational_operator -> GREATER_EQUAL .)


state 122

    (114) relational_operator -> IDENTICAL_TO .

    INTEGER         reduce using rule 114 (relational_operator -> IDENTICAL_TO .)
    FLOAT           reduce using rule 114 (relational_operator -> IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 114 (relational_operator -> IDENTICAL_TO .)
    TRUE            reduce using rule 114 (relational_operator -> IDENTICAL_TO .)
    FALSE           reduce using rule 114 (relational_operator -> IDENTICAL_TO .)
    LOGICAL_NOT     reduce using rule 114 (relational_operator -> IDENTICAL_TO .)
    ID              reduce using rule 114 (relational_operator -> IDENTICAL_TO .)


state 123

    (115) relational_operator -> NOT_IDENTICAL_TO .

    INTEGER         reduce using rule 115 (relational_operator -> NOT_IDENTICAL_TO .)
    FLOAT           reduce using rule 115 (relational_operator -> NOT_IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 115 (relational_operator -> NOT_IDENTICAL_TO .)
    TRUE            reduce using rule 115 (relational_operator -> NOT_IDENTICAL_TO .)
    FALSE           reduce using rule 115 (relational_operator -> NOT_IDENTICAL_TO .)
    LOGICAL_NOT     reduce using rule 115 (relational_operator -> NOT_IDENTICAL_TO .)
    ID              reduce using rule 115 (relational_operator -> NOT_IDENTICAL_TO .)


state 124

    (116) relational_operator -> DIFFERENT .

    INTEGER         reduce using rule 116 (relational_operator -> DIFFERENT .)
    FLOAT           reduce using rule 116 (relational_operator -> DIFFERENT .)
    LEFT_PAREN      reduce using rule 116 (relational_operator -> DIFFERENT .)
    TRUE            reduce using rule 116 (relational_operator -> DIFFERENT .)
    FALSE           reduce using rule 116 (relational_operator -> DIFFERENT .)
    LOGICAL_NOT     reduce using rule 116 (relational_operator -> DIFFERENT .)
    ID              reduce using rule 116 (relational_operator -> DIFFERENT .)


state 125

    (66) term -> term TIMES . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor

    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    LEFT_PAREN      shift and go to state 178
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    ID              shift and go to state 37

    term                           shift and go to state 58
    factor                         shift and go to state 181
    condition                      shift and go to state 82
    expression                     shift and go to state 57
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54

state 126

    (67) term -> term DIVIDE . factor
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor

    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    LEFT_PAREN      shift and go to state 178
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    ID              shift and go to state 37

    term                           shift and go to state 58
    factor                         shift and go to state 182
    condition                      shift and go to state 82
    expression                     shift and go to state 57
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54

state 127

    (21) function_statement -> FUNCTION NAME LEFT_PAREN . array_elements RIGHT_PAREN block
    (22) function_statement -> FUNCTION NAME LEFT_PAREN . RIGHT_PAREN block
    (126) array_elements -> . array_argument
    (127) array_elements -> . array_elements COMMA array_argument
    (128) array_argument -> . argument
    (129) array_argument -> . clave KEY_VALUE argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (130) clave -> . STRING
    (131) clave -> . INTEGER
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    RIGHT_PAREN     shift and go to state 184
    STRING          shift and go to state 147
    INTEGER         shift and go to state 148
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    array_elements                 shift and go to state 183
    array_argument                 shift and go to state 144
    argument                       shift and go to state 145
    clave                          shift and go to state 146
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 128

    (133) class_declaration -> CLASS NAME LEFT_BRACE . class_statements RIGHT_BRACE
    (134) class_declaration -> CLASS NAME LEFT_BRACE . RIGHT_BRACE
    (135) class_statements -> . class_statement
    (136) class_statements -> . class_statements class_statement
    (137) class_statement -> . method_declaration
    (138) class_statement -> . property_declaration
    (139) class_statement -> . ONE_LINE_COMMENT
    (140) class_statement -> . MULTI_LINE_COMMENT
    (141) method_declaration -> . visibility_operator function_statement
    (142) property_declaration -> . visibility_operator variable SEMICOLON
    (143) visibility_operator -> . PUBLIC
    (144) visibility_operator -> . PRIVATE
    (145) visibility_operator -> . PROTECTED

    RIGHT_BRACE     shift and go to state 186
    ONE_LINE_COMMENT shift and go to state 190
    MULTI_LINE_COMMENT shift and go to state 191
    PUBLIC          shift and go to state 193
    PRIVATE         shift and go to state 194
    PROTECTED       shift and go to state 195

    class_statements               shift and go to state 185
    class_statement                shift and go to state 187
    method_declaration             shift and go to state 188
    property_declaration           shift and go to state 189
    visibility_operator            shift and go to state 192

state 129

    (106) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (120) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (121) casting_type -> . INT_TYPE
    (122) casting_type -> . FLOAT_TYPE
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INT_TYPE        shift and go to state 133
    FLOAT_TYPE      shift and go to state 134
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    ID              shift and go to state 37
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61

    condition                      shift and go to state 101
    casting_type                   shift and go to state 131
    expression                     shift and go to state 112
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    term                           shift and go to state 58
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54
    factor                         shift and go to state 59

state 130

    (45) print_statement -> print_function LEFT_PAREN arguments . RIGHT_PAREN
    (50) arguments -> arguments . DOT argument
    (51) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 196
    DOT             shift and go to state 136
    COMMA           shift and go to state 137


state 131

    (120) casting -> LEFT_PAREN casting_type . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 197


state 132

    (72) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (53) argument -> expression .
    (107) relational_expression -> expression . relational_operator expression
    (108) relational_operator -> . EQUAL_TO
    (109) relational_operator -> . NOT_EQUAL_TO
    (110) relational_operator -> . LESS_THAN
    (111) relational_operator -> . GREATER_THAN
    (112) relational_operator -> . LESS_EQUAL
    (113) relational_operator -> . GREATER_EQUAL
    (114) relational_operator -> . IDENTICAL_TO
    (115) relational_operator -> . NOT_IDENTICAL_TO
    (116) relational_operator -> . DIFFERENT

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 176
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    DOT             reduce using rule 53 (argument -> expression .)
    COMMA           reduce using rule 53 (argument -> expression .)
    EQUAL_TO        shift and go to state 116
    NOT_EQUAL_TO    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_EQUAL      shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    IDENTICAL_TO    shift and go to state 122
    NOT_IDENTICAL_TO shift and go to state 123
    DIFFERENT       shift and go to state 124

  ! RIGHT_PAREN     [ reduce using rule 53 (argument -> expression .) ]

    relational_operator            shift and go to state 113

state 133

    (121) casting_type -> INT_TYPE .

    RIGHT_PAREN     reduce using rule 121 (casting_type -> INT_TYPE .)


state 134

    (122) casting_type -> FLOAT_TYPE .

    RIGHT_PAREN     reduce using rule 122 (casting_type -> FLOAT_TYPE .)


state 135

    (55) argument -> variable . CALL function_call
    (102) simple_condition -> variable .
    (36) assignment_statement -> variable . assignment_operator argument
    (37) assignment_statement -> variable . PLUS_PLUS
    (38) assignment_statement -> variable . MINUS_MINUS
    (132) array_indexing -> variable . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (29) function_name -> variable .
    (39) assignment_operator -> . EQUALS
    (40) assignment_operator -> . PLUS_EQUALS
    (41) assignment_operator -> . MINUS_EQUALS
    (42) assignment_operator -> . TIMES_EQUALS
    (43) assignment_operator -> . DIVIDE_EQUALS
    (44) assignment_operator -> . MOD_EQUALS

    CALL            shift and go to state 138
    RIGHT_PAREN     reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_AND     reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 102 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 102 (simple_condition -> variable .)
    TIMES           reduce using rule 102 (simple_condition -> variable .)
    DIVIDE          reduce using rule 102 (simple_condition -> variable .)
    PLUS            reduce using rule 102 (simple_condition -> variable .)
    MINUS           reduce using rule 102 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 102 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 102 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 102 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 102 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 102 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 102 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 102 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 102 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 102 (simple_condition -> variable .)
    DOT             reduce using rule 102 (simple_condition -> variable .)
    COMMA           reduce using rule 102 (simple_condition -> variable .)
    PLUS_PLUS       shift and go to state 86
    MINUS_MINUS     shift and go to state 87
    LEFT_BRACKET    shift and go to state 139
    LEFT_PAREN      reduce using rule 29 (function_name -> variable .)
    EQUALS          shift and go to state 140
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 90
    TIMES_EQUALS    shift and go to state 91
    DIVIDE_EQUALS   shift and go to state 92
    MOD_EQUALS      shift and go to state 93

    assignment_operator            shift and go to state 85

state 136

    (50) arguments -> arguments DOT . argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    argument                       shift and go to state 198
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 137

    (51) arguments -> arguments COMMA . argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    argument                       shift and go to state 199
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 138

    (55) argument -> variable CALL . function_call
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME

    NAME            shift and go to state 26
    ID              shift and go to state 37

    variable                       shift and go to state 200
    function_call                  shift and go to state 201
    function_name                  shift and go to state 32

state 139

    (132) array_indexing -> variable LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 202


state 140

    (39) assignment_operator -> EQUALS .

    STRING          reduce using rule 39 (assignment_operator -> EQUALS .)
    ID              reduce using rule 39 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 39 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 39 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 39 (assignment_operator -> EQUALS .)
    FGETS           reduce using rule 39 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 39 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 39 (assignment_operator -> EQUALS .)
    NAME            reduce using rule 39 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 39 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 39 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 39 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 39 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 39 (assignment_operator -> EQUALS .)


state 141

    (61) argument -> casting argument .

    DOT             reduce using rule 61 (argument -> casting argument .)
    COMMA           reduce using rule 61 (argument -> casting argument .)
    SEMICOLON       reduce using rule 61 (argument -> casting argument .)
    RIGHT_PAREN     reduce using rule 61 (argument -> casting argument .)
    RIGHT_BRACKET   reduce using rule 61 (argument -> casting argument .)


state 142

    (124) array -> ARRAY LEFT_PAREN . array_elements RIGHT_PAREN
    (126) array_elements -> . array_argument
    (127) array_elements -> . array_elements COMMA array_argument
    (128) array_argument -> . argument
    (129) array_argument -> . clave KEY_VALUE argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (130) clave -> . STRING
    (131) clave -> . INTEGER
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 147
    INTEGER         shift and go to state 148
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    array_elements                 shift and go to state 203
    array_argument                 shift and go to state 144
    argument                       shift and go to state 145
    clave                          shift and go to state 146
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 143

    (125) array -> LEFT_BRACKET array_elements . RIGHT_BRACKET
    (127) array_elements -> array_elements . COMMA array_argument

    RIGHT_BRACKET   shift and go to state 204
    COMMA           shift and go to state 205


state 144

    (126) array_elements -> array_argument .

    RIGHT_BRACKET   reduce using rule 126 (array_elements -> array_argument .)
    COMMA           reduce using rule 126 (array_elements -> array_argument .)
    RIGHT_PAREN     reduce using rule 126 (array_elements -> array_argument .)


state 145

    (128) array_argument -> argument .

    RIGHT_BRACKET   reduce using rule 128 (array_argument -> argument .)
    COMMA           reduce using rule 128 (array_argument -> argument .)
    RIGHT_PAREN     reduce using rule 128 (array_argument -> argument .)


state 146

    (129) array_argument -> clave . KEY_VALUE argument

    KEY_VALUE       shift and go to state 206


state 147

    (52) argument -> STRING .
    (130) clave -> STRING .

    RIGHT_BRACKET   reduce using rule 52 (argument -> STRING .)
    COMMA           reduce using rule 52 (argument -> STRING .)
    RIGHT_PAREN     reduce using rule 52 (argument -> STRING .)
    KEY_VALUE       reduce using rule 130 (clave -> STRING .)


state 148

    (131) clave -> INTEGER .
    (69) factor -> INTEGER .

    KEY_VALUE       reduce using rule 131 (clave -> INTEGER .)
    TIMES           reduce using rule 69 (factor -> INTEGER .)
    DIVIDE          reduce using rule 69 (factor -> INTEGER .)
    PLUS            reduce using rule 69 (factor -> INTEGER .)
    MINUS           reduce using rule 69 (factor -> INTEGER .)
    EQUAL_TO        reduce using rule 69 (factor -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 69 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 69 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 69 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 69 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 69 (factor -> INTEGER .)
    IDENTICAL_TO    reduce using rule 69 (factor -> INTEGER .)
    NOT_IDENTICAL_TO reduce using rule 69 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 69 (factor -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 69 (factor -> INTEGER .)
    COMMA           reduce using rule 69 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 69 (factor -> INTEGER .)


state 149

    (23) anonymous_function -> FUNCTION LEFT_PAREN . array_elements RIGHT_PAREN block
    (24) anonymous_function -> FUNCTION LEFT_PAREN . RIGHT_PAREN block
    (126) array_elements -> . array_argument
    (127) array_elements -> . array_elements COMMA array_argument
    (128) array_argument -> . argument
    (129) array_argument -> . clave KEY_VALUE argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (130) clave -> . STRING
    (131) clave -> . INTEGER
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    RIGHT_PAREN     shift and go to state 208
    STRING          shift and go to state 147
    INTEGER         shift and go to state 148
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    array_elements                 shift and go to state 207
    array_argument                 shift and go to state 144
    argument                       shift and go to state 145
    clave                          shift and go to state 146
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 150

    (146) object_creation -> NEW NAME . LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> NEW NAME . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN      shift and go to state 209


state 151

    (31) fscanf_statement -> FSCANF LEFT_PAREN STDIN . COMMA STRING COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 210


state 152

    (30) fgets_statement -> FGETS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 211


state 153

    (36) assignment_statement -> variable assignment_operator argument .

    SEMICOLON       reduce using rule 36 (assignment_statement -> variable assignment_operator argument .)
    DOT             reduce using rule 36 (assignment_statement -> variable assignment_operator argument .)
    COMMA           reduce using rule 36 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_PAREN     reduce using rule 36 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_BRACKET   reduce using rule 36 (assignment_statement -> variable assignment_operator argument .)


state 154

    (123) array_declaration_statement -> variable EQUALS array .

    SEMICOLON       reduce using rule 123 (array_declaration_statement -> variable EQUALS array .)
    RIGHT_PAREN     reduce using rule 123 (array_declaration_statement -> variable EQUALS array .)
    COMMA           reduce using rule 123 (array_declaration_statement -> variable EQUALS array .)


state 155

    (26) function_call -> function_name LEFT_PAREN arguments . RIGHT_PAREN
    (50) arguments -> arguments . DOT argument
    (51) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 212
    DOT             shift and go to state 136
    COMMA           shift and go to state 137


state 156

    (27) function_call -> function_name LEFT_PAREN RIGHT_PAREN .

    SEMICOLON       reduce using rule 27 (function_call -> function_name LEFT_PAREN RIGHT_PAREN .)
    DOT             reduce using rule 27 (function_call -> function_name LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 27 (function_call -> function_name LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 27 (function_call -> function_name LEFT_PAREN RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 27 (function_call -> function_name LEFT_PAREN RIGHT_PAREN .)


state 157

    (82) for_part1 -> FOR LEFT_PAREN assignment_list . SEMICOLON
    (91) assignment_list -> assignment_list . COMMA assignment_statement

    SEMICOLON       shift and go to state 213
    COMMA           shift and go to state 214


state 158

    (83) for_part1 -> FOR LEFT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    TRUE            reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FALSE           reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LEFT_PAREN      reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    ID              reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    INTEGER         reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FLOAT           reduce using rule 83 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)


state 159

    (90) assignment_list -> assignment_statement .

    SEMICOLON       reduce using rule 90 (assignment_list -> assignment_statement .)
    COMMA           reduce using rule 90 (assignment_list -> assignment_statement .)


state 160

    (36) assignment_statement -> variable . assignment_operator argument
    (37) assignment_statement -> variable . PLUS_PLUS
    (38) assignment_statement -> variable . MINUS_MINUS
    (39) assignment_operator -> . EQUALS
    (40) assignment_operator -> . PLUS_EQUALS
    (41) assignment_operator -> . MINUS_EQUALS
    (42) assignment_operator -> . TIMES_EQUALS
    (43) assignment_operator -> . DIVIDE_EQUALS
    (44) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 86
    MINUS_MINUS     shift and go to state 87
    EQUALS          shift and go to state 140
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 90
    TIMES_EQUALS    shift and go to state 91
    DIVIDE_EQUALS   shift and go to state 92
    MOD_EQUALS      shift and go to state 93

    assignment_operator            shift and go to state 85

state 161

    (35) variable -> ID CALL NAME .

    PLUS_PLUS       reduce using rule 35 (variable -> ID CALL NAME .)
    MINUS_MINUS     reduce using rule 35 (variable -> ID CALL NAME .)
    EQUALS          reduce using rule 35 (variable -> ID CALL NAME .)
    PLUS_EQUALS     reduce using rule 35 (variable -> ID CALL NAME .)
    MINUS_EQUALS    reduce using rule 35 (variable -> ID CALL NAME .)
    TIMES_EQUALS    reduce using rule 35 (variable -> ID CALL NAME .)
    DIVIDE_EQUALS   reduce using rule 35 (variable -> ID CALL NAME .)
    MOD_EQUALS      reduce using rule 35 (variable -> ID CALL NAME .)
    LEFT_PAREN      reduce using rule 35 (variable -> ID CALL NAME .)
    SEMICOLON       reduce using rule 35 (variable -> ID CALL NAME .)
    LOGICAL_AND     reduce using rule 35 (variable -> ID CALL NAME .)
    LOGICAL_OR      reduce using rule 35 (variable -> ID CALL NAME .)
    LOGICAL_XOR     reduce using rule 35 (variable -> ID CALL NAME .)
    TIMES           reduce using rule 35 (variable -> ID CALL NAME .)
    DIVIDE          reduce using rule 35 (variable -> ID CALL NAME .)
    PLUS            reduce using rule 35 (variable -> ID CALL NAME .)
    MINUS           reduce using rule 35 (variable -> ID CALL NAME .)
    EQUAL_TO        reduce using rule 35 (variable -> ID CALL NAME .)
    NOT_EQUAL_TO    reduce using rule 35 (variable -> ID CALL NAME .)
    LESS_THAN       reduce using rule 35 (variable -> ID CALL NAME .)
    GREATER_THAN    reduce using rule 35 (variable -> ID CALL NAME .)
    LESS_EQUAL      reduce using rule 35 (variable -> ID CALL NAME .)
    GREATER_EQUAL   reduce using rule 35 (variable -> ID CALL NAME .)
    IDENTICAL_TO    reduce using rule 35 (variable -> ID CALL NAME .)
    NOT_IDENTICAL_TO reduce using rule 35 (variable -> ID CALL NAME .)
    DIFFERENT       reduce using rule 35 (variable -> ID CALL NAME .)
    CALL            reduce using rule 35 (variable -> ID CALL NAME .)
    LEFT_BRACKET    reduce using rule 35 (variable -> ID CALL NAME .)
    DOT             reduce using rule 35 (variable -> ID CALL NAME .)
    COMMA           reduce using rule 35 (variable -> ID CALL NAME .)
    RIGHT_PAREN     reduce using rule 35 (variable -> ID CALL NAME .)
    RIGHT_BRACKET   reduce using rule 35 (variable -> ID CALL NAME .)


state 162

    (74) if_statement -> IF parenthesized_condition block else_if_extended .
    (75) if_statement -> IF parenthesized_condition block else_if_extended . if_part3
    (78) else_if_extended -> else_if_extended . if_part2
    (80) if_part3 -> . ELSE block
    (79) if_part2 -> . ELSEIF parenthesized_condition block

    CLOSE_TAG       reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ONE_LINE_COMMENT reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    MULTI_LINE_COMMENT reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    BREAK           reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    CONTINUE        reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    IF              reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    WHILE           reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FUNCTION        reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    CLASS           reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FSCANF          reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FGETS           reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    RETURN          reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FOR             reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    PRINT           reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ECHO            reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ID              reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    NAME            reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    RIGHT_BRACE     reduce using rule 74 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ELSE            shift and go to state 165
    ELSEIF          shift and go to state 166

    if_part3                       shift and go to state 215
    if_part2                       shift and go to state 216

state 163

    (76) if_statement -> IF parenthesized_condition block if_part3 .

    CLOSE_TAG       reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    ONE_LINE_COMMENT reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    MULTI_LINE_COMMENT reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    BREAK           reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    CONTINUE        reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    IF              reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    WHILE           reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    FUNCTION        reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    CLASS           reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    FSCANF          reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    FGETS           reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    RETURN          reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    FOR             reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    PRINT           reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    ECHO            reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    ID              reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    NAME            reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)
    RIGHT_BRACE     reduce using rule 76 (if_statement -> IF parenthesized_condition block if_part3 .)


state 164

    (77) else_if_extended -> if_part2 .

    ELSE            reduce using rule 77 (else_if_extended -> if_part2 .)
    ELSEIF          reduce using rule 77 (else_if_extended -> if_part2 .)
    CLOSE_TAG       reduce using rule 77 (else_if_extended -> if_part2 .)
    ONE_LINE_COMMENT reduce using rule 77 (else_if_extended -> if_part2 .)
    MULTI_LINE_COMMENT reduce using rule 77 (else_if_extended -> if_part2 .)
    BREAK           reduce using rule 77 (else_if_extended -> if_part2 .)
    CONTINUE        reduce using rule 77 (else_if_extended -> if_part2 .)
    IF              reduce using rule 77 (else_if_extended -> if_part2 .)
    WHILE           reduce using rule 77 (else_if_extended -> if_part2 .)
    FUNCTION        reduce using rule 77 (else_if_extended -> if_part2 .)
    CLASS           reduce using rule 77 (else_if_extended -> if_part2 .)
    FSCANF          reduce using rule 77 (else_if_extended -> if_part2 .)
    FGETS           reduce using rule 77 (else_if_extended -> if_part2 .)
    RETURN          reduce using rule 77 (else_if_extended -> if_part2 .)
    FOR             reduce using rule 77 (else_if_extended -> if_part2 .)
    PRINT           reduce using rule 77 (else_if_extended -> if_part2 .)
    ECHO            reduce using rule 77 (else_if_extended -> if_part2 .)
    ID              reduce using rule 77 (else_if_extended -> if_part2 .)
    NAME            reduce using rule 77 (else_if_extended -> if_part2 .)
    RIGHT_BRACE     reduce using rule 77 (else_if_extended -> if_part2 .)


state 165

    (80) if_part3 -> ELSE . block
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 217

state 166

    (79) if_part2 -> ELSEIF . parenthesized_condition block
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 42

    parenthesized_condition        shift and go to state 218

state 167

    (94) block -> LEFT_BRACE statements . RIGHT_BRACE
    (3) statements -> statements . statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement2 -> . class_declaration
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (19) statement -> . function_call
    (20) statement -> . return_statement
    (73) if_statement -> . IF parenthesized_condition block
    (74) if_statement -> . IF parenthesized_condition block else_if_extended
    (75) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (76) if_statement -> . IF parenthesized_condition block if_part3
    (81) while_statement -> . WHILE parenthesized_condition block
    (84) for_statement -> . for_part1 condition for_part3
    (85) for_statement -> . for_part1 for_part3
    (21) function_statement -> . FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block
    (22) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (133) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (134) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (45) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (46) print_statement -> . print_function arguments
    (31) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (123) array_declaration_statement -> . variable EQUALS array
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (25) return_statement -> . RETURN arguments
    (82) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (83) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (47) print_function -> . PRINT
    (48) print_function -> . ECHO
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (28) function_name -> . NAME
    (29) function_name -> . variable

    RIGHT_BRACE     shift and go to state 219
    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FUNCTION        shift and go to state 25
    CLASS           shift and go to state 27
    FSCANF          shift and go to state 29
    FGETS           shift and go to state 30
    RETURN          shift and go to state 33
    FOR             shift and go to state 34
    PRINT           shift and go to state 35
    ECHO            shift and go to state 36
    ID              shift and go to state 37
    NAME            shift and go to state 26

    statement2                     shift and go to state 39
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    class_declaration              shift and go to state 12
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    function_call                  shift and go to state 20
    return_statement               shift and go to state 21
    for_part1                      shift and go to state 24
    print_function                 shift and go to state 28
    variable                       shift and go to state 31
    function_name                  shift and go to state 32

state 168

    (95) block -> LEFT_BRACE RIGHT_BRACE .

    ELSE            reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    ELSEIF          reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    CLOSE_TAG       reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    CONTINUE        reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    CLASS           reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    FSCANF          reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    FGETS           reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    FOR             reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    ECHO            reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    ID              reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    NAME            reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    PUBLIC          reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    PRIVATE         reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    PROTECTED       reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    DOT             reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    COMMA           reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    SEMICOLON       reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 95 (block -> LEFT_BRACE RIGHT_BRACE .)


state 169

    (106) parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .

    LEFT_BRACE      reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    SEMICOLON       reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_AND     reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    TIMES           reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DIVIDE          reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    PLUS            reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    MINUS           reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    EQUAL_TO        reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    NOT_EQUAL_TO    reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LESS_THAN       reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    IDENTICAL_TO    reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    NOT_IDENTICAL_TO reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DIFFERENT       reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DOT             reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    COMMA           reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 106 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)


state 170

    (105) complex_condition -> condition logical_operator condition .
    (105) complex_condition -> condition . logical_operator condition
    (71) factor -> condition .
    (117) logical_operator -> . LOGICAL_AND
    (118) logical_operator -> . LOGICAL_OR
    (119) logical_operator -> . LOGICAL_XOR

  ! reduce/reduce conflict for TIMES resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for PLUS resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for MINUS resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 71 (factor -> condition .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 71 (factor -> condition .)
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 105 (complex_condition -> condition logical_operator condition .)
    DOT             reduce using rule 105 (complex_condition -> condition logical_operator condition .)
    COMMA           reduce using rule 105 (complex_condition -> condition logical_operator condition .)
    RIGHT_PAREN     reduce using rule 105 (complex_condition -> condition logical_operator condition .)
    RIGHT_BRACKET   reduce using rule 105 (complex_condition -> condition logical_operator condition .)
    TIMES           reduce using rule 71 (factor -> condition .)
    DIVIDE          reduce using rule 71 (factor -> condition .)
    PLUS            reduce using rule 71 (factor -> condition .)
    MINUS           reduce using rule 71 (factor -> condition .)
    EQUAL_TO        reduce using rule 71 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 71 (factor -> condition .)
    LESS_THAN       reduce using rule 71 (factor -> condition .)
    GREATER_THAN    reduce using rule 71 (factor -> condition .)
    LESS_EQUAL      reduce using rule 71 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 71 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 71 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 71 (factor -> condition .)
    DIFFERENT       reduce using rule 71 (factor -> condition .)
    LOGICAL_AND     shift and go to state 105
    LOGICAL_OR      shift and go to state 106
    LOGICAL_XOR     shift and go to state 107

  ! LOGICAL_AND     [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! LOGICAL_OR      [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! TIMES           [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! DIVIDE          [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! PLUS            [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! MINUS           [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! EQUAL_TO        [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! LESS_THAN       [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! GREATER_THAN    [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! LESS_EQUAL      [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! GREATER_EQUAL   [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! IDENTICAL_TO    [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]
  ! DIFFERENT       [ reduce using rule 105 (complex_condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 104

state 171

    (86) for_part3 -> SEMICOLON statement_list RIGHT_PAREN . for_part4
    (88) for_part4 -> . block
    (89) for_part4 -> . SEMICOLON
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 173
    LEFT_BRACE      shift and go to state 100

    for_part4                      shift and go to state 220
    block                          shift and go to state 175

state 172

    (93) statement_list -> statement_list COMMA . statement
    (12) statement -> . print_statement
    (13) statement -> . fscanf_statement
    (14) statement -> . fgets_statement
    (15) statement -> . assignment_statement
    (16) statement -> . array_declaration_statement
    (17) statement -> . BREAK
    (18) statement -> . CONTINUE
    (19) statement -> . function_call
    (20) statement -> . return_statement
    (45) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (46) print_statement -> . print_function arguments
    (31) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (123) array_declaration_statement -> . variable EQUALS array
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (25) return_statement -> . RETURN arguments
    (47) print_function -> . PRINT
    (48) print_function -> . ECHO
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (28) function_name -> . NAME
    (29) function_name -> . variable

    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FSCANF          shift and go to state 29
    FGETS           shift and go to state 30
    RETURN          shift and go to state 33
    PRINT           shift and go to state 35
    ECHO            shift and go to state 36
    ID              shift and go to state 37
    NAME            shift and go to state 26

    statement                      shift and go to state 221
    print_statement                shift and go to state 13
    fscanf_statement               shift and go to state 14
    fgets_statement                shift and go to state 15
    assignment_statement           shift and go to state 16
    array_declaration_statement    shift and go to state 17
    function_call                  shift and go to state 20
    return_statement               shift and go to state 21
    print_function                 shift and go to state 28
    variable                       shift and go to state 31
    function_name                  shift and go to state 32

state 173

    (89) for_part4 -> SEMICOLON .

    CLOSE_TAG       reduce using rule 89 (for_part4 -> SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 89 (for_part4 -> SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 89 (for_part4 -> SEMICOLON .)
    BREAK           reduce using rule 89 (for_part4 -> SEMICOLON .)
    CONTINUE        reduce using rule 89 (for_part4 -> SEMICOLON .)
    IF              reduce using rule 89 (for_part4 -> SEMICOLON .)
    WHILE           reduce using rule 89 (for_part4 -> SEMICOLON .)
    FUNCTION        reduce using rule 89 (for_part4 -> SEMICOLON .)
    CLASS           reduce using rule 89 (for_part4 -> SEMICOLON .)
    FSCANF          reduce using rule 89 (for_part4 -> SEMICOLON .)
    FGETS           reduce using rule 89 (for_part4 -> SEMICOLON .)
    RETURN          reduce using rule 89 (for_part4 -> SEMICOLON .)
    FOR             reduce using rule 89 (for_part4 -> SEMICOLON .)
    PRINT           reduce using rule 89 (for_part4 -> SEMICOLON .)
    ECHO            reduce using rule 89 (for_part4 -> SEMICOLON .)
    ID              reduce using rule 89 (for_part4 -> SEMICOLON .)
    NAME            reduce using rule 89 (for_part4 -> SEMICOLON .)
    RIGHT_BRACE     reduce using rule 89 (for_part4 -> SEMICOLON .)


state 174

    (87) for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    IF              reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    CLASS           reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ID              reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    NAME            reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 87 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)


state 175

    (88) for_part4 -> block .

    CLOSE_TAG       reduce using rule 88 (for_part4 -> block .)
    ONE_LINE_COMMENT reduce using rule 88 (for_part4 -> block .)
    MULTI_LINE_COMMENT reduce using rule 88 (for_part4 -> block .)
    BREAK           reduce using rule 88 (for_part4 -> block .)
    CONTINUE        reduce using rule 88 (for_part4 -> block .)
    IF              reduce using rule 88 (for_part4 -> block .)
    WHILE           reduce using rule 88 (for_part4 -> block .)
    FUNCTION        reduce using rule 88 (for_part4 -> block .)
    CLASS           reduce using rule 88 (for_part4 -> block .)
    FSCANF          reduce using rule 88 (for_part4 -> block .)
    FGETS           reduce using rule 88 (for_part4 -> block .)
    RETURN          reduce using rule 88 (for_part4 -> block .)
    FOR             reduce using rule 88 (for_part4 -> block .)
    PRINT           reduce using rule 88 (for_part4 -> block .)
    ECHO            reduce using rule 88 (for_part4 -> block .)
    ID              reduce using rule 88 (for_part4 -> block .)
    NAME            reduce using rule 88 (for_part4 -> block .)
    RIGHT_BRACE     reduce using rule 88 (for_part4 -> block .)


state 176

    (72) factor -> LEFT_PAREN expression RIGHT_PAREN .

    TIMES           reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUAL_TO        reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUAL_TO    reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_THAN       reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL_TO    reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL_TO reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIFFERENT       reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT             reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_AND     reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 177

    (107) relational_expression -> expression relational_operator expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (107) relational_expression -> expression . relational_operator expression
    (108) relational_operator -> . EQUAL_TO
    (109) relational_operator -> . NOT_EQUAL_TO
    (110) relational_operator -> . LESS_THAN
    (111) relational_operator -> . GREATER_THAN
    (112) relational_operator -> . LESS_EQUAL
    (113) relational_operator -> . GREATER_EQUAL
    (114) relational_operator -> . IDENTICAL_TO
    (115) relational_operator -> . NOT_IDENTICAL_TO
    (116) relational_operator -> . DIFFERENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for NOT_EQUAL_TO resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for IDENTICAL_TO resolved as shift
  ! shift/reduce conflict for NOT_IDENTICAL_TO resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    LOGICAL_AND     reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    LOGICAL_OR      reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    LOGICAL_XOR     reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    TIMES           reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    DIVIDE          reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    DOT             reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    COMMA           reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    RIGHT_PAREN     reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    RIGHT_BRACKET   reduce using rule 107 (relational_expression -> expression relational_operator expression .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    EQUAL_TO        shift and go to state 116
    NOT_EQUAL_TO    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_EQUAL      shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    IDENTICAL_TO    shift and go to state 122
    NOT_IDENTICAL_TO shift and go to state 123
    DIFFERENT       shift and go to state 124

  ! PLUS            [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! MINUS           [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! EQUAL_TO        [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! LESS_THAN       [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! GREATER_THAN    [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! IDENTICAL_TO    [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]
  ! DIFFERENT       [ reduce using rule 107 (relational_expression -> expression relational_operator expression .) ]

    relational_operator            shift and go to state 113

state 178

    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (106) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (107) relational_expression -> . expression relational_operator expression

    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55
    LEFT_PAREN      shift and go to state 56
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    ID              shift and go to state 37

    expression                     shift and go to state 112
    condition                      shift and go to state 101
    term                           shift and go to state 58
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    factor                         shift and go to state 59
    variable                       shift and go to state 53
    relational_expression          shift and go to state 54

state 179

    (63) expression -> expression PLUS term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor
    (65) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 63 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 63 (expression -> expression PLUS term .)
    PLUS            reduce using rule 63 (expression -> expression PLUS term .)
    MINUS           reduce using rule 63 (expression -> expression PLUS term .)
    EQUAL_TO        reduce using rule 63 (expression -> expression PLUS term .)
    NOT_EQUAL_TO    reduce using rule 63 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 63 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 63 (expression -> expression PLUS term .)
    LESS_EQUAL      reduce using rule 63 (expression -> expression PLUS term .)
    GREATER_EQUAL   reduce using rule 63 (expression -> expression PLUS term .)
    IDENTICAL_TO    reduce using rule 63 (expression -> expression PLUS term .)
    NOT_IDENTICAL_TO reduce using rule 63 (expression -> expression PLUS term .)
    DIFFERENT       reduce using rule 63 (expression -> expression PLUS term .)
    DOT             reduce using rule 63 (expression -> expression PLUS term .)
    COMMA           reduce using rule 63 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 63 (expression -> expression PLUS term .)
    RIGHT_PAREN     reduce using rule 63 (expression -> expression PLUS term .)
    RIGHT_BRACKET   reduce using rule 63 (expression -> expression PLUS term .)
    LOGICAL_AND     reduce using rule 63 (expression -> expression PLUS term .)
    LOGICAL_OR      reduce using rule 63 (expression -> expression PLUS term .)
    LOGICAL_XOR     reduce using rule 63 (expression -> expression PLUS term .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 126

  ! TIMES           [ reduce using rule 63 (expression -> expression PLUS term .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression PLUS term .) ]
  ! PLUS            [ reduce using rule 65 (expression -> term .) ]
  ! MINUS           [ reduce using rule 65 (expression -> term .) ]
  ! EQUAL_TO        [ reduce using rule 65 (expression -> term .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 65 (expression -> term .) ]
  ! LESS_THAN       [ reduce using rule 65 (expression -> term .) ]
  ! GREATER_THAN    [ reduce using rule 65 (expression -> term .) ]
  ! LESS_EQUAL      [ reduce using rule 65 (expression -> term .) ]
  ! GREATER_EQUAL   [ reduce using rule 65 (expression -> term .) ]
  ! IDENTICAL_TO    [ reduce using rule 65 (expression -> term .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 65 (expression -> term .) ]
  ! DIFFERENT       [ reduce using rule 65 (expression -> term .) ]


state 180

    (64) expression -> expression MINUS term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor
    (65) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 64 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 64 (expression -> expression MINUS term .)
    PLUS            reduce using rule 64 (expression -> expression MINUS term .)
    MINUS           reduce using rule 64 (expression -> expression MINUS term .)
    EQUAL_TO        reduce using rule 64 (expression -> expression MINUS term .)
    NOT_EQUAL_TO    reduce using rule 64 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 64 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 64 (expression -> expression MINUS term .)
    LESS_EQUAL      reduce using rule 64 (expression -> expression MINUS term .)
    GREATER_EQUAL   reduce using rule 64 (expression -> expression MINUS term .)
    IDENTICAL_TO    reduce using rule 64 (expression -> expression MINUS term .)
    NOT_IDENTICAL_TO reduce using rule 64 (expression -> expression MINUS term .)
    DIFFERENT       reduce using rule 64 (expression -> expression MINUS term .)
    DOT             reduce using rule 64 (expression -> expression MINUS term .)
    COMMA           reduce using rule 64 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 64 (expression -> expression MINUS term .)
    RIGHT_PAREN     reduce using rule 64 (expression -> expression MINUS term .)
    RIGHT_BRACKET   reduce using rule 64 (expression -> expression MINUS term .)
    LOGICAL_AND     reduce using rule 64 (expression -> expression MINUS term .)
    LOGICAL_OR      reduce using rule 64 (expression -> expression MINUS term .)
    LOGICAL_XOR     reduce using rule 64 (expression -> expression MINUS term .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 126

  ! TIMES           [ reduce using rule 64 (expression -> expression MINUS term .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression MINUS term .) ]
  ! PLUS            [ reduce using rule 65 (expression -> term .) ]
  ! MINUS           [ reduce using rule 65 (expression -> term .) ]
  ! EQUAL_TO        [ reduce using rule 65 (expression -> term .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 65 (expression -> term .) ]
  ! LESS_THAN       [ reduce using rule 65 (expression -> term .) ]
  ! GREATER_THAN    [ reduce using rule 65 (expression -> term .) ]
  ! LESS_EQUAL      [ reduce using rule 65 (expression -> term .) ]
  ! GREATER_EQUAL   [ reduce using rule 65 (expression -> term .) ]
  ! IDENTICAL_TO    [ reduce using rule 65 (expression -> term .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 65 (expression -> term .) ]
  ! DIFFERENT       [ reduce using rule 65 (expression -> term .) ]


state 181

    (66) term -> term TIMES factor .
    (68) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 66 (term -> term TIMES factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 66 (term -> term TIMES factor .)
    TIMES           reduce using rule 66 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 66 (term -> term TIMES factor .)
    PLUS            reduce using rule 66 (term -> term TIMES factor .)
    MINUS           reduce using rule 66 (term -> term TIMES factor .)
    EQUAL_TO        reduce using rule 66 (term -> term TIMES factor .)
    NOT_EQUAL_TO    reduce using rule 66 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 66 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 66 (term -> term TIMES factor .)
    LESS_EQUAL      reduce using rule 66 (term -> term TIMES factor .)
    GREATER_EQUAL   reduce using rule 66 (term -> term TIMES factor .)
    IDENTICAL_TO    reduce using rule 66 (term -> term TIMES factor .)
    NOT_IDENTICAL_TO reduce using rule 66 (term -> term TIMES factor .)
    DIFFERENT       reduce using rule 66 (term -> term TIMES factor .)
    DOT             reduce using rule 66 (term -> term TIMES factor .)
    COMMA           reduce using rule 66 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 66 (term -> term TIMES factor .)
    RIGHT_PAREN     reduce using rule 66 (term -> term TIMES factor .)
    RIGHT_BRACKET   reduce using rule 66 (term -> term TIMES factor .)
    LOGICAL_AND     reduce using rule 66 (term -> term TIMES factor .)
    LOGICAL_OR      reduce using rule 66 (term -> term TIMES factor .)
    LOGICAL_XOR     reduce using rule 66 (term -> term TIMES factor .)

  ! TIMES           [ reduce using rule 68 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 68 (term -> factor .) ]
  ! PLUS            [ reduce using rule 68 (term -> factor .) ]
  ! MINUS           [ reduce using rule 68 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 68 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 68 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 68 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 68 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 68 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 68 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 68 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 68 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 68 (term -> factor .) ]


state 182

    (67) term -> term DIVIDE factor .
    (68) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 67 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 67 (term -> term DIVIDE factor .)
    TIMES           reduce using rule 67 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 67 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 67 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 67 (term -> term DIVIDE factor .)
    EQUAL_TO        reduce using rule 67 (term -> term DIVIDE factor .)
    NOT_EQUAL_TO    reduce using rule 67 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 67 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 67 (term -> term DIVIDE factor .)
    LESS_EQUAL      reduce using rule 67 (term -> term DIVIDE factor .)
    GREATER_EQUAL   reduce using rule 67 (term -> term DIVIDE factor .)
    IDENTICAL_TO    reduce using rule 67 (term -> term DIVIDE factor .)
    NOT_IDENTICAL_TO reduce using rule 67 (term -> term DIVIDE factor .)
    DIFFERENT       reduce using rule 67 (term -> term DIVIDE factor .)
    DOT             reduce using rule 67 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 67 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 67 (term -> term DIVIDE factor .)
    RIGHT_PAREN     reduce using rule 67 (term -> term DIVIDE factor .)
    RIGHT_BRACKET   reduce using rule 67 (term -> term DIVIDE factor .)
    LOGICAL_AND     reduce using rule 67 (term -> term DIVIDE factor .)
    LOGICAL_OR      reduce using rule 67 (term -> term DIVIDE factor .)
    LOGICAL_XOR     reduce using rule 67 (term -> term DIVIDE factor .)

  ! TIMES           [ reduce using rule 68 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 68 (term -> factor .) ]
  ! PLUS            [ reduce using rule 68 (term -> factor .) ]
  ! MINUS           [ reduce using rule 68 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 68 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 68 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 68 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 68 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 68 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 68 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 68 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 68 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 68 (term -> factor .) ]


state 183

    (21) function_statement -> FUNCTION NAME LEFT_PAREN array_elements . RIGHT_PAREN block
    (127) array_elements -> array_elements . COMMA array_argument

    RIGHT_PAREN     shift and go to state 222
    COMMA           shift and go to state 205


state 184

    (22) function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN . block
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 223

state 185

    (133) class_declaration -> CLASS NAME LEFT_BRACE class_statements . RIGHT_BRACE
    (136) class_statements -> class_statements . class_statement
    (137) class_statement -> . method_declaration
    (138) class_statement -> . property_declaration
    (139) class_statement -> . ONE_LINE_COMMENT
    (140) class_statement -> . MULTI_LINE_COMMENT
    (141) method_declaration -> . visibility_operator function_statement
    (142) property_declaration -> . visibility_operator variable SEMICOLON
    (143) visibility_operator -> . PUBLIC
    (144) visibility_operator -> . PRIVATE
    (145) visibility_operator -> . PROTECTED

    RIGHT_BRACE     shift and go to state 224
    ONE_LINE_COMMENT shift and go to state 190
    MULTI_LINE_COMMENT shift and go to state 191
    PUBLIC          shift and go to state 193
    PRIVATE         shift and go to state 194
    PROTECTED       shift and go to state 195

    class_statement                shift and go to state 225
    method_declaration             shift and go to state 188
    property_declaration           shift and go to state 189
    visibility_operator            shift and go to state 192

state 186

    (134) class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .

    CLOSE_TAG       reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    CONTINUE        reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    CLASS           reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FSCANF          reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FGETS           reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FOR             reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    ECHO            reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    ID              reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    NAME            reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 134 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)


state 187

    (135) class_statements -> class_statement .

    RIGHT_BRACE     reduce using rule 135 (class_statements -> class_statement .)
    ONE_LINE_COMMENT reduce using rule 135 (class_statements -> class_statement .)
    MULTI_LINE_COMMENT reduce using rule 135 (class_statements -> class_statement .)
    PUBLIC          reduce using rule 135 (class_statements -> class_statement .)
    PRIVATE         reduce using rule 135 (class_statements -> class_statement .)
    PROTECTED       reduce using rule 135 (class_statements -> class_statement .)


state 188

    (137) class_statement -> method_declaration .

    RIGHT_BRACE     reduce using rule 137 (class_statement -> method_declaration .)
    ONE_LINE_COMMENT reduce using rule 137 (class_statement -> method_declaration .)
    MULTI_LINE_COMMENT reduce using rule 137 (class_statement -> method_declaration .)
    PUBLIC          reduce using rule 137 (class_statement -> method_declaration .)
    PRIVATE         reduce using rule 137 (class_statement -> method_declaration .)
    PROTECTED       reduce using rule 137 (class_statement -> method_declaration .)


state 189

    (138) class_statement -> property_declaration .

    RIGHT_BRACE     reduce using rule 138 (class_statement -> property_declaration .)
    ONE_LINE_COMMENT reduce using rule 138 (class_statement -> property_declaration .)
    MULTI_LINE_COMMENT reduce using rule 138 (class_statement -> property_declaration .)
    PUBLIC          reduce using rule 138 (class_statement -> property_declaration .)
    PRIVATE         reduce using rule 138 (class_statement -> property_declaration .)
    PROTECTED       reduce using rule 138 (class_statement -> property_declaration .)


state 190

    (139) class_statement -> ONE_LINE_COMMENT .

    RIGHT_BRACE     reduce using rule 139 (class_statement -> ONE_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 139 (class_statement -> ONE_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 139 (class_statement -> ONE_LINE_COMMENT .)
    PUBLIC          reduce using rule 139 (class_statement -> ONE_LINE_COMMENT .)
    PRIVATE         reduce using rule 139 (class_statement -> ONE_LINE_COMMENT .)
    PROTECTED       reduce using rule 139 (class_statement -> ONE_LINE_COMMENT .)


state 191

    (140) class_statement -> MULTI_LINE_COMMENT .

    RIGHT_BRACE     reduce using rule 140 (class_statement -> MULTI_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 140 (class_statement -> MULTI_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 140 (class_statement -> MULTI_LINE_COMMENT .)
    PUBLIC          reduce using rule 140 (class_statement -> MULTI_LINE_COMMENT .)
    PRIVATE         reduce using rule 140 (class_statement -> MULTI_LINE_COMMENT .)
    PROTECTED       reduce using rule 140 (class_statement -> MULTI_LINE_COMMENT .)


state 192

    (141) method_declaration -> visibility_operator . function_statement
    (142) property_declaration -> visibility_operator . variable SEMICOLON
    (21) function_statement -> . FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block
    (22) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME

    FUNCTION        shift and go to state 25
    ID              shift and go to state 37

    function_statement             shift and go to state 226
    variable                       shift and go to state 227

state 193

    (143) visibility_operator -> PUBLIC .

    FUNCTION        reduce using rule 143 (visibility_operator -> PUBLIC .)
    ID              reduce using rule 143 (visibility_operator -> PUBLIC .)


state 194

    (144) visibility_operator -> PRIVATE .

    FUNCTION        reduce using rule 144 (visibility_operator -> PRIVATE .)
    ID              reduce using rule 144 (visibility_operator -> PRIVATE .)


state 195

    (145) visibility_operator -> PROTECTED .

    FUNCTION        reduce using rule 145 (visibility_operator -> PROTECTED .)
    ID              reduce using rule 145 (visibility_operator -> PROTECTED .)


state 196

    (45) print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .

    SEMICOLON       reduce using rule 45 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 45 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 45 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)


state 197

    (120) casting -> LEFT_PAREN casting_type RIGHT_PAREN .

    STRING          reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    ID              reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    ARRAY           reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FUNCTION        reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FGETS           reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    NEW             reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    NAME            reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    INTEGER         reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FLOAT           reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    TRUE            reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FALSE           reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LOGICAL_NOT     reduce using rule 120 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)


state 198

    (50) arguments -> arguments DOT argument .

    DOT             reduce using rule 50 (arguments -> arguments DOT argument .)
    COMMA           reduce using rule 50 (arguments -> arguments DOT argument .)
    SEMICOLON       reduce using rule 50 (arguments -> arguments DOT argument .)
    RIGHT_PAREN     reduce using rule 50 (arguments -> arguments DOT argument .)


state 199

    (51) arguments -> arguments COMMA argument .

    DOT             reduce using rule 51 (arguments -> arguments COMMA argument .)
    COMMA           reduce using rule 51 (arguments -> arguments COMMA argument .)
    SEMICOLON       reduce using rule 51 (arguments -> arguments COMMA argument .)
    RIGHT_PAREN     reduce using rule 51 (arguments -> arguments COMMA argument .)


state 200

    (29) function_name -> variable .

    LEFT_PAREN      reduce using rule 29 (function_name -> variable .)


state 201

    (55) argument -> variable CALL function_call .

    DOT             reduce using rule 55 (argument -> variable CALL function_call .)
    COMMA           reduce using rule 55 (argument -> variable CALL function_call .)
    SEMICOLON       reduce using rule 55 (argument -> variable CALL function_call .)
    RIGHT_PAREN     reduce using rule 55 (argument -> variable CALL function_call .)
    RIGHT_BRACKET   reduce using rule 55 (argument -> variable CALL function_call .)


state 202

    (132) array_indexing -> variable LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 228


state 203

    (124) array -> ARRAY LEFT_PAREN array_elements . RIGHT_PAREN
    (127) array_elements -> array_elements . COMMA array_argument

    RIGHT_PAREN     shift and go to state 229
    COMMA           shift and go to state 205


state 204

    (125) array -> LEFT_BRACKET array_elements RIGHT_BRACKET .

    DOT             reduce using rule 125 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    COMMA           reduce using rule 125 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 125 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 125 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 125 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 205

    (127) array_elements -> array_elements COMMA . array_argument
    (128) array_argument -> . argument
    (129) array_argument -> . clave KEY_VALUE argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (130) clave -> . STRING
    (131) clave -> . INTEGER
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 147
    INTEGER         shift and go to state 148
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    array_argument                 shift and go to state 230
    argument                       shift and go to state 145
    clave                          shift and go to state 146
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 206

    (129) array_argument -> clave KEY_VALUE . argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    argument                       shift and go to state 231
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 207

    (23) anonymous_function -> FUNCTION LEFT_PAREN array_elements . RIGHT_PAREN block
    (127) array_elements -> array_elements . COMMA array_argument

    RIGHT_PAREN     shift and go to state 232
    COMMA           shift and go to state 205


state 208

    (24) anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN . block
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 233

state 209

    (146) object_creation -> NEW NAME LEFT_PAREN . RIGHT_PAREN
    (147) object_creation -> NEW NAME LEFT_PAREN . arguments RIGHT_PAREN
    (49) arguments -> . argument
    (50) arguments -> . arguments DOT argument
    (51) arguments -> . arguments COMMA argument
    (52) argument -> . STRING
    (53) argument -> . expression
    (54) argument -> . assignment_statement
    (55) argument -> . variable CALL function_call
    (56) argument -> . array
    (57) argument -> . function_call
    (58) argument -> . anonymous_function
    (59) argument -> . fgets_statement
    (60) argument -> . array_indexing
    (61) argument -> . casting argument
    (62) argument -> . object_creation
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . term
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME
    (124) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (125) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (26) function_call -> . function_name LEFT_PAREN arguments RIGHT_PAREN
    (27) function_call -> . function_name LEFT_PAREN RIGHT_PAREN
    (23) anonymous_function -> . FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block
    (24) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (30) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (132) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (120) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (146) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (147) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . factor
    (28) function_name -> . NAME
    (29) function_name -> . variable
    (69) factor -> . INTEGER
    (70) factor -> . FLOAT
    (71) factor -> . condition
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (96) condition -> . simple_condition
    (97) condition -> . negated_condition
    (98) condition -> . complex_condition
    (99) condition -> . parenthesized_condition
    (100) simple_condition -> . TRUE
    (101) simple_condition -> . FALSE
    (102) simple_condition -> . variable
    (103) simple_condition -> . relational_expression
    (104) negated_condition -> . LOGICAL_NOT condition
    (105) complex_condition -> . condition logical_operator condition
    (106) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (107) relational_expression -> . expression relational_operator expression

    RIGHT_PAREN     shift and go to state 234
    STRING          shift and go to state 67
    ID              shift and go to state 37
    ARRAY           shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    FUNCTION        shift and go to state 80
    FGETS           shift and go to state 30
    LEFT_PAREN      shift and go to state 96
    NEW             shift and go to state 81
    NAME            shift and go to state 26
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    LOGICAL_NOT     shift and go to state 55

    arguments                      shift and go to state 235
    argument                       shift and go to state 66
    expression                     shift and go to state 68
    assignment_statement           shift and go to state 69
    variable                       shift and go to state 70
    function_call                  shift and go to state 71
    array                          shift and go to state 72
    anonymous_function             shift and go to state 73
    fgets_statement                shift and go to state 74
    array_indexing                 shift and go to state 75
    casting                        shift and go to state 76
    object_creation                shift and go to state 77
    term                           shift and go to state 58
    function_name                  shift and go to state 32
    factor                         shift and go to state 59
    condition                      shift and go to state 82
    simple_condition               shift and go to state 46
    negated_condition              shift and go to state 47
    complex_condition              shift and go to state 48
    parenthesized_condition        shift and go to state 49
    relational_expression          shift and go to state 54

state 210

    (31) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA . STRING COMMA variable_list RIGHT_PAREN

    STRING          shift and go to state 236


state 211

    (30) fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 30 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    DOT             reduce using rule 30 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    COMMA           reduce using rule 30 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 30 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 30 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)


state 212

    (26) function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN .

    SEMICOLON       reduce using rule 26 (function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN .)
    DOT             reduce using rule 26 (function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 26 (function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 26 (function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 26 (function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN .)


state 213

    (82) for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .

    SEMICOLON       reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    TRUE            reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FALSE           reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LOGICAL_NOT     reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LEFT_PAREN      reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    ID              reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    INTEGER         reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FLOAT           reduce using rule 82 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)


state 214

    (91) assignment_list -> assignment_list COMMA . assignment_statement
    (36) assignment_statement -> . variable assignment_operator argument
    (37) assignment_statement -> . variable PLUS_PLUS
    (38) assignment_statement -> . variable MINUS_MINUS
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME

    ID              shift and go to state 37

    assignment_statement           shift and go to state 237
    variable                       shift and go to state 160

state 215

    (75) if_statement -> IF parenthesized_condition block else_if_extended if_part3 .

    CLOSE_TAG       reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ONE_LINE_COMMENT reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    MULTI_LINE_COMMENT reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    BREAK           reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    CONTINUE        reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    IF              reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    WHILE           reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FUNCTION        reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    CLASS           reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FSCANF          reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FGETS           reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    RETURN          reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FOR             reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    PRINT           reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ECHO            reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ID              reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    NAME            reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    RIGHT_BRACE     reduce using rule 75 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)


state 216

    (78) else_if_extended -> else_if_extended if_part2 .

    ELSE            reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    ELSEIF          reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    CLOSE_TAG       reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    ONE_LINE_COMMENT reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    MULTI_LINE_COMMENT reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    BREAK           reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    CONTINUE        reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    IF              reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    WHILE           reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    FUNCTION        reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    CLASS           reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    FSCANF          reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    FGETS           reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    RETURN          reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    FOR             reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    PRINT           reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    ECHO            reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    ID              reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    NAME            reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)
    RIGHT_BRACE     reduce using rule 78 (else_if_extended -> else_if_extended if_part2 .)


state 217

    (80) if_part3 -> ELSE block .

    CLOSE_TAG       reduce using rule 80 (if_part3 -> ELSE block .)
    ONE_LINE_COMMENT reduce using rule 80 (if_part3 -> ELSE block .)
    MULTI_LINE_COMMENT reduce using rule 80 (if_part3 -> ELSE block .)
    BREAK           reduce using rule 80 (if_part3 -> ELSE block .)
    CONTINUE        reduce using rule 80 (if_part3 -> ELSE block .)
    IF              reduce using rule 80 (if_part3 -> ELSE block .)
    WHILE           reduce using rule 80 (if_part3 -> ELSE block .)
    FUNCTION        reduce using rule 80 (if_part3 -> ELSE block .)
    CLASS           reduce using rule 80 (if_part3 -> ELSE block .)
    FSCANF          reduce using rule 80 (if_part3 -> ELSE block .)
    FGETS           reduce using rule 80 (if_part3 -> ELSE block .)
    RETURN          reduce using rule 80 (if_part3 -> ELSE block .)
    FOR             reduce using rule 80 (if_part3 -> ELSE block .)
    PRINT           reduce using rule 80 (if_part3 -> ELSE block .)
    ECHO            reduce using rule 80 (if_part3 -> ELSE block .)
    ID              reduce using rule 80 (if_part3 -> ELSE block .)
    NAME            reduce using rule 80 (if_part3 -> ELSE block .)
    RIGHT_BRACE     reduce using rule 80 (if_part3 -> ELSE block .)


state 218

    (79) if_part2 -> ELSEIF parenthesized_condition . block
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 238

state 219

    (94) block -> LEFT_BRACE statements RIGHT_BRACE .

    ELSE            reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ELSEIF          reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CLOSE_TAG       reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    BREAK           reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CONTINUE        reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    IF              reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    WHILE           reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CLASS           reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FSCANF          reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FGETS           reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RETURN          reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FOR             reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PRINT           reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ECHO            reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ID              reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    NAME            reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PUBLIC          reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PRIVATE         reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PROTECTED       reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    DOT             reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    COMMA           reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    SEMICOLON       reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 94 (block -> LEFT_BRACE statements RIGHT_BRACE .)


state 220

    (86) for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    IF              reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    CLASS           reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ID              reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    NAME            reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 86 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)


state 221

    (93) statement_list -> statement_list COMMA statement .

    RIGHT_PAREN     reduce using rule 93 (statement_list -> statement_list COMMA statement .)
    COMMA           reduce using rule 93 (statement_list -> statement_list COMMA statement .)


state 222

    (21) function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN . block
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 239

state 223

    (22) function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .

    CLOSE_TAG       reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    BREAK           reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    CONTINUE        reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    IF              reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    WHILE           reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FUNCTION        reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    CLASS           reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FSCANF          reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FGETS           reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    RETURN          reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FOR             reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PRINT           reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    ECHO            reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    ID              reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    NAME            reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PUBLIC          reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PRIVATE         reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PROTECTED       reduce using rule 22 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)


state 224

    (133) class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .

    CLOSE_TAG       reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    BREAK           reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    CONTINUE        reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    IF              reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    WHILE           reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    CLASS           reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FSCANF          reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FGETS           reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    RETURN          reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FOR             reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    PRINT           reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    ECHO            reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    ID              reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    NAME            reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 133 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)


state 225

    (136) class_statements -> class_statements class_statement .

    RIGHT_BRACE     reduce using rule 136 (class_statements -> class_statements class_statement .)
    ONE_LINE_COMMENT reduce using rule 136 (class_statements -> class_statements class_statement .)
    MULTI_LINE_COMMENT reduce using rule 136 (class_statements -> class_statements class_statement .)
    PUBLIC          reduce using rule 136 (class_statements -> class_statements class_statement .)
    PRIVATE         reduce using rule 136 (class_statements -> class_statements class_statement .)
    PROTECTED       reduce using rule 136 (class_statements -> class_statements class_statement .)


state 226

    (141) method_declaration -> visibility_operator function_statement .

    RIGHT_BRACE     reduce using rule 141 (method_declaration -> visibility_operator function_statement .)
    ONE_LINE_COMMENT reduce using rule 141 (method_declaration -> visibility_operator function_statement .)
    MULTI_LINE_COMMENT reduce using rule 141 (method_declaration -> visibility_operator function_statement .)
    PUBLIC          reduce using rule 141 (method_declaration -> visibility_operator function_statement .)
    PRIVATE         reduce using rule 141 (method_declaration -> visibility_operator function_statement .)
    PROTECTED       reduce using rule 141 (method_declaration -> visibility_operator function_statement .)


state 227

    (142) property_declaration -> visibility_operator variable . SEMICOLON

    SEMICOLON       shift and go to state 240


state 228

    (132) array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .

    DOT             reduce using rule 132 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 132 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 132 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 132 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 132 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 229

    (124) array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .

    DOT             reduce using rule 124 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    COMMA           reduce using rule 124 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    SEMICOLON       reduce using rule 124 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 124 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 124 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)


state 230

    (127) array_elements -> array_elements COMMA array_argument .

    RIGHT_BRACKET   reduce using rule 127 (array_elements -> array_elements COMMA array_argument .)
    COMMA           reduce using rule 127 (array_elements -> array_elements COMMA array_argument .)
    RIGHT_PAREN     reduce using rule 127 (array_elements -> array_elements COMMA array_argument .)


state 231

    (129) array_argument -> clave KEY_VALUE argument .

    RIGHT_BRACKET   reduce using rule 129 (array_argument -> clave KEY_VALUE argument .)
    COMMA           reduce using rule 129 (array_argument -> clave KEY_VALUE argument .)
    RIGHT_PAREN     reduce using rule 129 (array_argument -> clave KEY_VALUE argument .)


state 232

    (23) anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN . block
    (94) block -> . LEFT_BRACE statements RIGHT_BRACE
    (95) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 100

    block                          shift and go to state 241

state 233

    (24) anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .

    DOT             reduce using rule 24 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    COMMA           reduce using rule 24 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    SEMICOLON       reduce using rule 24 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    RIGHT_PAREN     reduce using rule 24 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    RIGHT_BRACKET   reduce using rule 24 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)


state 234

    (146) object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .

    DOT             reduce using rule 146 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 146 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 146 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 146 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 146 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)


state 235

    (147) object_creation -> NEW NAME LEFT_PAREN arguments . RIGHT_PAREN
    (50) arguments -> arguments . DOT argument
    (51) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 242
    DOT             shift and go to state 136
    COMMA           shift and go to state 137


state 236

    (31) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING . COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 243


state 237

    (91) assignment_list -> assignment_list COMMA assignment_statement .

    SEMICOLON       reduce using rule 91 (assignment_list -> assignment_list COMMA assignment_statement .)
    COMMA           reduce using rule 91 (assignment_list -> assignment_list COMMA assignment_statement .)


state 238

    (79) if_part2 -> ELSEIF parenthesized_condition block .

    ELSE            reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    ELSEIF          reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    CLOSE_TAG       reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    BREAK           reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    CONTINUE        reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    IF              reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    WHILE           reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    FUNCTION        reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    CLASS           reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    FSCANF          reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    FGETS           reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    RETURN          reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    FOR             reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    PRINT           reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    ECHO            reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    ID              reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    NAME            reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 79 (if_part2 -> ELSEIF parenthesized_condition block .)


state 239

    (21) function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .

    CLOSE_TAG       reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    BREAK           reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    CONTINUE        reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    IF              reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    WHILE           reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    FUNCTION        reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    CLASS           reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    FSCANF          reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    FGETS           reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    RETURN          reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    FOR             reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    PRINT           reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    ECHO            reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    ID              reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    NAME            reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    PUBLIC          reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    PRIVATE         reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)
    PROTECTED       reduce using rule 21 (function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block .)


state 240

    (142) property_declaration -> visibility_operator variable SEMICOLON .

    RIGHT_BRACE     reduce using rule 142 (property_declaration -> visibility_operator variable SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 142 (property_declaration -> visibility_operator variable SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 142 (property_declaration -> visibility_operator variable SEMICOLON .)
    PUBLIC          reduce using rule 142 (property_declaration -> visibility_operator variable SEMICOLON .)
    PRIVATE         reduce using rule 142 (property_declaration -> visibility_operator variable SEMICOLON .)
    PROTECTED       reduce using rule 142 (property_declaration -> visibility_operator variable SEMICOLON .)


state 241

    (23) anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block .

    DOT             reduce using rule 23 (anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block .)
    COMMA           reduce using rule 23 (anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block .)
    SEMICOLON       reduce using rule 23 (anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block .)
    RIGHT_PAREN     reduce using rule 23 (anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block .)
    RIGHT_BRACKET   reduce using rule 23 (anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block .)


state 242

    (147) object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .

    DOT             reduce using rule 147 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 147 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    SEMICOLON       reduce using rule 147 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 147 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 147 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)


state 243

    (31) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA . variable_list RIGHT_PAREN
    (32) variable_list -> . variable
    (33) variable_list -> . variable_list COMMA variable
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME

    ID              shift and go to state 37

    variable_list                  shift and go to state 244
    variable                       shift and go to state 245

state 244

    (31) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list . RIGHT_PAREN
    (33) variable_list -> variable_list . COMMA variable

    RIGHT_PAREN     shift and go to state 247
    COMMA           shift and go to state 246


state 245

    (32) variable_list -> variable .

    RIGHT_PAREN     reduce using rule 32 (variable_list -> variable .)
    COMMA           reduce using rule 32 (variable_list -> variable .)


state 246

    (33) variable_list -> variable_list COMMA . variable
    (34) variable -> . ID
    (35) variable -> . ID CALL NAME

    ID              shift and go to state 37

    variable                       shift and go to state 248

state 247

    (31) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .

    SEMICOLON       reduce using rule 31 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 31 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    COMMA           reduce using rule 31 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)


state 248

    (33) variable_list -> variable_list COMMA variable .

    RIGHT_PAREN     reduce using rule 33 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 33 (variable_list -> variable_list COMMA variable .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CALL in state 37 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 65 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 82 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 82 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 82 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 88 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 88 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 95 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 111 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 111 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 170 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 170 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 170 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 177 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 177 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 177 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL_TO in state 177 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 177 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 177 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 177 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 177 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL_TO in state 177 resolved as shift
WARNING: shift/reduce conflict for NOT_IDENTICAL_TO in state 177 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 177 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 179 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 179 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 180 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 180 resolved as shift
WARNING: reduce/reduce conflict in state 111 resolved using rule (factor -> condition)
WARNING: rejected rule (negated_condition -> LOGICAL_NOT condition) in state 111
WARNING: reduce/reduce conflict in state 170 resolved using rule (factor -> condition)
WARNING: rejected rule (complex_condition -> condition logical_operator condition) in state 170
WARNING: reduce/reduce conflict in state 179 resolved using rule (expression -> expression PLUS term)
WARNING: rejected rule (expression -> term) in state 179
WARNING: reduce/reduce conflict in state 180 resolved using rule (expression -> expression MINUS term)
WARNING: rejected rule (expression -> term) in state 180
WARNING: reduce/reduce conflict in state 181 resolved using rule (term -> term TIMES factor)
WARNING: rejected rule (term -> factor) in state 181
WARNING: reduce/reduce conflict in state 182 resolved using rule (term -> term DIVIDE factor)
WARNING: rejected rule (term -> factor) in state 182
