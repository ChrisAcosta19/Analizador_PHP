Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG statements CLOSE_TAG
Rule 2     program -> OPEN_TAG CLOSE_TAG
Rule 3     statements -> statement2
Rule 4     statements -> statements statement2
Rule 5     statement2 -> statement SEMICOLON
Rule 6     statement2 -> if_statement
Rule 7     statement2 -> while_statement
Rule 8     statement2 -> for_statement
Rule 9     statement2 -> function_statement
Rule 10    statement2 -> ONE_LINE_COMMENT
Rule 11    statement2 -> MULTI_LINE_COMMENT
Rule 12    statement2 -> class_declaration
Rule 13    statement -> print_statement
Rule 14    statement -> fscanf_statement
Rule 15    statement -> fgets_statement
Rule 16    statement -> assignment_statement
Rule 17    statement -> array_declaration_statement
Rule 18    statement -> BREAK
Rule 19    statement -> CONTINUE
Rule 20    statement -> function_call
Rule 21    statement -> return_statement
Rule 22    statement -> array_indexing
Rule 23    statement -> array_add_element
Rule 24    statement -> array_modify_element
Rule 25    statement -> array_remove_element
Rule 26    statement -> array_count_elements
Rule 27    statement -> expression
Rule 28    function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block
Rule 29    function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
Rule 30    anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
Rule 31    anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block
Rule 32    parameters -> parameter
Rule 33    parameters -> parameters COMMA parameter
Rule 34    parameter -> variable
Rule 35    parameter -> variable EQUALS argument
Rule 36    return_statement -> RETURN arguments
Rule 37    function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN
Rule 38    function_call -> NAME LEFT_PAREN RIGHT_PAREN
Rule 39    fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN
Rule 40    fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
Rule 41    variable_list -> variable
Rule 42    variable_list -> variable_list COMMA variable
Rule 43    variable -> ID
Rule 44    variable -> ID CALL NAME
Rule 45    assignment_statement -> variable assignment_operator argument
Rule 46    assignment_statement -> variable PLUS_PLUS
Rule 47    assignment_statement -> variable MINUS_MINUS
Rule 48    assignment_operator -> EQUALS
Rule 49    assignment_operator -> PLUS_EQUALS
Rule 50    assignment_operator -> MINUS_EQUALS
Rule 51    assignment_operator -> TIMES_EQUALS
Rule 52    assignment_operator -> DIVIDE_EQUALS
Rule 53    assignment_operator -> MOD_EQUALS
Rule 54    print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN
Rule 55    print_statement -> print_function arguments
Rule 56    print_function -> PRINT
Rule 57    print_function -> ECHO
Rule 58    arguments -> argument
Rule 59    arguments -> arguments DOT argument
Rule 60    arguments -> arguments COMMA argument
Rule 61    argument -> STRING
Rule 62    argument -> expression
Rule 63    argument -> array
Rule 64    argument -> array_indexing
Rule 65    argument -> function_call
Rule 66    argument -> ID CALL function_call
Rule 67    argument -> anonymous_function
Rule 68    argument -> assignment_statement
Rule 69    argument -> fgets_statement
Rule 70    argument -> object_creation
Rule 71    argument -> casting argument
Rule 72    expression -> expression PLUS term
Rule 73    expression -> expression MINUS term
Rule 74    expression -> term
Rule 75    term -> term TIMES factor
Rule 76    term -> term DIVIDE factor
Rule 77    term -> term MOD factor
Rule 78    term -> term POWER factor
Rule 79    term -> factor
Rule 80    factor -> INTEGER
Rule 81    factor -> FLOAT
Rule 82    factor -> condition
Rule 83    factor -> STRING
Rule 84    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 85    if_statement -> IF parenthesized_condition block
Rule 86    if_statement -> IF parenthesized_condition block else_if_extended
Rule 87    if_statement -> IF parenthesized_condition block else_if_extended if_part3
Rule 88    if_statement -> IF parenthesized_condition block if_part3
Rule 89    else_if_extended -> if_part2
Rule 90    else_if_extended -> else_if_extended if_part2
Rule 91    if_part2 -> ELSEIF parenthesized_condition block
Rule 92    if_part3 -> ELSE block
Rule 93    while_statement -> WHILE parenthesized_condition block
Rule 94    for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON
Rule 95    for_part1 -> FOR LEFT_PAREN SEMICOLON
Rule 96    for_statement -> for_part1 condition for_part3
Rule 97    for_statement -> for_part1 for_part3
Rule 98    for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4
Rule 99    for_part3 -> SEMICOLON RIGHT_PAREN for_part4
Rule 100   for_part4 -> block
Rule 101   for_part4 -> SEMICOLON
Rule 102   assignment_list -> assignment_statement
Rule 103   assignment_list -> assignment_list COMMA assignment_statement
Rule 104   statement_list -> statement
Rule 105   statement_list -> statement_list COMMA statement
Rule 106   block -> LEFT_BRACE statements RIGHT_BRACE
Rule 107   block -> LEFT_BRACE RIGHT_BRACE
Rule 108   condition -> simple_condition
Rule 109   condition -> negated_condition
Rule 110   condition -> complex_condition
Rule 111   condition -> parenthesized_condition
Rule 112   simple_condition -> TRUE
Rule 113   simple_condition -> FALSE
Rule 114   simple_condition -> variable
Rule 115   simple_condition -> relational_expression
Rule 116   negated_condition -> LOGICAL_NOT condition
Rule 117   complex_condition -> condition logical_operator condition
Rule 118   parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN
Rule 119   relational_expression -> expression relational_operator expression
Rule 120   relational_operator -> EQUAL_TO
Rule 121   relational_operator -> NOT_EQUAL_TO
Rule 122   relational_operator -> LESS_THAN
Rule 123   relational_operator -> GREATER_THAN
Rule 124   relational_operator -> LESS_EQUAL
Rule 125   relational_operator -> GREATER_EQUAL
Rule 126   relational_operator -> IDENTICAL_TO
Rule 127   relational_operator -> NOT_IDENTICAL_TO
Rule 128   relational_operator -> DIFFERENT
Rule 129   logical_operator -> LOGICAL_AND
Rule 130   logical_operator -> LOGICAL_OR
Rule 131   logical_operator -> LOGICAL_XOR
Rule 132   casting -> LEFT_PAREN casting_type RIGHT_PAREN
Rule 133   casting_type -> INT_TYPE
Rule 134   casting_type -> FLOAT_TYPE
Rule 135   array_declaration_statement -> variable EQUALS array
Rule 136   array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN
Rule 137   array -> LEFT_BRACKET array_elements RIGHT_BRACKET
Rule 138   array_elements -> array_argument
Rule 139   array_elements -> array_elements COMMA array_argument
Rule 140   array_argument -> argument
Rule 141   array_argument -> clave KEY_VALUE argument
Rule 142   clave -> STRING
Rule 143   clave -> INTEGER
Rule 144   array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET
Rule 145   array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument
Rule 146   array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
Rule 147   array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
Rule 148   array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN
Rule 149   class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
Rule 150   class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE
Rule 151   class_statements -> class_statement
Rule 152   class_statements -> class_statements class_statement
Rule 153   class_statement -> method_declaration
Rule 154   class_statement -> property_declaration
Rule 155   class_statement -> ONE_LINE_COMMENT
Rule 156   class_statement -> MULTI_LINE_COMMENT
Rule 157   method_declaration -> visibility_operator function_statement
Rule 158   property_declaration -> visibility_operator variable SEMICOLON
Rule 159   visibility_operator -> PUBLIC
Rule 160   visibility_operator -> PRIVATE
Rule 161   visibility_operator -> PROTECTED
Rule 162   object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN
Rule 163   object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN

Terminals, with rules where they appear

ARRAY                : 136
BREAK                : 18
CALL                 : 44 66
CLASS                : 149 150
CLOSE_TAG            : 1 2
COMMA                : 33 40 40 42 60 103 105 139
CONTINUE             : 19
COUNT                : 148
DIFFERENT            : 128
DIVIDE               : 76
DIVIDE_EQUALS        : 52
DOT                  : 59
ECHO                 : 57
ELSE                 : 92
ELSEIF               : 91
EQUALS               : 35 48 135 145 146
EQUAL_TO             : 120
FALSE                : 113
FGETS                : 39
FLOAT                : 81
FLOAT_TYPE           : 134
FOR                  : 94 95
FSCANF               : 40
FUNCTION             : 28 29 30 31
GREATER_EQUAL        : 125
GREATER_THAN         : 123
ID                   : 43 44 66
IDENTICAL_TO         : 126
IF                   : 85 86 87 88
INTEGER              : 80 143
INT_TYPE             : 133
KEY_VALUE            : 141
LEFT_BRACE           : 106 107 149 150
LEFT_BRACKET         : 137 144 145 146 147
LEFT_PAREN           : 28 29 30 31 37 38 39 40 54 84 94 95 118 132 136 147 148 162 163
LESS_EQUAL           : 124
LESS_THAN            : 122
LOGICAL_AND          : 129
LOGICAL_NOT          : 116
LOGICAL_OR           : 130
LOGICAL_XOR          : 131
MINUS                : 73
MINUS_EQUALS         : 50
MINUS_MINUS          : 47
MOD                  : 77
MOD_EQUALS           : 53
MULTI_LINE_COMMENT   : 11 156
NAME                 : 28 29 37 38 44 149 150 162 163
NEW                  : 162 163
NOT_EQUAL_TO         : 121
NOT_IDENTICAL_TO     : 127
ONE_LINE_COMMENT     : 10 155
OPEN_TAG             : 1 2
PLUS                 : 72
PLUS_EQUALS          : 49
PLUS_PLUS            : 46
POWER                : 78
PRINT                : 56
PRIVATE              : 160
PROTECTED            : 161
PUBLIC               : 159
RETURN               : 36
RIGHT_BRACE          : 106 107 149 150
RIGHT_BRACKET        : 137 144 145 146 147
RIGHT_PAREN          : 28 29 30 31 37 38 39 40 54 84 98 99 118 132 136 147 148 162 163
SEMICOLON            : 5 94 95 98 99 101 158
STDIN                : 39 40
STRING               : 40 61 83 142
TIMES                : 75
TIMES_EQUALS         : 51
TRUE                 : 112
UNSET                : 147
WHILE                : 93
error                : 

Nonterminals, with rules where they appear

anonymous_function   : 67
argument             : 35 45 58 59 60 71 140 141 145 146
arguments            : 36 37 54 55 59 60 163
array                : 63 135
array_add_element    : 23
array_argument       : 138 139
array_count_elements : 26
array_declaration_statement : 17
array_elements       : 136 137 139
array_indexing       : 22 64
array_modify_element : 24
array_remove_element : 25
assignment_list      : 94 103
assignment_operator  : 45
assignment_statement : 16 68 102 103
block                : 28 29 30 31 85 86 87 88 91 92 93 100
casting              : 71
casting_type         : 132
class_declaration    : 12
class_statement      : 151 152
class_statements     : 149 152
clave                : 141 144 146 147
complex_condition    : 110
condition            : 82 96 116 117 117 118
else_if_extended     : 86 87 90
expression           : 27 62 72 73 84 119 119
factor               : 75 76 77 78 79
fgets_statement      : 15 69
for_part1            : 96 97
for_part3            : 96 97
for_part4            : 98 99
for_statement        : 8
fscanf_statement     : 14
function_call        : 20 65 66
function_statement   : 9 157
if_part2             : 89 90
if_part3             : 87 88
if_statement         : 6
logical_operator     : 117
method_declaration   : 153
negated_condition    : 109
object_creation      : 70
parameter            : 32 33
parameters           : 28 30 33
parenthesized_condition : 85 86 87 88 91 93 111
print_function       : 54 55
print_statement      : 13
program              : 0
property_declaration : 154
relational_expression : 115
relational_operator  : 119
return_statement     : 21
simple_condition     : 108
statement            : 5 104 105
statement2           : 3 4
statement_list       : 98 105
statements           : 1 4 106
term                 : 72 73 74 75 76 77 78
variable             : 34 35 41 42 45 46 47 114 135 144 145 146 147 148 158
variable_list        : 40 42
visibility_operator  : 157 158
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG statements CLOSE_TAG
    (2) program -> . OPEN_TAG CLOSE_TAG

    OPEN_TAG        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . statements CLOSE_TAG
    (2) program -> OPEN_TAG . CLOSE_TAG
    (3) statements -> . statement2
    (4) statements -> . statements statement2
    (5) statement2 -> . statement SEMICOLON
    (6) statement2 -> . if_statement
    (7) statement2 -> . while_statement
    (8) statement2 -> . for_statement
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement2 -> . class_declaration
    (13) statement -> . print_statement
    (14) statement -> . fscanf_statement
    (15) statement -> . fgets_statement
    (16) statement -> . assignment_statement
    (17) statement -> . array_declaration_statement
    (18) statement -> . BREAK
    (19) statement -> . CONTINUE
    (20) statement -> . function_call
    (21) statement -> . return_statement
    (22) statement -> . array_indexing
    (23) statement -> . array_add_element
    (24) statement -> . array_modify_element
    (25) statement -> . array_remove_element
    (26) statement -> . array_count_elements
    (27) statement -> . expression
    (85) if_statement -> . IF parenthesized_condition block
    (86) if_statement -> . IF parenthesized_condition block else_if_extended
    (87) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (88) if_statement -> . IF parenthesized_condition block if_part3
    (93) while_statement -> . WHILE parenthesized_condition block
    (96) for_statement -> . for_part1 condition for_part3
    (97) for_statement -> . for_part1 for_part3
    (28) function_statement -> . FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block
    (29) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (149) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (150) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (54) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (55) print_statement -> . print_function arguments
    (40) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (135) array_declaration_statement -> . variable EQUALS array
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (36) return_statement -> . RETURN arguments
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (145) array_add_element -> . variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> . variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
    (147) array_remove_element -> . UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
    (148) array_count_elements -> . COUNT LEFT_PAREN variable RIGHT_PAREN
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (94) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (95) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (56) print_function -> . PRINT
    (57) print_function -> . ECHO
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    CLOSE_TAG       shift and go to state 4
    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FUNCTION        shift and go to state 34
    CLASS           shift and go to state 37
    FSCANF          shift and go to state 39
    FGETS           shift and go to state 41
    NAME            shift and go to state 35
    RETURN          shift and go to state 43
    UNSET           shift and go to state 44
    COUNT           shift and go to state 45
    FOR             shift and go to state 47
    PRINT           shift and go to state 48
    ECHO            shift and go to state 49
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    statements                     shift and go to state 3
    statement2                     shift and go to state 5
    statement                      shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    class_declaration              shift and go to state 13
    print_statement                shift and go to state 14
    fscanf_statement               shift and go to state 15
    fgets_statement                shift and go to state 16
    assignment_statement           shift and go to state 17
    array_declaration_statement    shift and go to state 18
    function_call                  shift and go to state 21
    return_statement               shift and go to state 22
    array_indexing                 shift and go to state 23
    array_add_element              shift and go to state 24
    array_modify_element           shift and go to state 25
    array_remove_element           shift and go to state 26
    array_count_elements           shift and go to state 27
    expression                     shift and go to state 28
    parenthesized_condition        shift and go to state 30
    for_part1                      shift and go to state 32
    condition                      shift and go to state 33
    print_function                 shift and go to state 38
    variable                       shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 51
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    relational_expression          shift and go to state 59

state 3

    (1) program -> OPEN_TAG statements . CLOSE_TAG
    (4) statements -> statements . statement2
    (5) statement2 -> . statement SEMICOLON
    (6) statement2 -> . if_statement
    (7) statement2 -> . while_statement
    (8) statement2 -> . for_statement
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement2 -> . class_declaration
    (13) statement -> . print_statement
    (14) statement -> . fscanf_statement
    (15) statement -> . fgets_statement
    (16) statement -> . assignment_statement
    (17) statement -> . array_declaration_statement
    (18) statement -> . BREAK
    (19) statement -> . CONTINUE
    (20) statement -> . function_call
    (21) statement -> . return_statement
    (22) statement -> . array_indexing
    (23) statement -> . array_add_element
    (24) statement -> . array_modify_element
    (25) statement -> . array_remove_element
    (26) statement -> . array_count_elements
    (27) statement -> . expression
    (85) if_statement -> . IF parenthesized_condition block
    (86) if_statement -> . IF parenthesized_condition block else_if_extended
    (87) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (88) if_statement -> . IF parenthesized_condition block if_part3
    (93) while_statement -> . WHILE parenthesized_condition block
    (96) for_statement -> . for_part1 condition for_part3
    (97) for_statement -> . for_part1 for_part3
    (28) function_statement -> . FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block
    (29) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (149) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (150) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (54) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (55) print_statement -> . print_function arguments
    (40) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (135) array_declaration_statement -> . variable EQUALS array
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (36) return_statement -> . RETURN arguments
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (145) array_add_element -> . variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> . variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
    (147) array_remove_element -> . UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
    (148) array_count_elements -> . COUNT LEFT_PAREN variable RIGHT_PAREN
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (94) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (95) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (56) print_function -> . PRINT
    (57) print_function -> . ECHO
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    CLOSE_TAG       shift and go to state 61
    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FUNCTION        shift and go to state 34
    CLASS           shift and go to state 37
    FSCANF          shift and go to state 39
    FGETS           shift and go to state 41
    NAME            shift and go to state 35
    RETURN          shift and go to state 43
    UNSET           shift and go to state 44
    COUNT           shift and go to state 45
    FOR             shift and go to state 47
    PRINT           shift and go to state 48
    ECHO            shift and go to state 49
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    statement2                     shift and go to state 62
    statement                      shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    class_declaration              shift and go to state 13
    print_statement                shift and go to state 14
    fscanf_statement               shift and go to state 15
    fgets_statement                shift and go to state 16
    assignment_statement           shift and go to state 17
    array_declaration_statement    shift and go to state 18
    function_call                  shift and go to state 21
    return_statement               shift and go to state 22
    array_indexing                 shift and go to state 23
    array_add_element              shift and go to state 24
    array_modify_element           shift and go to state 25
    array_remove_element           shift and go to state 26
    array_count_elements           shift and go to state 27
    expression                     shift and go to state 28
    parenthesized_condition        shift and go to state 30
    for_part1                      shift and go to state 32
    condition                      shift and go to state 33
    print_function                 shift and go to state 38
    variable                       shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 51
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    relational_expression          shift and go to state 59

state 4

    (2) program -> OPEN_TAG CLOSE_TAG .

    $end            reduce using rule 2 (program -> OPEN_TAG CLOSE_TAG .)


state 5

    (3) statements -> statement2 .

    CLOSE_TAG       reduce using rule 3 (statements -> statement2 .)
    ONE_LINE_COMMENT reduce using rule 3 (statements -> statement2 .)
    MULTI_LINE_COMMENT reduce using rule 3 (statements -> statement2 .)
    BREAK           reduce using rule 3 (statements -> statement2 .)
    CONTINUE        reduce using rule 3 (statements -> statement2 .)
    IF              reduce using rule 3 (statements -> statement2 .)
    WHILE           reduce using rule 3 (statements -> statement2 .)
    FUNCTION        reduce using rule 3 (statements -> statement2 .)
    CLASS           reduce using rule 3 (statements -> statement2 .)
    FSCANF          reduce using rule 3 (statements -> statement2 .)
    FGETS           reduce using rule 3 (statements -> statement2 .)
    NAME            reduce using rule 3 (statements -> statement2 .)
    RETURN          reduce using rule 3 (statements -> statement2 .)
    UNSET           reduce using rule 3 (statements -> statement2 .)
    COUNT           reduce using rule 3 (statements -> statement2 .)
    FOR             reduce using rule 3 (statements -> statement2 .)
    PRINT           reduce using rule 3 (statements -> statement2 .)
    ECHO            reduce using rule 3 (statements -> statement2 .)
    ID              reduce using rule 3 (statements -> statement2 .)
    INTEGER         reduce using rule 3 (statements -> statement2 .)
    FLOAT           reduce using rule 3 (statements -> statement2 .)
    STRING          reduce using rule 3 (statements -> statement2 .)
    LEFT_PAREN      reduce using rule 3 (statements -> statement2 .)
    TRUE            reduce using rule 3 (statements -> statement2 .)
    FALSE           reduce using rule 3 (statements -> statement2 .)
    LOGICAL_NOT     reduce using rule 3 (statements -> statement2 .)
    RIGHT_BRACE     reduce using rule 3 (statements -> statement2 .)


state 6

    (5) statement2 -> statement . SEMICOLON

    SEMICOLON       shift and go to state 63


state 7

    (6) statement2 -> if_statement .

    CLOSE_TAG       reduce using rule 6 (statement2 -> if_statement .)
    ONE_LINE_COMMENT reduce using rule 6 (statement2 -> if_statement .)
    MULTI_LINE_COMMENT reduce using rule 6 (statement2 -> if_statement .)
    BREAK           reduce using rule 6 (statement2 -> if_statement .)
    CONTINUE        reduce using rule 6 (statement2 -> if_statement .)
    IF              reduce using rule 6 (statement2 -> if_statement .)
    WHILE           reduce using rule 6 (statement2 -> if_statement .)
    FUNCTION        reduce using rule 6 (statement2 -> if_statement .)
    CLASS           reduce using rule 6 (statement2 -> if_statement .)
    FSCANF          reduce using rule 6 (statement2 -> if_statement .)
    FGETS           reduce using rule 6 (statement2 -> if_statement .)
    NAME            reduce using rule 6 (statement2 -> if_statement .)
    RETURN          reduce using rule 6 (statement2 -> if_statement .)
    UNSET           reduce using rule 6 (statement2 -> if_statement .)
    COUNT           reduce using rule 6 (statement2 -> if_statement .)
    FOR             reduce using rule 6 (statement2 -> if_statement .)
    PRINT           reduce using rule 6 (statement2 -> if_statement .)
    ECHO            reduce using rule 6 (statement2 -> if_statement .)
    ID              reduce using rule 6 (statement2 -> if_statement .)
    INTEGER         reduce using rule 6 (statement2 -> if_statement .)
    FLOAT           reduce using rule 6 (statement2 -> if_statement .)
    STRING          reduce using rule 6 (statement2 -> if_statement .)
    LEFT_PAREN      reduce using rule 6 (statement2 -> if_statement .)
    TRUE            reduce using rule 6 (statement2 -> if_statement .)
    FALSE           reduce using rule 6 (statement2 -> if_statement .)
    LOGICAL_NOT     reduce using rule 6 (statement2 -> if_statement .)
    RIGHT_BRACE     reduce using rule 6 (statement2 -> if_statement .)


state 8

    (7) statement2 -> while_statement .

    CLOSE_TAG       reduce using rule 7 (statement2 -> while_statement .)
    ONE_LINE_COMMENT reduce using rule 7 (statement2 -> while_statement .)
    MULTI_LINE_COMMENT reduce using rule 7 (statement2 -> while_statement .)
    BREAK           reduce using rule 7 (statement2 -> while_statement .)
    CONTINUE        reduce using rule 7 (statement2 -> while_statement .)
    IF              reduce using rule 7 (statement2 -> while_statement .)
    WHILE           reduce using rule 7 (statement2 -> while_statement .)
    FUNCTION        reduce using rule 7 (statement2 -> while_statement .)
    CLASS           reduce using rule 7 (statement2 -> while_statement .)
    FSCANF          reduce using rule 7 (statement2 -> while_statement .)
    FGETS           reduce using rule 7 (statement2 -> while_statement .)
    NAME            reduce using rule 7 (statement2 -> while_statement .)
    RETURN          reduce using rule 7 (statement2 -> while_statement .)
    UNSET           reduce using rule 7 (statement2 -> while_statement .)
    COUNT           reduce using rule 7 (statement2 -> while_statement .)
    FOR             reduce using rule 7 (statement2 -> while_statement .)
    PRINT           reduce using rule 7 (statement2 -> while_statement .)
    ECHO            reduce using rule 7 (statement2 -> while_statement .)
    ID              reduce using rule 7 (statement2 -> while_statement .)
    INTEGER         reduce using rule 7 (statement2 -> while_statement .)
    FLOAT           reduce using rule 7 (statement2 -> while_statement .)
    STRING          reduce using rule 7 (statement2 -> while_statement .)
    LEFT_PAREN      reduce using rule 7 (statement2 -> while_statement .)
    TRUE            reduce using rule 7 (statement2 -> while_statement .)
    FALSE           reduce using rule 7 (statement2 -> while_statement .)
    LOGICAL_NOT     reduce using rule 7 (statement2 -> while_statement .)
    RIGHT_BRACE     reduce using rule 7 (statement2 -> while_statement .)


state 9

    (8) statement2 -> for_statement .

    CLOSE_TAG       reduce using rule 8 (statement2 -> for_statement .)
    ONE_LINE_COMMENT reduce using rule 8 (statement2 -> for_statement .)
    MULTI_LINE_COMMENT reduce using rule 8 (statement2 -> for_statement .)
    BREAK           reduce using rule 8 (statement2 -> for_statement .)
    CONTINUE        reduce using rule 8 (statement2 -> for_statement .)
    IF              reduce using rule 8 (statement2 -> for_statement .)
    WHILE           reduce using rule 8 (statement2 -> for_statement .)
    FUNCTION        reduce using rule 8 (statement2 -> for_statement .)
    CLASS           reduce using rule 8 (statement2 -> for_statement .)
    FSCANF          reduce using rule 8 (statement2 -> for_statement .)
    FGETS           reduce using rule 8 (statement2 -> for_statement .)
    NAME            reduce using rule 8 (statement2 -> for_statement .)
    RETURN          reduce using rule 8 (statement2 -> for_statement .)
    UNSET           reduce using rule 8 (statement2 -> for_statement .)
    COUNT           reduce using rule 8 (statement2 -> for_statement .)
    FOR             reduce using rule 8 (statement2 -> for_statement .)
    PRINT           reduce using rule 8 (statement2 -> for_statement .)
    ECHO            reduce using rule 8 (statement2 -> for_statement .)
    ID              reduce using rule 8 (statement2 -> for_statement .)
    INTEGER         reduce using rule 8 (statement2 -> for_statement .)
    FLOAT           reduce using rule 8 (statement2 -> for_statement .)
    STRING          reduce using rule 8 (statement2 -> for_statement .)
    LEFT_PAREN      reduce using rule 8 (statement2 -> for_statement .)
    TRUE            reduce using rule 8 (statement2 -> for_statement .)
    FALSE           reduce using rule 8 (statement2 -> for_statement .)
    LOGICAL_NOT     reduce using rule 8 (statement2 -> for_statement .)
    RIGHT_BRACE     reduce using rule 8 (statement2 -> for_statement .)


state 10

    (9) statement2 -> function_statement .

    CLOSE_TAG       reduce using rule 9 (statement2 -> function_statement .)
    ONE_LINE_COMMENT reduce using rule 9 (statement2 -> function_statement .)
    MULTI_LINE_COMMENT reduce using rule 9 (statement2 -> function_statement .)
    BREAK           reduce using rule 9 (statement2 -> function_statement .)
    CONTINUE        reduce using rule 9 (statement2 -> function_statement .)
    IF              reduce using rule 9 (statement2 -> function_statement .)
    WHILE           reduce using rule 9 (statement2 -> function_statement .)
    FUNCTION        reduce using rule 9 (statement2 -> function_statement .)
    CLASS           reduce using rule 9 (statement2 -> function_statement .)
    FSCANF          reduce using rule 9 (statement2 -> function_statement .)
    FGETS           reduce using rule 9 (statement2 -> function_statement .)
    NAME            reduce using rule 9 (statement2 -> function_statement .)
    RETURN          reduce using rule 9 (statement2 -> function_statement .)
    UNSET           reduce using rule 9 (statement2 -> function_statement .)
    COUNT           reduce using rule 9 (statement2 -> function_statement .)
    FOR             reduce using rule 9 (statement2 -> function_statement .)
    PRINT           reduce using rule 9 (statement2 -> function_statement .)
    ECHO            reduce using rule 9 (statement2 -> function_statement .)
    ID              reduce using rule 9 (statement2 -> function_statement .)
    INTEGER         reduce using rule 9 (statement2 -> function_statement .)
    FLOAT           reduce using rule 9 (statement2 -> function_statement .)
    STRING          reduce using rule 9 (statement2 -> function_statement .)
    LEFT_PAREN      reduce using rule 9 (statement2 -> function_statement .)
    TRUE            reduce using rule 9 (statement2 -> function_statement .)
    FALSE           reduce using rule 9 (statement2 -> function_statement .)
    LOGICAL_NOT     reduce using rule 9 (statement2 -> function_statement .)
    RIGHT_BRACE     reduce using rule 9 (statement2 -> function_statement .)


state 11

    (10) statement2 -> ONE_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    BREAK           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    CONTINUE        reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    IF              reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    WHILE           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FUNCTION        reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    CLASS           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FSCANF          reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FGETS           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    NAME            reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    RETURN          reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    UNSET           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    COUNT           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FOR             reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    PRINT           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    ECHO            reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    ID              reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    INTEGER         reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FLOAT           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    STRING          reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    LEFT_PAREN      reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    TRUE            reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    FALSE           reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    LOGICAL_NOT     reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 10 (statement2 -> ONE_LINE_COMMENT .)


state 12

    (11) statement2 -> MULTI_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    BREAK           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    CONTINUE        reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    IF              reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    WHILE           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FUNCTION        reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    CLASS           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FSCANF          reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FGETS           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    NAME            reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    RETURN          reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    UNSET           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    COUNT           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FOR             reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    PRINT           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    ECHO            reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    ID              reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    INTEGER         reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FLOAT           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    STRING          reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    LEFT_PAREN      reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    TRUE            reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    FALSE           reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    LOGICAL_NOT     reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 11 (statement2 -> MULTI_LINE_COMMENT .)


state 13

    (12) statement2 -> class_declaration .

    CLOSE_TAG       reduce using rule 12 (statement2 -> class_declaration .)
    ONE_LINE_COMMENT reduce using rule 12 (statement2 -> class_declaration .)
    MULTI_LINE_COMMENT reduce using rule 12 (statement2 -> class_declaration .)
    BREAK           reduce using rule 12 (statement2 -> class_declaration .)
    CONTINUE        reduce using rule 12 (statement2 -> class_declaration .)
    IF              reduce using rule 12 (statement2 -> class_declaration .)
    WHILE           reduce using rule 12 (statement2 -> class_declaration .)
    FUNCTION        reduce using rule 12 (statement2 -> class_declaration .)
    CLASS           reduce using rule 12 (statement2 -> class_declaration .)
    FSCANF          reduce using rule 12 (statement2 -> class_declaration .)
    FGETS           reduce using rule 12 (statement2 -> class_declaration .)
    NAME            reduce using rule 12 (statement2 -> class_declaration .)
    RETURN          reduce using rule 12 (statement2 -> class_declaration .)
    UNSET           reduce using rule 12 (statement2 -> class_declaration .)
    COUNT           reduce using rule 12 (statement2 -> class_declaration .)
    FOR             reduce using rule 12 (statement2 -> class_declaration .)
    PRINT           reduce using rule 12 (statement2 -> class_declaration .)
    ECHO            reduce using rule 12 (statement2 -> class_declaration .)
    ID              reduce using rule 12 (statement2 -> class_declaration .)
    INTEGER         reduce using rule 12 (statement2 -> class_declaration .)
    FLOAT           reduce using rule 12 (statement2 -> class_declaration .)
    STRING          reduce using rule 12 (statement2 -> class_declaration .)
    LEFT_PAREN      reduce using rule 12 (statement2 -> class_declaration .)
    TRUE            reduce using rule 12 (statement2 -> class_declaration .)
    FALSE           reduce using rule 12 (statement2 -> class_declaration .)
    LOGICAL_NOT     reduce using rule 12 (statement2 -> class_declaration .)
    RIGHT_BRACE     reduce using rule 12 (statement2 -> class_declaration .)


state 14

    (13) statement -> print_statement .

    SEMICOLON       reduce using rule 13 (statement -> print_statement .)
    RIGHT_PAREN     reduce using rule 13 (statement -> print_statement .)
    COMMA           reduce using rule 13 (statement -> print_statement .)


state 15

    (14) statement -> fscanf_statement .

    SEMICOLON       reduce using rule 14 (statement -> fscanf_statement .)
    RIGHT_PAREN     reduce using rule 14 (statement -> fscanf_statement .)
    COMMA           reduce using rule 14 (statement -> fscanf_statement .)


state 16

    (15) statement -> fgets_statement .

    SEMICOLON       reduce using rule 15 (statement -> fgets_statement .)
    RIGHT_PAREN     reduce using rule 15 (statement -> fgets_statement .)
    COMMA           reduce using rule 15 (statement -> fgets_statement .)


state 17

    (16) statement -> assignment_statement .

    SEMICOLON       reduce using rule 16 (statement -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 16 (statement -> assignment_statement .)
    COMMA           reduce using rule 16 (statement -> assignment_statement .)


state 18

    (17) statement -> array_declaration_statement .

    SEMICOLON       reduce using rule 17 (statement -> array_declaration_statement .)
    RIGHT_PAREN     reduce using rule 17 (statement -> array_declaration_statement .)
    COMMA           reduce using rule 17 (statement -> array_declaration_statement .)


state 19

    (18) statement -> BREAK .

    SEMICOLON       reduce using rule 18 (statement -> BREAK .)
    RIGHT_PAREN     reduce using rule 18 (statement -> BREAK .)
    COMMA           reduce using rule 18 (statement -> BREAK .)


state 20

    (19) statement -> CONTINUE .

    SEMICOLON       reduce using rule 19 (statement -> CONTINUE .)
    RIGHT_PAREN     reduce using rule 19 (statement -> CONTINUE .)
    COMMA           reduce using rule 19 (statement -> CONTINUE .)


state 21

    (20) statement -> function_call .

    SEMICOLON       reduce using rule 20 (statement -> function_call .)
    RIGHT_PAREN     reduce using rule 20 (statement -> function_call .)
    COMMA           reduce using rule 20 (statement -> function_call .)


state 22

    (21) statement -> return_statement .

    SEMICOLON       reduce using rule 21 (statement -> return_statement .)
    RIGHT_PAREN     reduce using rule 21 (statement -> return_statement .)
    COMMA           reduce using rule 21 (statement -> return_statement .)


state 23

    (22) statement -> array_indexing .

    SEMICOLON       reduce using rule 22 (statement -> array_indexing .)
    RIGHT_PAREN     reduce using rule 22 (statement -> array_indexing .)
    COMMA           reduce using rule 22 (statement -> array_indexing .)


state 24

    (23) statement -> array_add_element .

    SEMICOLON       reduce using rule 23 (statement -> array_add_element .)
    RIGHT_PAREN     reduce using rule 23 (statement -> array_add_element .)
    COMMA           reduce using rule 23 (statement -> array_add_element .)


state 25

    (24) statement -> array_modify_element .

    SEMICOLON       reduce using rule 24 (statement -> array_modify_element .)
    RIGHT_PAREN     reduce using rule 24 (statement -> array_modify_element .)
    COMMA           reduce using rule 24 (statement -> array_modify_element .)


state 26

    (25) statement -> array_remove_element .

    SEMICOLON       reduce using rule 25 (statement -> array_remove_element .)
    RIGHT_PAREN     reduce using rule 25 (statement -> array_remove_element .)
    COMMA           reduce using rule 25 (statement -> array_remove_element .)


state 27

    (26) statement -> array_count_elements .

    SEMICOLON       reduce using rule 26 (statement -> array_count_elements .)
    RIGHT_PAREN     reduce using rule 26 (statement -> array_count_elements .)
    COMMA           reduce using rule 26 (statement -> array_count_elements .)


state 28

    (27) statement -> expression .
    (72) expression -> expression . PLUS term
    (73) expression -> expression . MINUS term
    (119) relational_expression -> expression . relational_operator expression
    (120) relational_operator -> . EQUAL_TO
    (121) relational_operator -> . NOT_EQUAL_TO
    (122) relational_operator -> . LESS_THAN
    (123) relational_operator -> . GREATER_THAN
    (124) relational_operator -> . LESS_EQUAL
    (125) relational_operator -> . GREATER_EQUAL
    (126) relational_operator -> . IDENTICAL_TO
    (127) relational_operator -> . NOT_IDENTICAL_TO
    (128) relational_operator -> . DIFFERENT

    SEMICOLON       reduce using rule 27 (statement -> expression .)
    RIGHT_PAREN     reduce using rule 27 (statement -> expression .)
    COMMA           reduce using rule 27 (statement -> expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    EQUAL_TO        shift and go to state 67
    NOT_EQUAL_TO    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_EQUAL      shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    IDENTICAL_TO    shift and go to state 73
    NOT_IDENTICAL_TO shift and go to state 74
    DIFFERENT       shift and go to state 75

    relational_operator            shift and go to state 66

state 29

    (85) if_statement -> IF . parenthesized_condition block
    (86) if_statement -> IF . parenthesized_condition block else_if_extended
    (87) if_statement -> IF . parenthesized_condition block else_if_extended if_part3
    (88) if_statement -> IF . parenthesized_condition block if_part3
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 77

    parenthesized_condition        shift and go to state 76

state 30

    (111) condition -> parenthesized_condition .

    LOGICAL_AND     reduce using rule 111 (condition -> parenthesized_condition .)
    LOGICAL_OR      reduce using rule 111 (condition -> parenthesized_condition .)
    LOGICAL_XOR     reduce using rule 111 (condition -> parenthesized_condition .)
    TIMES           reduce using rule 111 (condition -> parenthesized_condition .)
    DIVIDE          reduce using rule 111 (condition -> parenthesized_condition .)
    MOD             reduce using rule 111 (condition -> parenthesized_condition .)
    POWER           reduce using rule 111 (condition -> parenthesized_condition .)
    PLUS            reduce using rule 111 (condition -> parenthesized_condition .)
    MINUS           reduce using rule 111 (condition -> parenthesized_condition .)
    EQUAL_TO        reduce using rule 111 (condition -> parenthesized_condition .)
    NOT_EQUAL_TO    reduce using rule 111 (condition -> parenthesized_condition .)
    LESS_THAN       reduce using rule 111 (condition -> parenthesized_condition .)
    GREATER_THAN    reduce using rule 111 (condition -> parenthesized_condition .)
    LESS_EQUAL      reduce using rule 111 (condition -> parenthesized_condition .)
    GREATER_EQUAL   reduce using rule 111 (condition -> parenthesized_condition .)
    IDENTICAL_TO    reduce using rule 111 (condition -> parenthesized_condition .)
    NOT_IDENTICAL_TO reduce using rule 111 (condition -> parenthesized_condition .)
    DIFFERENT       reduce using rule 111 (condition -> parenthesized_condition .)
    SEMICOLON       reduce using rule 111 (condition -> parenthesized_condition .)
    RIGHT_PAREN     reduce using rule 111 (condition -> parenthesized_condition .)
    DOT             reduce using rule 111 (condition -> parenthesized_condition .)
    COMMA           reduce using rule 111 (condition -> parenthesized_condition .)
    RIGHT_BRACKET   reduce using rule 111 (condition -> parenthesized_condition .)


state 31

    (93) while_statement -> WHILE . parenthesized_condition block
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 77

    parenthesized_condition        shift and go to state 78

state 32

    (96) for_statement -> for_part1 . condition for_part3
    (97) for_statement -> for_part1 . for_part3
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (98) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (99) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN

    SEMICOLON       shift and go to state 81
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40

    condition                      shift and go to state 79
    for_part3                      shift and go to state 80
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59
    expression                     shift and go to state 84
    term                           shift and go to state 46
    factor                         shift and go to state 51

state 33

    (82) factor -> condition .
    (117) complex_condition -> condition . logical_operator condition
    (129) logical_operator -> . LOGICAL_AND
    (130) logical_operator -> . LOGICAL_OR
    (131) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    TIMES           reduce using rule 82 (factor -> condition .)
    DIVIDE          reduce using rule 82 (factor -> condition .)
    MOD             reduce using rule 82 (factor -> condition .)
    POWER           reduce using rule 82 (factor -> condition .)
    PLUS            reduce using rule 82 (factor -> condition .)
    MINUS           reduce using rule 82 (factor -> condition .)
    EQUAL_TO        reduce using rule 82 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 82 (factor -> condition .)
    LESS_THAN       reduce using rule 82 (factor -> condition .)
    GREATER_THAN    reduce using rule 82 (factor -> condition .)
    LESS_EQUAL      reduce using rule 82 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 82 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 82 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 82 (factor -> condition .)
    DIFFERENT       reduce using rule 82 (factor -> condition .)
    SEMICOLON       reduce using rule 82 (factor -> condition .)
    DOT             reduce using rule 82 (factor -> condition .)
    COMMA           reduce using rule 82 (factor -> condition .)
    RIGHT_PAREN     reduce using rule 82 (factor -> condition .)
    RIGHT_BRACKET   reduce using rule 82 (factor -> condition .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 87
    LOGICAL_XOR     shift and go to state 88

  ! LOGICAL_AND     [ reduce using rule 82 (factor -> condition .) ]
  ! LOGICAL_OR      [ reduce using rule 82 (factor -> condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 82 (factor -> condition .) ]

    logical_operator               shift and go to state 85

state 34

    (28) function_statement -> FUNCTION . NAME LEFT_PAREN parameters RIGHT_PAREN block
    (29) function_statement -> FUNCTION . NAME LEFT_PAREN RIGHT_PAREN block

    NAME            shift and go to state 89


state 35

    (37) function_call -> NAME . LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> NAME . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 90


state 36

    (84) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (118) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    ID              shift and go to state 50

    expression                     shift and go to state 91
    condition                      shift and go to state 92
    term                           shift and go to state 46
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    factor                         shift and go to state 51
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 37

    (149) class_declaration -> CLASS . NAME LEFT_BRACE class_statements RIGHT_BRACE
    (150) class_declaration -> CLASS . NAME LEFT_BRACE RIGHT_BRACE

    NAME            shift and go to state 93


state 38

    (54) print_statement -> print_function . LEFT_PAREN arguments RIGHT_PAREN
    (55) print_statement -> print_function . arguments
    (58) arguments -> . argument
    (59) arguments -> . arguments DOT argument
    (60) arguments -> . arguments COMMA argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    LEFT_PAREN      shift and go to state 94
    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    arguments                      shift and go to state 95
    argument                       shift and go to state 96
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 39

    (40) fscanf_statement -> FSCANF . LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 113


state 40

    (83) factor -> STRING .

    TIMES           reduce using rule 83 (factor -> STRING .)
    DIVIDE          reduce using rule 83 (factor -> STRING .)
    MOD             reduce using rule 83 (factor -> STRING .)
    POWER           reduce using rule 83 (factor -> STRING .)
    PLUS            reduce using rule 83 (factor -> STRING .)
    MINUS           reduce using rule 83 (factor -> STRING .)
    EQUAL_TO        reduce using rule 83 (factor -> STRING .)
    NOT_EQUAL_TO    reduce using rule 83 (factor -> STRING .)
    LESS_THAN       reduce using rule 83 (factor -> STRING .)
    GREATER_THAN    reduce using rule 83 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 83 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 83 (factor -> STRING .)
    IDENTICAL_TO    reduce using rule 83 (factor -> STRING .)
    NOT_IDENTICAL_TO reduce using rule 83 (factor -> STRING .)
    DIFFERENT       reduce using rule 83 (factor -> STRING .)
    SEMICOLON       reduce using rule 83 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 83 (factor -> STRING .)
    LOGICAL_AND     reduce using rule 83 (factor -> STRING .)
    LOGICAL_OR      reduce using rule 83 (factor -> STRING .)
    LOGICAL_XOR     reduce using rule 83 (factor -> STRING .)
    DOT             reduce using rule 83 (factor -> STRING .)
    COMMA           reduce using rule 83 (factor -> STRING .)
    RIGHT_BRACKET   reduce using rule 83 (factor -> STRING .)


state 41

    (39) fgets_statement -> FGETS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 114


state 42

    (45) assignment_statement -> variable . assignment_operator argument
    (46) assignment_statement -> variable . PLUS_PLUS
    (47) assignment_statement -> variable . MINUS_MINUS
    (135) array_declaration_statement -> variable . EQUALS array
    (144) array_indexing -> variable . LEFT_BRACKET clave RIGHT_BRACKET
    (145) array_add_element -> variable . LEFT_BRACKET RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> variable . LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
    (114) simple_condition -> variable .
    (48) assignment_operator -> . EQUALS
    (49) assignment_operator -> . PLUS_EQUALS
    (50) assignment_operator -> . MINUS_EQUALS
    (51) assignment_operator -> . TIMES_EQUALS
    (52) assignment_operator -> . DIVIDE_EQUALS
    (53) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 116
    MINUS_MINUS     shift and go to state 117
    EQUALS          shift and go to state 118
    LEFT_BRACKET    shift and go to state 119
    LOGICAL_AND     reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 114 (simple_condition -> variable .)
    TIMES           reduce using rule 114 (simple_condition -> variable .)
    DIVIDE          reduce using rule 114 (simple_condition -> variable .)
    MOD             reduce using rule 114 (simple_condition -> variable .)
    POWER           reduce using rule 114 (simple_condition -> variable .)
    PLUS            reduce using rule 114 (simple_condition -> variable .)
    MINUS           reduce using rule 114 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 114 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 114 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 114 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 114 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 114 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 114 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 114 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 114 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 114 (simple_condition -> variable .)
    SEMICOLON       reduce using rule 114 (simple_condition -> variable .)
    RIGHT_PAREN     reduce using rule 114 (simple_condition -> variable .)
    COMMA           reduce using rule 114 (simple_condition -> variable .)
    PLUS_EQUALS     shift and go to state 120
    MINUS_EQUALS    shift and go to state 121
    TIMES_EQUALS    shift and go to state 122
    DIVIDE_EQUALS   shift and go to state 123
    MOD_EQUALS      shift and go to state 124

    assignment_operator            shift and go to state 115

state 43

    (36) return_statement -> RETURN . arguments
    (58) arguments -> . argument
    (59) arguments -> . arguments DOT argument
    (60) arguments -> . arguments COMMA argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    arguments                      shift and go to state 125
    argument                       shift and go to state 96
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 44

    (147) array_remove_element -> UNSET . LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN

    LEFT_PAREN      shift and go to state 127


state 45

    (148) array_count_elements -> COUNT . LEFT_PAREN variable RIGHT_PAREN

    LEFT_PAREN      shift and go to state 128


state 46

    (74) expression -> term .
    (75) term -> term . TIMES factor
    (76) term -> term . DIVIDE factor
    (77) term -> term . MOD factor
    (78) term -> term . POWER factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
    PLUS            reduce using rule 74 (expression -> term .)
    MINUS           reduce using rule 74 (expression -> term .)
    EQUAL_TO        reduce using rule 74 (expression -> term .)
    NOT_EQUAL_TO    reduce using rule 74 (expression -> term .)
    LESS_THAN       reduce using rule 74 (expression -> term .)
    GREATER_THAN    reduce using rule 74 (expression -> term .)
    LESS_EQUAL      reduce using rule 74 (expression -> term .)
    GREATER_EQUAL   reduce using rule 74 (expression -> term .)
    IDENTICAL_TO    reduce using rule 74 (expression -> term .)
    NOT_IDENTICAL_TO reduce using rule 74 (expression -> term .)
    DIFFERENT       reduce using rule 74 (expression -> term .)
    SEMICOLON       reduce using rule 74 (expression -> term .)
    RIGHT_PAREN     reduce using rule 74 (expression -> term .)
    DOT             reduce using rule 74 (expression -> term .)
    COMMA           reduce using rule 74 (expression -> term .)
    LOGICAL_AND     reduce using rule 74 (expression -> term .)
    LOGICAL_OR      reduce using rule 74 (expression -> term .)
    LOGICAL_XOR     reduce using rule 74 (expression -> term .)
    RIGHT_BRACKET   reduce using rule 74 (expression -> term .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MOD             shift and go to state 131
    POWER           shift and go to state 132

  ! TIMES           [ reduce using rule 74 (expression -> term .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> term .) ]
  ! MOD             [ reduce using rule 74 (expression -> term .) ]
  ! POWER           [ reduce using rule 74 (expression -> term .) ]


state 47

    (94) for_part1 -> FOR . LEFT_PAREN assignment_list SEMICOLON
    (95) for_part1 -> FOR . LEFT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 133


state 48

    (56) print_function -> PRINT .

    LEFT_PAREN      reduce using rule 56 (print_function -> PRINT .)
    STRING          reduce using rule 56 (print_function -> PRINT .)
    ID              reduce using rule 56 (print_function -> PRINT .)
    ARRAY           reduce using rule 56 (print_function -> PRINT .)
    LEFT_BRACKET    reduce using rule 56 (print_function -> PRINT .)
    NAME            reduce using rule 56 (print_function -> PRINT .)
    FUNCTION        reduce using rule 56 (print_function -> PRINT .)
    FGETS           reduce using rule 56 (print_function -> PRINT .)
    NEW             reduce using rule 56 (print_function -> PRINT .)
    INTEGER         reduce using rule 56 (print_function -> PRINT .)
    FLOAT           reduce using rule 56 (print_function -> PRINT .)
    TRUE            reduce using rule 56 (print_function -> PRINT .)
    FALSE           reduce using rule 56 (print_function -> PRINT .)
    LOGICAL_NOT     reduce using rule 56 (print_function -> PRINT .)


state 49

    (57) print_function -> ECHO .

    LEFT_PAREN      reduce using rule 57 (print_function -> ECHO .)
    STRING          reduce using rule 57 (print_function -> ECHO .)
    ID              reduce using rule 57 (print_function -> ECHO .)
    ARRAY           reduce using rule 57 (print_function -> ECHO .)
    LEFT_BRACKET    reduce using rule 57 (print_function -> ECHO .)
    NAME            reduce using rule 57 (print_function -> ECHO .)
    FUNCTION        reduce using rule 57 (print_function -> ECHO .)
    FGETS           reduce using rule 57 (print_function -> ECHO .)
    NEW             reduce using rule 57 (print_function -> ECHO .)
    INTEGER         reduce using rule 57 (print_function -> ECHO .)
    FLOAT           reduce using rule 57 (print_function -> ECHO .)
    TRUE            reduce using rule 57 (print_function -> ECHO .)
    FALSE           reduce using rule 57 (print_function -> ECHO .)
    LOGICAL_NOT     reduce using rule 57 (print_function -> ECHO .)


state 50

    (43) variable -> ID .
    (44) variable -> ID . CALL NAME

    PLUS_PLUS       reduce using rule 43 (variable -> ID .)
    MINUS_MINUS     reduce using rule 43 (variable -> ID .)
    EQUALS          reduce using rule 43 (variable -> ID .)
    LEFT_BRACKET    reduce using rule 43 (variable -> ID .)
    PLUS_EQUALS     reduce using rule 43 (variable -> ID .)
    MINUS_EQUALS    reduce using rule 43 (variable -> ID .)
    TIMES_EQUALS    reduce using rule 43 (variable -> ID .)
    DIVIDE_EQUALS   reduce using rule 43 (variable -> ID .)
    MOD_EQUALS      reduce using rule 43 (variable -> ID .)
    LOGICAL_AND     reduce using rule 43 (variable -> ID .)
    LOGICAL_OR      reduce using rule 43 (variable -> ID .)
    LOGICAL_XOR     reduce using rule 43 (variable -> ID .)
    TIMES           reduce using rule 43 (variable -> ID .)
    DIVIDE          reduce using rule 43 (variable -> ID .)
    MOD             reduce using rule 43 (variable -> ID .)
    POWER           reduce using rule 43 (variable -> ID .)
    PLUS            reduce using rule 43 (variable -> ID .)
    MINUS           reduce using rule 43 (variable -> ID .)
    EQUAL_TO        reduce using rule 43 (variable -> ID .)
    NOT_EQUAL_TO    reduce using rule 43 (variable -> ID .)
    LESS_THAN       reduce using rule 43 (variable -> ID .)
    GREATER_THAN    reduce using rule 43 (variable -> ID .)
    LESS_EQUAL      reduce using rule 43 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 43 (variable -> ID .)
    IDENTICAL_TO    reduce using rule 43 (variable -> ID .)
    NOT_IDENTICAL_TO reduce using rule 43 (variable -> ID .)
    DIFFERENT       reduce using rule 43 (variable -> ID .)
    SEMICOLON       reduce using rule 43 (variable -> ID .)
    RIGHT_PAREN     reduce using rule 43 (variable -> ID .)
    DOT             reduce using rule 43 (variable -> ID .)
    COMMA           reduce using rule 43 (variable -> ID .)
    RIGHT_BRACKET   reduce using rule 43 (variable -> ID .)
    CALL            shift and go to state 134


state 51

    (79) term -> factor .

    TIMES           reduce using rule 79 (term -> factor .)
    DIVIDE          reduce using rule 79 (term -> factor .)
    MOD             reduce using rule 79 (term -> factor .)
    POWER           reduce using rule 79 (term -> factor .)
    PLUS            reduce using rule 79 (term -> factor .)
    MINUS           reduce using rule 79 (term -> factor .)
    EQUAL_TO        reduce using rule 79 (term -> factor .)
    NOT_EQUAL_TO    reduce using rule 79 (term -> factor .)
    LESS_THAN       reduce using rule 79 (term -> factor .)
    GREATER_THAN    reduce using rule 79 (term -> factor .)
    LESS_EQUAL      reduce using rule 79 (term -> factor .)
    GREATER_EQUAL   reduce using rule 79 (term -> factor .)
    IDENTICAL_TO    reduce using rule 79 (term -> factor .)
    NOT_IDENTICAL_TO reduce using rule 79 (term -> factor .)
    DIFFERENT       reduce using rule 79 (term -> factor .)
    SEMICOLON       reduce using rule 79 (term -> factor .)
    RIGHT_PAREN     reduce using rule 79 (term -> factor .)
    DOT             reduce using rule 79 (term -> factor .)
    COMMA           reduce using rule 79 (term -> factor .)
    LOGICAL_AND     reduce using rule 79 (term -> factor .)
    LOGICAL_OR      reduce using rule 79 (term -> factor .)
    LOGICAL_XOR     reduce using rule 79 (term -> factor .)
    RIGHT_BRACKET   reduce using rule 79 (term -> factor .)


state 52

    (80) factor -> INTEGER .

    TIMES           reduce using rule 80 (factor -> INTEGER .)
    DIVIDE          reduce using rule 80 (factor -> INTEGER .)
    MOD             reduce using rule 80 (factor -> INTEGER .)
    POWER           reduce using rule 80 (factor -> INTEGER .)
    PLUS            reduce using rule 80 (factor -> INTEGER .)
    MINUS           reduce using rule 80 (factor -> INTEGER .)
    EQUAL_TO        reduce using rule 80 (factor -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 80 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 80 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 80 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 80 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 80 (factor -> INTEGER .)
    IDENTICAL_TO    reduce using rule 80 (factor -> INTEGER .)
    NOT_IDENTICAL_TO reduce using rule 80 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 80 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 80 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 80 (factor -> INTEGER .)
    DOT             reduce using rule 80 (factor -> INTEGER .)
    COMMA           reduce using rule 80 (factor -> INTEGER .)
    LOGICAL_AND     reduce using rule 80 (factor -> INTEGER .)
    LOGICAL_OR      reduce using rule 80 (factor -> INTEGER .)
    LOGICAL_XOR     reduce using rule 80 (factor -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 80 (factor -> INTEGER .)


state 53

    (81) factor -> FLOAT .

    TIMES           reduce using rule 81 (factor -> FLOAT .)
    DIVIDE          reduce using rule 81 (factor -> FLOAT .)
    MOD             reduce using rule 81 (factor -> FLOAT .)
    POWER           reduce using rule 81 (factor -> FLOAT .)
    PLUS            reduce using rule 81 (factor -> FLOAT .)
    MINUS           reduce using rule 81 (factor -> FLOAT .)
    EQUAL_TO        reduce using rule 81 (factor -> FLOAT .)
    NOT_EQUAL_TO    reduce using rule 81 (factor -> FLOAT .)
    LESS_THAN       reduce using rule 81 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 81 (factor -> FLOAT .)
    LESS_EQUAL      reduce using rule 81 (factor -> FLOAT .)
    GREATER_EQUAL   reduce using rule 81 (factor -> FLOAT .)
    IDENTICAL_TO    reduce using rule 81 (factor -> FLOAT .)
    NOT_IDENTICAL_TO reduce using rule 81 (factor -> FLOAT .)
    DIFFERENT       reduce using rule 81 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 81 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 81 (factor -> FLOAT .)
    DOT             reduce using rule 81 (factor -> FLOAT .)
    COMMA           reduce using rule 81 (factor -> FLOAT .)
    LOGICAL_AND     reduce using rule 81 (factor -> FLOAT .)
    LOGICAL_OR      reduce using rule 81 (factor -> FLOAT .)
    LOGICAL_XOR     reduce using rule 81 (factor -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 81 (factor -> FLOAT .)


state 54

    (108) condition -> simple_condition .

    LOGICAL_AND     reduce using rule 108 (condition -> simple_condition .)
    LOGICAL_OR      reduce using rule 108 (condition -> simple_condition .)
    LOGICAL_XOR     reduce using rule 108 (condition -> simple_condition .)
    TIMES           reduce using rule 108 (condition -> simple_condition .)
    DIVIDE          reduce using rule 108 (condition -> simple_condition .)
    MOD             reduce using rule 108 (condition -> simple_condition .)
    POWER           reduce using rule 108 (condition -> simple_condition .)
    PLUS            reduce using rule 108 (condition -> simple_condition .)
    MINUS           reduce using rule 108 (condition -> simple_condition .)
    EQUAL_TO        reduce using rule 108 (condition -> simple_condition .)
    NOT_EQUAL_TO    reduce using rule 108 (condition -> simple_condition .)
    LESS_THAN       reduce using rule 108 (condition -> simple_condition .)
    GREATER_THAN    reduce using rule 108 (condition -> simple_condition .)
    LESS_EQUAL      reduce using rule 108 (condition -> simple_condition .)
    GREATER_EQUAL   reduce using rule 108 (condition -> simple_condition .)
    IDENTICAL_TO    reduce using rule 108 (condition -> simple_condition .)
    NOT_IDENTICAL_TO reduce using rule 108 (condition -> simple_condition .)
    DIFFERENT       reduce using rule 108 (condition -> simple_condition .)
    SEMICOLON       reduce using rule 108 (condition -> simple_condition .)
    RIGHT_PAREN     reduce using rule 108 (condition -> simple_condition .)
    DOT             reduce using rule 108 (condition -> simple_condition .)
    COMMA           reduce using rule 108 (condition -> simple_condition .)
    RIGHT_BRACKET   reduce using rule 108 (condition -> simple_condition .)


state 55

    (109) condition -> negated_condition .

    LOGICAL_AND     reduce using rule 109 (condition -> negated_condition .)
    LOGICAL_OR      reduce using rule 109 (condition -> negated_condition .)
    LOGICAL_XOR     reduce using rule 109 (condition -> negated_condition .)
    TIMES           reduce using rule 109 (condition -> negated_condition .)
    DIVIDE          reduce using rule 109 (condition -> negated_condition .)
    MOD             reduce using rule 109 (condition -> negated_condition .)
    POWER           reduce using rule 109 (condition -> negated_condition .)
    PLUS            reduce using rule 109 (condition -> negated_condition .)
    MINUS           reduce using rule 109 (condition -> negated_condition .)
    EQUAL_TO        reduce using rule 109 (condition -> negated_condition .)
    NOT_EQUAL_TO    reduce using rule 109 (condition -> negated_condition .)
    LESS_THAN       reduce using rule 109 (condition -> negated_condition .)
    GREATER_THAN    reduce using rule 109 (condition -> negated_condition .)
    LESS_EQUAL      reduce using rule 109 (condition -> negated_condition .)
    GREATER_EQUAL   reduce using rule 109 (condition -> negated_condition .)
    IDENTICAL_TO    reduce using rule 109 (condition -> negated_condition .)
    NOT_IDENTICAL_TO reduce using rule 109 (condition -> negated_condition .)
    DIFFERENT       reduce using rule 109 (condition -> negated_condition .)
    SEMICOLON       reduce using rule 109 (condition -> negated_condition .)
    RIGHT_PAREN     reduce using rule 109 (condition -> negated_condition .)
    DOT             reduce using rule 109 (condition -> negated_condition .)
    COMMA           reduce using rule 109 (condition -> negated_condition .)
    RIGHT_BRACKET   reduce using rule 109 (condition -> negated_condition .)


state 56

    (110) condition -> complex_condition .

    LOGICAL_AND     reduce using rule 110 (condition -> complex_condition .)
    LOGICAL_OR      reduce using rule 110 (condition -> complex_condition .)
    LOGICAL_XOR     reduce using rule 110 (condition -> complex_condition .)
    TIMES           reduce using rule 110 (condition -> complex_condition .)
    DIVIDE          reduce using rule 110 (condition -> complex_condition .)
    MOD             reduce using rule 110 (condition -> complex_condition .)
    POWER           reduce using rule 110 (condition -> complex_condition .)
    PLUS            reduce using rule 110 (condition -> complex_condition .)
    MINUS           reduce using rule 110 (condition -> complex_condition .)
    EQUAL_TO        reduce using rule 110 (condition -> complex_condition .)
    NOT_EQUAL_TO    reduce using rule 110 (condition -> complex_condition .)
    LESS_THAN       reduce using rule 110 (condition -> complex_condition .)
    GREATER_THAN    reduce using rule 110 (condition -> complex_condition .)
    LESS_EQUAL      reduce using rule 110 (condition -> complex_condition .)
    GREATER_EQUAL   reduce using rule 110 (condition -> complex_condition .)
    IDENTICAL_TO    reduce using rule 110 (condition -> complex_condition .)
    NOT_IDENTICAL_TO reduce using rule 110 (condition -> complex_condition .)
    DIFFERENT       reduce using rule 110 (condition -> complex_condition .)
    SEMICOLON       reduce using rule 110 (condition -> complex_condition .)
    RIGHT_PAREN     reduce using rule 110 (condition -> complex_condition .)
    DOT             reduce using rule 110 (condition -> complex_condition .)
    COMMA           reduce using rule 110 (condition -> complex_condition .)
    RIGHT_BRACKET   reduce using rule 110 (condition -> complex_condition .)


state 57

    (112) simple_condition -> TRUE .

    LOGICAL_AND     reduce using rule 112 (simple_condition -> TRUE .)
    LOGICAL_OR      reduce using rule 112 (simple_condition -> TRUE .)
    LOGICAL_XOR     reduce using rule 112 (simple_condition -> TRUE .)
    TIMES           reduce using rule 112 (simple_condition -> TRUE .)
    DIVIDE          reduce using rule 112 (simple_condition -> TRUE .)
    MOD             reduce using rule 112 (simple_condition -> TRUE .)
    POWER           reduce using rule 112 (simple_condition -> TRUE .)
    PLUS            reduce using rule 112 (simple_condition -> TRUE .)
    MINUS           reduce using rule 112 (simple_condition -> TRUE .)
    EQUAL_TO        reduce using rule 112 (simple_condition -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 112 (simple_condition -> TRUE .)
    LESS_THAN       reduce using rule 112 (simple_condition -> TRUE .)
    GREATER_THAN    reduce using rule 112 (simple_condition -> TRUE .)
    LESS_EQUAL      reduce using rule 112 (simple_condition -> TRUE .)
    GREATER_EQUAL   reduce using rule 112 (simple_condition -> TRUE .)
    IDENTICAL_TO    reduce using rule 112 (simple_condition -> TRUE .)
    NOT_IDENTICAL_TO reduce using rule 112 (simple_condition -> TRUE .)
    DIFFERENT       reduce using rule 112 (simple_condition -> TRUE .)
    SEMICOLON       reduce using rule 112 (simple_condition -> TRUE .)
    RIGHT_PAREN     reduce using rule 112 (simple_condition -> TRUE .)
    DOT             reduce using rule 112 (simple_condition -> TRUE .)
    COMMA           reduce using rule 112 (simple_condition -> TRUE .)
    RIGHT_BRACKET   reduce using rule 112 (simple_condition -> TRUE .)


state 58

    (113) simple_condition -> FALSE .

    LOGICAL_AND     reduce using rule 113 (simple_condition -> FALSE .)
    LOGICAL_OR      reduce using rule 113 (simple_condition -> FALSE .)
    LOGICAL_XOR     reduce using rule 113 (simple_condition -> FALSE .)
    TIMES           reduce using rule 113 (simple_condition -> FALSE .)
    DIVIDE          reduce using rule 113 (simple_condition -> FALSE .)
    MOD             reduce using rule 113 (simple_condition -> FALSE .)
    POWER           reduce using rule 113 (simple_condition -> FALSE .)
    PLUS            reduce using rule 113 (simple_condition -> FALSE .)
    MINUS           reduce using rule 113 (simple_condition -> FALSE .)
    EQUAL_TO        reduce using rule 113 (simple_condition -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 113 (simple_condition -> FALSE .)
    LESS_THAN       reduce using rule 113 (simple_condition -> FALSE .)
    GREATER_THAN    reduce using rule 113 (simple_condition -> FALSE .)
    LESS_EQUAL      reduce using rule 113 (simple_condition -> FALSE .)
    GREATER_EQUAL   reduce using rule 113 (simple_condition -> FALSE .)
    IDENTICAL_TO    reduce using rule 113 (simple_condition -> FALSE .)
    NOT_IDENTICAL_TO reduce using rule 113 (simple_condition -> FALSE .)
    DIFFERENT       reduce using rule 113 (simple_condition -> FALSE .)
    SEMICOLON       reduce using rule 113 (simple_condition -> FALSE .)
    RIGHT_PAREN     reduce using rule 113 (simple_condition -> FALSE .)
    DOT             reduce using rule 113 (simple_condition -> FALSE .)
    COMMA           reduce using rule 113 (simple_condition -> FALSE .)
    RIGHT_BRACKET   reduce using rule 113 (simple_condition -> FALSE .)


state 59

    (115) simple_condition -> relational_expression .

    LOGICAL_AND     reduce using rule 115 (simple_condition -> relational_expression .)
    LOGICAL_OR      reduce using rule 115 (simple_condition -> relational_expression .)
    LOGICAL_XOR     reduce using rule 115 (simple_condition -> relational_expression .)
    TIMES           reduce using rule 115 (simple_condition -> relational_expression .)
    DIVIDE          reduce using rule 115 (simple_condition -> relational_expression .)
    MOD             reduce using rule 115 (simple_condition -> relational_expression .)
    POWER           reduce using rule 115 (simple_condition -> relational_expression .)
    PLUS            reduce using rule 115 (simple_condition -> relational_expression .)
    MINUS           reduce using rule 115 (simple_condition -> relational_expression .)
    EQUAL_TO        reduce using rule 115 (simple_condition -> relational_expression .)
    NOT_EQUAL_TO    reduce using rule 115 (simple_condition -> relational_expression .)
    LESS_THAN       reduce using rule 115 (simple_condition -> relational_expression .)
    GREATER_THAN    reduce using rule 115 (simple_condition -> relational_expression .)
    LESS_EQUAL      reduce using rule 115 (simple_condition -> relational_expression .)
    GREATER_EQUAL   reduce using rule 115 (simple_condition -> relational_expression .)
    IDENTICAL_TO    reduce using rule 115 (simple_condition -> relational_expression .)
    NOT_IDENTICAL_TO reduce using rule 115 (simple_condition -> relational_expression .)
    DIFFERENT       reduce using rule 115 (simple_condition -> relational_expression .)
    SEMICOLON       reduce using rule 115 (simple_condition -> relational_expression .)
    RIGHT_PAREN     reduce using rule 115 (simple_condition -> relational_expression .)
    DOT             reduce using rule 115 (simple_condition -> relational_expression .)
    COMMA           reduce using rule 115 (simple_condition -> relational_expression .)
    RIGHT_BRACKET   reduce using rule 115 (simple_condition -> relational_expression .)


state 60

    (116) negated_condition -> LOGICAL_NOT . condition
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40

    condition                      shift and go to state 135
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59
    expression                     shift and go to state 84
    term                           shift and go to state 46
    factor                         shift and go to state 51

state 61

    (1) program -> OPEN_TAG statements CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG statements CLOSE_TAG .)


state 62

    (4) statements -> statements statement2 .

    CLOSE_TAG       reduce using rule 4 (statements -> statements statement2 .)
    ONE_LINE_COMMENT reduce using rule 4 (statements -> statements statement2 .)
    MULTI_LINE_COMMENT reduce using rule 4 (statements -> statements statement2 .)
    BREAK           reduce using rule 4 (statements -> statements statement2 .)
    CONTINUE        reduce using rule 4 (statements -> statements statement2 .)
    IF              reduce using rule 4 (statements -> statements statement2 .)
    WHILE           reduce using rule 4 (statements -> statements statement2 .)
    FUNCTION        reduce using rule 4 (statements -> statements statement2 .)
    CLASS           reduce using rule 4 (statements -> statements statement2 .)
    FSCANF          reduce using rule 4 (statements -> statements statement2 .)
    FGETS           reduce using rule 4 (statements -> statements statement2 .)
    NAME            reduce using rule 4 (statements -> statements statement2 .)
    RETURN          reduce using rule 4 (statements -> statements statement2 .)
    UNSET           reduce using rule 4 (statements -> statements statement2 .)
    COUNT           reduce using rule 4 (statements -> statements statement2 .)
    FOR             reduce using rule 4 (statements -> statements statement2 .)
    PRINT           reduce using rule 4 (statements -> statements statement2 .)
    ECHO            reduce using rule 4 (statements -> statements statement2 .)
    ID              reduce using rule 4 (statements -> statements statement2 .)
    INTEGER         reduce using rule 4 (statements -> statements statement2 .)
    FLOAT           reduce using rule 4 (statements -> statements statement2 .)
    STRING          reduce using rule 4 (statements -> statements statement2 .)
    LEFT_PAREN      reduce using rule 4 (statements -> statements statement2 .)
    TRUE            reduce using rule 4 (statements -> statements statement2 .)
    FALSE           reduce using rule 4 (statements -> statements statement2 .)
    LOGICAL_NOT     reduce using rule 4 (statements -> statements statement2 .)
    RIGHT_BRACE     reduce using rule 4 (statements -> statements statement2 .)


state 63

    (5) statement2 -> statement SEMICOLON .

    CLOSE_TAG       reduce using rule 5 (statement2 -> statement SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 5 (statement2 -> statement SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 5 (statement2 -> statement SEMICOLON .)
    BREAK           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement2 -> statement SEMICOLON .)
    IF              reduce using rule 5 (statement2 -> statement SEMICOLON .)
    WHILE           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    FUNCTION        reduce using rule 5 (statement2 -> statement SEMICOLON .)
    CLASS           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    FSCANF          reduce using rule 5 (statement2 -> statement SEMICOLON .)
    FGETS           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    NAME            reduce using rule 5 (statement2 -> statement SEMICOLON .)
    RETURN          reduce using rule 5 (statement2 -> statement SEMICOLON .)
    UNSET           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    COUNT           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    FOR             reduce using rule 5 (statement2 -> statement SEMICOLON .)
    PRINT           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    ECHO            reduce using rule 5 (statement2 -> statement SEMICOLON .)
    ID              reduce using rule 5 (statement2 -> statement SEMICOLON .)
    INTEGER         reduce using rule 5 (statement2 -> statement SEMICOLON .)
    FLOAT           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    STRING          reduce using rule 5 (statement2 -> statement SEMICOLON .)
    LEFT_PAREN      reduce using rule 5 (statement2 -> statement SEMICOLON .)
    TRUE            reduce using rule 5 (statement2 -> statement SEMICOLON .)
    FALSE           reduce using rule 5 (statement2 -> statement SEMICOLON .)
    LOGICAL_NOT     reduce using rule 5 (statement2 -> statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 5 (statement2 -> statement SEMICOLON .)


state 64

    (72) expression -> expression PLUS . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term

    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    ID              shift and go to state 50

    expression                     shift and go to state 84
    term                           shift and go to state 136
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 65

    (73) expression -> expression MINUS . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term

    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    ID              shift and go to state 50

    expression                     shift and go to state 84
    term                           shift and go to state 137
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 66

    (119) relational_expression -> expression relational_operator . expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression

    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    ID              shift and go to state 50

    expression                     shift and go to state 138
    term                           shift and go to state 46
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 67

    (120) relational_operator -> EQUAL_TO .

    INTEGER         reduce using rule 120 (relational_operator -> EQUAL_TO .)
    FLOAT           reduce using rule 120 (relational_operator -> EQUAL_TO .)
    STRING          reduce using rule 120 (relational_operator -> EQUAL_TO .)
    LEFT_PAREN      reduce using rule 120 (relational_operator -> EQUAL_TO .)
    TRUE            reduce using rule 120 (relational_operator -> EQUAL_TO .)
    FALSE           reduce using rule 120 (relational_operator -> EQUAL_TO .)
    LOGICAL_NOT     reduce using rule 120 (relational_operator -> EQUAL_TO .)
    ID              reduce using rule 120 (relational_operator -> EQUAL_TO .)


state 68

    (121) relational_operator -> NOT_EQUAL_TO .

    INTEGER         reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)
    FLOAT           reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)
    STRING          reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)
    LEFT_PAREN      reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)
    TRUE            reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)
    FALSE           reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)
    LOGICAL_NOT     reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)
    ID              reduce using rule 121 (relational_operator -> NOT_EQUAL_TO .)


state 69

    (122) relational_operator -> LESS_THAN .

    INTEGER         reduce using rule 122 (relational_operator -> LESS_THAN .)
    FLOAT           reduce using rule 122 (relational_operator -> LESS_THAN .)
    STRING          reduce using rule 122 (relational_operator -> LESS_THAN .)
    LEFT_PAREN      reduce using rule 122 (relational_operator -> LESS_THAN .)
    TRUE            reduce using rule 122 (relational_operator -> LESS_THAN .)
    FALSE           reduce using rule 122 (relational_operator -> LESS_THAN .)
    LOGICAL_NOT     reduce using rule 122 (relational_operator -> LESS_THAN .)
    ID              reduce using rule 122 (relational_operator -> LESS_THAN .)


state 70

    (123) relational_operator -> GREATER_THAN .

    INTEGER         reduce using rule 123 (relational_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 123 (relational_operator -> GREATER_THAN .)
    STRING          reduce using rule 123 (relational_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 123 (relational_operator -> GREATER_THAN .)
    TRUE            reduce using rule 123 (relational_operator -> GREATER_THAN .)
    FALSE           reduce using rule 123 (relational_operator -> GREATER_THAN .)
    LOGICAL_NOT     reduce using rule 123 (relational_operator -> GREATER_THAN .)
    ID              reduce using rule 123 (relational_operator -> GREATER_THAN .)


state 71

    (124) relational_operator -> LESS_EQUAL .

    INTEGER         reduce using rule 124 (relational_operator -> LESS_EQUAL .)
    FLOAT           reduce using rule 124 (relational_operator -> LESS_EQUAL .)
    STRING          reduce using rule 124 (relational_operator -> LESS_EQUAL .)
    LEFT_PAREN      reduce using rule 124 (relational_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 124 (relational_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 124 (relational_operator -> LESS_EQUAL .)
    LOGICAL_NOT     reduce using rule 124 (relational_operator -> LESS_EQUAL .)
    ID              reduce using rule 124 (relational_operator -> LESS_EQUAL .)


state 72

    (125) relational_operator -> GREATER_EQUAL .

    INTEGER         reduce using rule 125 (relational_operator -> GREATER_EQUAL .)
    FLOAT           reduce using rule 125 (relational_operator -> GREATER_EQUAL .)
    STRING          reduce using rule 125 (relational_operator -> GREATER_EQUAL .)
    LEFT_PAREN      reduce using rule 125 (relational_operator -> GREATER_EQUAL .)
    TRUE            reduce using rule 125 (relational_operator -> GREATER_EQUAL .)
    FALSE           reduce using rule 125 (relational_operator -> GREATER_EQUAL .)
    LOGICAL_NOT     reduce using rule 125 (relational_operator -> GREATER_EQUAL .)
    ID              reduce using rule 125 (relational_operator -> GREATER_EQUAL .)


state 73

    (126) relational_operator -> IDENTICAL_TO .

    INTEGER         reduce using rule 126 (relational_operator -> IDENTICAL_TO .)
    FLOAT           reduce using rule 126 (relational_operator -> IDENTICAL_TO .)
    STRING          reduce using rule 126 (relational_operator -> IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 126 (relational_operator -> IDENTICAL_TO .)
    TRUE            reduce using rule 126 (relational_operator -> IDENTICAL_TO .)
    FALSE           reduce using rule 126 (relational_operator -> IDENTICAL_TO .)
    LOGICAL_NOT     reduce using rule 126 (relational_operator -> IDENTICAL_TO .)
    ID              reduce using rule 126 (relational_operator -> IDENTICAL_TO .)


state 74

    (127) relational_operator -> NOT_IDENTICAL_TO .

    INTEGER         reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)
    FLOAT           reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)
    STRING          reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)
    TRUE            reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)
    FALSE           reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)
    LOGICAL_NOT     reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)
    ID              reduce using rule 127 (relational_operator -> NOT_IDENTICAL_TO .)


state 75

    (128) relational_operator -> DIFFERENT .

    INTEGER         reduce using rule 128 (relational_operator -> DIFFERENT .)
    FLOAT           reduce using rule 128 (relational_operator -> DIFFERENT .)
    STRING          reduce using rule 128 (relational_operator -> DIFFERENT .)
    LEFT_PAREN      reduce using rule 128 (relational_operator -> DIFFERENT .)
    TRUE            reduce using rule 128 (relational_operator -> DIFFERENT .)
    FALSE           reduce using rule 128 (relational_operator -> DIFFERENT .)
    LOGICAL_NOT     reduce using rule 128 (relational_operator -> DIFFERENT .)
    ID              reduce using rule 128 (relational_operator -> DIFFERENT .)


state 76

    (85) if_statement -> IF parenthesized_condition . block
    (86) if_statement -> IF parenthesized_condition . block else_if_extended
    (87) if_statement -> IF parenthesized_condition . block else_if_extended if_part3
    (88) if_statement -> IF parenthesized_condition . block if_part3
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 139

state 77

    (118) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40

    condition                      shift and go to state 92
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59
    expression                     shift and go to state 84
    term                           shift and go to state 46
    factor                         shift and go to state 51

state 78

    (93) while_statement -> WHILE parenthesized_condition . block
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 141

state 79

    (96) for_statement -> for_part1 condition . for_part3
    (117) complex_condition -> condition . logical_operator condition
    (82) factor -> condition .
    (98) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (99) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (129) logical_operator -> . LOGICAL_AND
    (130) logical_operator -> . LOGICAL_OR
    (131) logical_operator -> . LOGICAL_XOR

    TIMES           reduce using rule 82 (factor -> condition .)
    DIVIDE          reduce using rule 82 (factor -> condition .)
    MOD             reduce using rule 82 (factor -> condition .)
    POWER           reduce using rule 82 (factor -> condition .)
    PLUS            reduce using rule 82 (factor -> condition .)
    MINUS           reduce using rule 82 (factor -> condition .)
    EQUAL_TO        reduce using rule 82 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 82 (factor -> condition .)
    LESS_THAN       reduce using rule 82 (factor -> condition .)
    GREATER_THAN    reduce using rule 82 (factor -> condition .)
    LESS_EQUAL      reduce using rule 82 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 82 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 82 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 82 (factor -> condition .)
    DIFFERENT       reduce using rule 82 (factor -> condition .)
    SEMICOLON       shift and go to state 81
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 87
    LOGICAL_XOR     shift and go to state 88

    for_part3                      shift and go to state 142
    logical_operator               shift and go to state 85

state 80

    (97) for_statement -> for_part1 for_part3 .

    CLOSE_TAG       reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    ONE_LINE_COMMENT reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    BREAK           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    CONTINUE        reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    IF              reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    WHILE           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    FUNCTION        reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    CLASS           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    FSCANF          reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    FGETS           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    NAME            reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    RETURN          reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    UNSET           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    COUNT           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    FOR             reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    PRINT           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    ECHO            reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    ID              reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    INTEGER         reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    FLOAT           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    STRING          reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    LEFT_PAREN      reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    TRUE            reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    FALSE           reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    LOGICAL_NOT     reduce using rule 97 (for_statement -> for_part1 for_part3 .)
    RIGHT_BRACE     reduce using rule 97 (for_statement -> for_part1 for_part3 .)


state 81

    (98) for_part3 -> SEMICOLON . statement_list RIGHT_PAREN for_part4
    (99) for_part3 -> SEMICOLON . RIGHT_PAREN for_part4
    (104) statement_list -> . statement
    (105) statement_list -> . statement_list COMMA statement
    (13) statement -> . print_statement
    (14) statement -> . fscanf_statement
    (15) statement -> . fgets_statement
    (16) statement -> . assignment_statement
    (17) statement -> . array_declaration_statement
    (18) statement -> . BREAK
    (19) statement -> . CONTINUE
    (20) statement -> . function_call
    (21) statement -> . return_statement
    (22) statement -> . array_indexing
    (23) statement -> . array_add_element
    (24) statement -> . array_modify_element
    (25) statement -> . array_remove_element
    (26) statement -> . array_count_elements
    (27) statement -> . expression
    (54) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (55) print_statement -> . print_function arguments
    (40) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (135) array_declaration_statement -> . variable EQUALS array
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (36) return_statement -> . RETURN arguments
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (145) array_add_element -> . variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> . variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
    (147) array_remove_element -> . UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
    (148) array_count_elements -> . COUNT LEFT_PAREN variable RIGHT_PAREN
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (56) print_function -> . PRINT
    (57) print_function -> . ECHO
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    RIGHT_PAREN     shift and go to state 144
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FSCANF          shift and go to state 39
    FGETS           shift and go to state 41
    NAME            shift and go to state 35
    RETURN          shift and go to state 43
    UNSET           shift and go to state 44
    COUNT           shift and go to state 45
    PRINT           shift and go to state 48
    ECHO            shift and go to state 49
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    statement_list                 shift and go to state 143
    statement                      shift and go to state 145
    print_statement                shift and go to state 14
    fscanf_statement               shift and go to state 15
    fgets_statement                shift and go to state 16
    assignment_statement           shift and go to state 17
    array_declaration_statement    shift and go to state 18
    function_call                  shift and go to state 21
    return_statement               shift and go to state 22
    array_indexing                 shift and go to state 23
    array_add_element              shift and go to state 24
    array_modify_element           shift and go to state 25
    array_remove_element           shift and go to state 26
    array_count_elements           shift and go to state 27
    expression                     shift and go to state 28
    print_function                 shift and go to state 38
    variable                       shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 82

    (114) simple_condition -> variable .

    SEMICOLON       reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_AND     reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 114 (simple_condition -> variable .)
    TIMES           reduce using rule 114 (simple_condition -> variable .)
    DIVIDE          reduce using rule 114 (simple_condition -> variable .)
    MOD             reduce using rule 114 (simple_condition -> variable .)
    POWER           reduce using rule 114 (simple_condition -> variable .)
    PLUS            reduce using rule 114 (simple_condition -> variable .)
    MINUS           reduce using rule 114 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 114 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 114 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 114 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 114 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 114 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 114 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 114 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 114 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 114 (simple_condition -> variable .)
    RIGHT_PAREN     reduce using rule 114 (simple_condition -> variable .)
    DOT             reduce using rule 114 (simple_condition -> variable .)
    COMMA           reduce using rule 114 (simple_condition -> variable .)
    RIGHT_BRACKET   reduce using rule 114 (simple_condition -> variable .)


state 83

    (118) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (84) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40

    condition                      shift and go to state 92
    expression                     shift and go to state 91
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    term                           shift and go to state 46
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59
    factor                         shift and go to state 51

state 84

    (119) relational_expression -> expression . relational_operator expression
    (72) expression -> expression . PLUS term
    (73) expression -> expression . MINUS term
    (120) relational_operator -> . EQUAL_TO
    (121) relational_operator -> . NOT_EQUAL_TO
    (122) relational_operator -> . LESS_THAN
    (123) relational_operator -> . GREATER_THAN
    (124) relational_operator -> . LESS_EQUAL
    (125) relational_operator -> . GREATER_EQUAL
    (126) relational_operator -> . IDENTICAL_TO
    (127) relational_operator -> . NOT_IDENTICAL_TO
    (128) relational_operator -> . DIFFERENT

    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    EQUAL_TO        shift and go to state 67
    NOT_EQUAL_TO    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_EQUAL      shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    IDENTICAL_TO    shift and go to state 73
    NOT_IDENTICAL_TO shift and go to state 74
    DIFFERENT       shift and go to state 75

    relational_operator            shift and go to state 66

state 85

    (117) complex_condition -> condition logical_operator . condition
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40

    condition                      shift and go to state 146
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59
    expression                     shift and go to state 84
    term                           shift and go to state 46
    factor                         shift and go to state 51

state 86

    (129) logical_operator -> LOGICAL_AND .

    TRUE            reduce using rule 129 (logical_operator -> LOGICAL_AND .)
    FALSE           reduce using rule 129 (logical_operator -> LOGICAL_AND .)
    LOGICAL_NOT     reduce using rule 129 (logical_operator -> LOGICAL_AND .)
    LEFT_PAREN      reduce using rule 129 (logical_operator -> LOGICAL_AND .)
    ID              reduce using rule 129 (logical_operator -> LOGICAL_AND .)
    INTEGER         reduce using rule 129 (logical_operator -> LOGICAL_AND .)
    FLOAT           reduce using rule 129 (logical_operator -> LOGICAL_AND .)
    STRING          reduce using rule 129 (logical_operator -> LOGICAL_AND .)


state 87

    (130) logical_operator -> LOGICAL_OR .

    TRUE            reduce using rule 130 (logical_operator -> LOGICAL_OR .)
    FALSE           reduce using rule 130 (logical_operator -> LOGICAL_OR .)
    LOGICAL_NOT     reduce using rule 130 (logical_operator -> LOGICAL_OR .)
    LEFT_PAREN      reduce using rule 130 (logical_operator -> LOGICAL_OR .)
    ID              reduce using rule 130 (logical_operator -> LOGICAL_OR .)
    INTEGER         reduce using rule 130 (logical_operator -> LOGICAL_OR .)
    FLOAT           reduce using rule 130 (logical_operator -> LOGICAL_OR .)
    STRING          reduce using rule 130 (logical_operator -> LOGICAL_OR .)


state 88

    (131) logical_operator -> LOGICAL_XOR .

    TRUE            reduce using rule 131 (logical_operator -> LOGICAL_XOR .)
    FALSE           reduce using rule 131 (logical_operator -> LOGICAL_XOR .)
    LOGICAL_NOT     reduce using rule 131 (logical_operator -> LOGICAL_XOR .)
    LEFT_PAREN      reduce using rule 131 (logical_operator -> LOGICAL_XOR .)
    ID              reduce using rule 131 (logical_operator -> LOGICAL_XOR .)
    INTEGER         reduce using rule 131 (logical_operator -> LOGICAL_XOR .)
    FLOAT           reduce using rule 131 (logical_operator -> LOGICAL_XOR .)
    STRING          reduce using rule 131 (logical_operator -> LOGICAL_XOR .)


state 89

    (28) function_statement -> FUNCTION NAME . LEFT_PAREN parameters RIGHT_PAREN block
    (29) function_statement -> FUNCTION NAME . LEFT_PAREN RIGHT_PAREN block

    LEFT_PAREN      shift and go to state 147


state 90

    (37) function_call -> NAME LEFT_PAREN . arguments RIGHT_PAREN
    (38) function_call -> NAME LEFT_PAREN . RIGHT_PAREN
    (58) arguments -> . argument
    (59) arguments -> . arguments DOT argument
    (60) arguments -> . arguments COMMA argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    RIGHT_PAREN     shift and go to state 149
    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    arguments                      shift and go to state 148
    argument                       shift and go to state 96
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 91

    (84) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (72) expression -> expression . PLUS term
    (73) expression -> expression . MINUS term
    (119) relational_expression -> expression . relational_operator expression
    (120) relational_operator -> . EQUAL_TO
    (121) relational_operator -> . NOT_EQUAL_TO
    (122) relational_operator -> . LESS_THAN
    (123) relational_operator -> . GREATER_THAN
    (124) relational_operator -> . LESS_EQUAL
    (125) relational_operator -> . GREATER_EQUAL
    (126) relational_operator -> . IDENTICAL_TO
    (127) relational_operator -> . NOT_IDENTICAL_TO
    (128) relational_operator -> . DIFFERENT

    RIGHT_PAREN     shift and go to state 150
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    EQUAL_TO        shift and go to state 67
    NOT_EQUAL_TO    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_EQUAL      shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    IDENTICAL_TO    shift and go to state 73
    NOT_IDENTICAL_TO shift and go to state 74
    DIFFERENT       shift and go to state 75

    relational_operator            shift and go to state 66

state 92

    (118) parenthesized_condition -> LEFT_PAREN condition . RIGHT_PAREN
    (117) complex_condition -> condition . logical_operator condition
    (82) factor -> condition .
    (129) logical_operator -> . LOGICAL_AND
    (130) logical_operator -> . LOGICAL_OR
    (131) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 151
    TIMES           reduce using rule 82 (factor -> condition .)
    DIVIDE          reduce using rule 82 (factor -> condition .)
    MOD             reduce using rule 82 (factor -> condition .)
    POWER           reduce using rule 82 (factor -> condition .)
    PLUS            reduce using rule 82 (factor -> condition .)
    MINUS           reduce using rule 82 (factor -> condition .)
    EQUAL_TO        reduce using rule 82 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 82 (factor -> condition .)
    LESS_THAN       reduce using rule 82 (factor -> condition .)
    GREATER_THAN    reduce using rule 82 (factor -> condition .)
    LESS_EQUAL      reduce using rule 82 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 82 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 82 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 82 (factor -> condition .)
    DIFFERENT       reduce using rule 82 (factor -> condition .)
    DOT             reduce using rule 82 (factor -> condition .)
    COMMA           reduce using rule 82 (factor -> condition .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 87
    LOGICAL_XOR     shift and go to state 88

  ! RIGHT_PAREN     [ reduce using rule 82 (factor -> condition .) ]

    logical_operator               shift and go to state 85

state 93

    (149) class_declaration -> CLASS NAME . LEFT_BRACE class_statements RIGHT_BRACE
    (150) class_declaration -> CLASS NAME . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 152


state 94

    (54) print_statement -> print_function LEFT_PAREN . arguments RIGHT_PAREN
    (132) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (84) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (118) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (58) arguments -> . argument
    (59) arguments -> . arguments DOT argument
    (60) arguments -> . arguments COMMA argument
    (133) casting_type -> . INT_TYPE
    (134) casting_type -> . FLOAT_TYPE
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression

    INT_TYPE        shift and go to state 157
    FLOAT_TYPE      shift and go to state 158
    STRING          shift and go to state 97
    ID              shift and go to state 102
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 153
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53

    arguments                      shift and go to state 154
    casting_type                   shift and go to state 155
    expression                     shift and go to state 156
    condition                      shift and go to state 92
    argument                       shift and go to state 96
    term                           shift and go to state 46
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    factor                         shift and go to state 51
    variable                       shift and go to state 159
    relational_expression          shift and go to state 59

state 95

    (55) print_statement -> print_function arguments .
    (59) arguments -> arguments . DOT argument
    (60) arguments -> arguments . COMMA argument

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 55 (print_statement -> print_function arguments .)
    RIGHT_PAREN     reduce using rule 55 (print_statement -> print_function arguments .)
    DOT             shift and go to state 160
    COMMA           shift and go to state 161

  ! COMMA           [ reduce using rule 55 (print_statement -> print_function arguments .) ]


state 96

    (58) arguments -> argument .

    DOT             reduce using rule 58 (arguments -> argument .)
    COMMA           reduce using rule 58 (arguments -> argument .)
    SEMICOLON       reduce using rule 58 (arguments -> argument .)
    RIGHT_PAREN     reduce using rule 58 (arguments -> argument .)


state 97

    (61) argument -> STRING .
    (83) factor -> STRING .

  ! reduce/reduce conflict for DOT resolved using rule 61 (argument -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 61 (argument -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 61 (argument -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 61 (argument -> STRING .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 61 (argument -> STRING .)
    DOT             reduce using rule 61 (argument -> STRING .)
    COMMA           reduce using rule 61 (argument -> STRING .)
    SEMICOLON       reduce using rule 61 (argument -> STRING .)
    RIGHT_PAREN     reduce using rule 61 (argument -> STRING .)
    RIGHT_BRACKET   reduce using rule 61 (argument -> STRING .)
    TIMES           reduce using rule 83 (factor -> STRING .)
    DIVIDE          reduce using rule 83 (factor -> STRING .)
    MOD             reduce using rule 83 (factor -> STRING .)
    POWER           reduce using rule 83 (factor -> STRING .)
    PLUS            reduce using rule 83 (factor -> STRING .)
    MINUS           reduce using rule 83 (factor -> STRING .)
    EQUAL_TO        reduce using rule 83 (factor -> STRING .)
    NOT_EQUAL_TO    reduce using rule 83 (factor -> STRING .)
    LESS_THAN       reduce using rule 83 (factor -> STRING .)
    GREATER_THAN    reduce using rule 83 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 83 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 83 (factor -> STRING .)
    IDENTICAL_TO    reduce using rule 83 (factor -> STRING .)
    NOT_IDENTICAL_TO reduce using rule 83 (factor -> STRING .)
    DIFFERENT       reduce using rule 83 (factor -> STRING .)

  ! DOT             [ reduce using rule 83 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 83 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 83 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 83 (factor -> STRING .) ]
  ! RIGHT_BRACKET   [ reduce using rule 83 (factor -> STRING .) ]


state 98

    (62) argument -> expression .
    (72) expression -> expression . PLUS term
    (73) expression -> expression . MINUS term
    (119) relational_expression -> expression . relational_operator expression
    (120) relational_operator -> . EQUAL_TO
    (121) relational_operator -> . NOT_EQUAL_TO
    (122) relational_operator -> . LESS_THAN
    (123) relational_operator -> . GREATER_THAN
    (124) relational_operator -> . LESS_EQUAL
    (125) relational_operator -> . GREATER_EQUAL
    (126) relational_operator -> . IDENTICAL_TO
    (127) relational_operator -> . NOT_IDENTICAL_TO
    (128) relational_operator -> . DIFFERENT

    DOT             reduce using rule 62 (argument -> expression .)
    COMMA           reduce using rule 62 (argument -> expression .)
    SEMICOLON       reduce using rule 62 (argument -> expression .)
    RIGHT_PAREN     reduce using rule 62 (argument -> expression .)
    RIGHT_BRACKET   reduce using rule 62 (argument -> expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    EQUAL_TO        shift and go to state 67
    NOT_EQUAL_TO    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_EQUAL      shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    IDENTICAL_TO    shift and go to state 73
    NOT_IDENTICAL_TO shift and go to state 74
    DIFFERENT       shift and go to state 75

    relational_operator            shift and go to state 66

state 99

    (63) argument -> array .

    DOT             reduce using rule 63 (argument -> array .)
    COMMA           reduce using rule 63 (argument -> array .)
    SEMICOLON       reduce using rule 63 (argument -> array .)
    RIGHT_PAREN     reduce using rule 63 (argument -> array .)
    RIGHT_BRACKET   reduce using rule 63 (argument -> array .)


state 100

    (64) argument -> array_indexing .

    DOT             reduce using rule 64 (argument -> array_indexing .)
    COMMA           reduce using rule 64 (argument -> array_indexing .)
    SEMICOLON       reduce using rule 64 (argument -> array_indexing .)
    RIGHT_PAREN     reduce using rule 64 (argument -> array_indexing .)
    RIGHT_BRACKET   reduce using rule 64 (argument -> array_indexing .)


state 101

    (65) argument -> function_call .

    DOT             reduce using rule 65 (argument -> function_call .)
    COMMA           reduce using rule 65 (argument -> function_call .)
    SEMICOLON       reduce using rule 65 (argument -> function_call .)
    RIGHT_PAREN     reduce using rule 65 (argument -> function_call .)
    RIGHT_BRACKET   reduce using rule 65 (argument -> function_call .)


state 102

    (66) argument -> ID . CALL function_call
    (43) variable -> ID .
    (44) variable -> ID . CALL NAME

    CALL            shift and go to state 162
    LEFT_BRACKET    reduce using rule 43 (variable -> ID .)
    PLUS_PLUS       reduce using rule 43 (variable -> ID .)
    MINUS_MINUS     reduce using rule 43 (variable -> ID .)
    EQUALS          reduce using rule 43 (variable -> ID .)
    PLUS_EQUALS     reduce using rule 43 (variable -> ID .)
    MINUS_EQUALS    reduce using rule 43 (variable -> ID .)
    TIMES_EQUALS    reduce using rule 43 (variable -> ID .)
    DIVIDE_EQUALS   reduce using rule 43 (variable -> ID .)
    MOD_EQUALS      reduce using rule 43 (variable -> ID .)
    LOGICAL_AND     reduce using rule 43 (variable -> ID .)
    LOGICAL_OR      reduce using rule 43 (variable -> ID .)
    LOGICAL_XOR     reduce using rule 43 (variable -> ID .)
    TIMES           reduce using rule 43 (variable -> ID .)
    DIVIDE          reduce using rule 43 (variable -> ID .)
    MOD             reduce using rule 43 (variable -> ID .)
    POWER           reduce using rule 43 (variable -> ID .)
    PLUS            reduce using rule 43 (variable -> ID .)
    MINUS           reduce using rule 43 (variable -> ID .)
    EQUAL_TO        reduce using rule 43 (variable -> ID .)
    NOT_EQUAL_TO    reduce using rule 43 (variable -> ID .)
    LESS_THAN       reduce using rule 43 (variable -> ID .)
    GREATER_THAN    reduce using rule 43 (variable -> ID .)
    LESS_EQUAL      reduce using rule 43 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 43 (variable -> ID .)
    IDENTICAL_TO    reduce using rule 43 (variable -> ID .)
    NOT_IDENTICAL_TO reduce using rule 43 (variable -> ID .)
    DIFFERENT       reduce using rule 43 (variable -> ID .)
    DOT             reduce using rule 43 (variable -> ID .)
    COMMA           reduce using rule 43 (variable -> ID .)
    SEMICOLON       reduce using rule 43 (variable -> ID .)
    RIGHT_PAREN     reduce using rule 43 (variable -> ID .)
    RIGHT_BRACKET   reduce using rule 43 (variable -> ID .)


state 103

    (67) argument -> anonymous_function .

    DOT             reduce using rule 67 (argument -> anonymous_function .)
    COMMA           reduce using rule 67 (argument -> anonymous_function .)
    SEMICOLON       reduce using rule 67 (argument -> anonymous_function .)
    RIGHT_PAREN     reduce using rule 67 (argument -> anonymous_function .)
    RIGHT_BRACKET   reduce using rule 67 (argument -> anonymous_function .)


state 104

    (68) argument -> assignment_statement .

    DOT             reduce using rule 68 (argument -> assignment_statement .)
    COMMA           reduce using rule 68 (argument -> assignment_statement .)
    SEMICOLON       reduce using rule 68 (argument -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 68 (argument -> assignment_statement .)
    RIGHT_BRACKET   reduce using rule 68 (argument -> assignment_statement .)


state 105

    (69) argument -> fgets_statement .

    DOT             reduce using rule 69 (argument -> fgets_statement .)
    COMMA           reduce using rule 69 (argument -> fgets_statement .)
    SEMICOLON       reduce using rule 69 (argument -> fgets_statement .)
    RIGHT_PAREN     reduce using rule 69 (argument -> fgets_statement .)
    RIGHT_BRACKET   reduce using rule 69 (argument -> fgets_statement .)


state 106

    (70) argument -> object_creation .

    DOT             reduce using rule 70 (argument -> object_creation .)
    COMMA           reduce using rule 70 (argument -> object_creation .)
    SEMICOLON       reduce using rule 70 (argument -> object_creation .)
    RIGHT_PAREN     reduce using rule 70 (argument -> object_creation .)
    RIGHT_BRACKET   reduce using rule 70 (argument -> object_creation .)


state 107

    (71) argument -> casting . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    casting                        shift and go to state 107
    argument                       shift and go to state 163
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 108

    (136) array -> ARRAY . LEFT_PAREN array_elements RIGHT_PAREN

    LEFT_PAREN      shift and go to state 164


state 109

    (137) array -> LEFT_BRACKET . array_elements RIGHT_BRACKET
    (138) array_elements -> . array_argument
    (139) array_elements -> . array_elements COMMA array_argument
    (140) array_argument -> . argument
    (141) array_argument -> . clave KEY_VALUE argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (142) clave -> . STRING
    (143) clave -> . INTEGER
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 169
    ID              shift and go to state 102
    INTEGER         shift and go to state 170
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    array_elements                 shift and go to state 165
    array_argument                 shift and go to state 166
    argument                       shift and go to state 167
    clave                          shift and go to state 168
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 110

    (144) array_indexing -> variable . LEFT_BRACKET clave RIGHT_BRACKET
    (45) assignment_statement -> variable . assignment_operator argument
    (46) assignment_statement -> variable . PLUS_PLUS
    (47) assignment_statement -> variable . MINUS_MINUS
    (114) simple_condition -> variable .
    (48) assignment_operator -> . EQUALS
    (49) assignment_operator -> . PLUS_EQUALS
    (50) assignment_operator -> . MINUS_EQUALS
    (51) assignment_operator -> . TIMES_EQUALS
    (52) assignment_operator -> . DIVIDE_EQUALS
    (53) assignment_operator -> . MOD_EQUALS

    LEFT_BRACKET    shift and go to state 171
    PLUS_PLUS       shift and go to state 116
    MINUS_MINUS     shift and go to state 117
    LOGICAL_AND     reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 114 (simple_condition -> variable .)
    TIMES           reduce using rule 114 (simple_condition -> variable .)
    DIVIDE          reduce using rule 114 (simple_condition -> variable .)
    MOD             reduce using rule 114 (simple_condition -> variable .)
    POWER           reduce using rule 114 (simple_condition -> variable .)
    PLUS            reduce using rule 114 (simple_condition -> variable .)
    MINUS           reduce using rule 114 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 114 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 114 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 114 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 114 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 114 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 114 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 114 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 114 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 114 (simple_condition -> variable .)
    DOT             reduce using rule 114 (simple_condition -> variable .)
    COMMA           reduce using rule 114 (simple_condition -> variable .)
    SEMICOLON       reduce using rule 114 (simple_condition -> variable .)
    RIGHT_PAREN     reduce using rule 114 (simple_condition -> variable .)
    RIGHT_BRACKET   reduce using rule 114 (simple_condition -> variable .)
    EQUALS          shift and go to state 172
    PLUS_EQUALS     shift and go to state 120
    MINUS_EQUALS    shift and go to state 121
    TIMES_EQUALS    shift and go to state 122
    DIVIDE_EQUALS   shift and go to state 123
    MOD_EQUALS      shift and go to state 124

    assignment_operator            shift and go to state 115

state 111

    (30) anonymous_function -> FUNCTION . LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> FUNCTION . LEFT_PAREN RIGHT_PAREN block

    LEFT_PAREN      shift and go to state 173


state 112

    (162) object_creation -> NEW . NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> NEW . NAME LEFT_PAREN arguments RIGHT_PAREN

    NAME            shift and go to state 174


state 113

    (40) fscanf_statement -> FSCANF LEFT_PAREN . STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    STDIN           shift and go to state 175


state 114

    (39) fgets_statement -> FGETS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 176


state 115

    (45) assignment_statement -> variable assignment_operator . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    variable                       shift and go to state 110
    argument                       shift and go to state 177
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 116

    (46) assignment_statement -> variable PLUS_PLUS .

    SEMICOLON       reduce using rule 46 (assignment_statement -> variable PLUS_PLUS .)
    DOT             reduce using rule 46 (assignment_statement -> variable PLUS_PLUS .)
    COMMA           reduce using rule 46 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_PAREN     reduce using rule 46 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_BRACKET   reduce using rule 46 (assignment_statement -> variable PLUS_PLUS .)


state 117

    (47) assignment_statement -> variable MINUS_MINUS .

    SEMICOLON       reduce using rule 47 (assignment_statement -> variable MINUS_MINUS .)
    DOT             reduce using rule 47 (assignment_statement -> variable MINUS_MINUS .)
    COMMA           reduce using rule 47 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_PAREN     reduce using rule 47 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_BRACKET   reduce using rule 47 (assignment_statement -> variable MINUS_MINUS .)


state 118

    (135) array_declaration_statement -> variable EQUALS . array
    (48) assignment_operator -> EQUALS .
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET

  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    STRING          reduce using rule 48 (assignment_operator -> EQUALS .)
    ID              reduce using rule 48 (assignment_operator -> EQUALS .)
    NAME            reduce using rule 48 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 48 (assignment_operator -> EQUALS .)
    FGETS           reduce using rule 48 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 48 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 48 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 48 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 48 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 48 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 48 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 48 (assignment_operator -> EQUALS .)
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109

  ! ARRAY           [ reduce using rule 48 (assignment_operator -> EQUALS .) ]
  ! LEFT_BRACKET    [ reduce using rule 48 (assignment_operator -> EQUALS .) ]

    array                          shift and go to state 178

state 119

    (144) array_indexing -> variable LEFT_BRACKET . clave RIGHT_BRACKET
    (145) array_add_element -> variable LEFT_BRACKET . RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> variable LEFT_BRACKET . clave RIGHT_BRACKET EQUALS argument
    (142) clave -> . STRING
    (143) clave -> . INTEGER

    RIGHT_BRACKET   shift and go to state 180
    STRING          shift and go to state 181
    INTEGER         shift and go to state 182

    clave                          shift and go to state 179

state 120

    (49) assignment_operator -> PLUS_EQUALS .

    STRING          reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    ID              reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    NAME            reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    FGETS           reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    INTEGER         reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 49 (assignment_operator -> PLUS_EQUALS .)


state 121

    (50) assignment_operator -> MINUS_EQUALS .

    STRING          reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    ID              reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    ARRAY           reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    NAME            reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    FUNCTION        reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    FGETS           reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    NEW             reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    LEFT_PAREN      reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    INTEGER         reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    FLOAT           reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    TRUE            reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    FALSE           reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 50 (assignment_operator -> MINUS_EQUALS .)


state 122

    (51) assignment_operator -> TIMES_EQUALS .

    STRING          reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    ID              reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    ARRAY           reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    LEFT_BRACKET    reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    NAME            reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    FUNCTION        reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    FGETS           reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    NEW             reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    LEFT_PAREN      reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    INTEGER         reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    FLOAT           reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    TRUE            reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    FALSE           reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)
    LOGICAL_NOT     reduce using rule 51 (assignment_operator -> TIMES_EQUALS .)


state 123

    (52) assignment_operator -> DIVIDE_EQUALS .

    STRING          reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    ID              reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    ARRAY           reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_BRACKET    reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    NAME            reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    FUNCTION        reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    FGETS           reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    NEW             reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_PAREN      reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    INTEGER         reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    FLOAT           reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    TRUE            reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    FALSE           reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)
    LOGICAL_NOT     reduce using rule 52 (assignment_operator -> DIVIDE_EQUALS .)


state 124

    (53) assignment_operator -> MOD_EQUALS .

    STRING          reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    ID              reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    ARRAY           reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    LEFT_BRACKET    reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    NAME            reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    FUNCTION        reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    FGETS           reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    NEW             reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    LEFT_PAREN      reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    INTEGER         reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    FLOAT           reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    TRUE            reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    FALSE           reduce using rule 53 (assignment_operator -> MOD_EQUALS .)
    LOGICAL_NOT     reduce using rule 53 (assignment_operator -> MOD_EQUALS .)


state 125

    (36) return_statement -> RETURN arguments .
    (59) arguments -> arguments . DOT argument
    (60) arguments -> arguments . COMMA argument

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 36 (return_statement -> RETURN arguments .)
    RIGHT_PAREN     reduce using rule 36 (return_statement -> RETURN arguments .)
    DOT             shift and go to state 160
    COMMA           shift and go to state 161

  ! COMMA           [ reduce using rule 36 (return_statement -> RETURN arguments .) ]


state 126

    (132) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (84) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (118) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (133) casting_type -> . INT_TYPE
    (134) casting_type -> . FLOAT_TYPE
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression

    INT_TYPE        shift and go to state 157
    FLOAT_TYPE      shift and go to state 158
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    ID              shift and go to state 50

    casting_type                   shift and go to state 155
    expression                     shift and go to state 91
    condition                      shift and go to state 92
    term                           shift and go to state 46
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    factor                         shift and go to state 51
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 127

    (147) array_remove_element -> UNSET LEFT_PAREN . variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    ID              shift and go to state 50

    variable                       shift and go to state 183

state 128

    (148) array_count_elements -> COUNT LEFT_PAREN . variable RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    ID              shift and go to state 50

    variable                       shift and go to state 184

state 129

    (75) term -> term TIMES . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor

    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    ID              shift and go to state 50

    term                           shift and go to state 46
    factor                         shift and go to state 185
    condition                      shift and go to state 33
    expression                     shift and go to state 84
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 130

    (76) term -> term DIVIDE . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor

    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    ID              shift and go to state 50

    term                           shift and go to state 46
    factor                         shift and go to state 186
    condition                      shift and go to state 33
    expression                     shift and go to state 84
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 131

    (77) term -> term MOD . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor

    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    ID              shift and go to state 50

    term                           shift and go to state 46
    factor                         shift and go to state 187
    condition                      shift and go to state 33
    expression                     shift and go to state 84
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 132

    (78) term -> term POWER . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor

    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    ID              shift and go to state 50

    term                           shift and go to state 46
    factor                         shift and go to state 188
    condition                      shift and go to state 33
    expression                     shift and go to state 84
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59

state 133

    (94) for_part1 -> FOR LEFT_PAREN . assignment_list SEMICOLON
    (95) for_part1 -> FOR LEFT_PAREN . SEMICOLON
    (102) assignment_list -> . assignment_statement
    (103) assignment_list -> . assignment_list COMMA assignment_statement
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    SEMICOLON       shift and go to state 190
    ID              shift and go to state 50

    assignment_list                shift and go to state 189
    assignment_statement           shift and go to state 191
    variable                       shift and go to state 192

state 134

    (44) variable -> ID CALL . NAME

    NAME            shift and go to state 193


state 135

    (116) negated_condition -> LOGICAL_NOT condition .
    (117) complex_condition -> condition . logical_operator condition
    (82) factor -> condition .
    (129) logical_operator -> . LOGICAL_AND
    (130) logical_operator -> . LOGICAL_OR
    (131) logical_operator -> . LOGICAL_XOR

  ! reduce/reduce conflict for TIMES resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for MOD resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for POWER resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 82 (factor -> condition .)
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .)
    RIGHT_PAREN     reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .)
    DOT             reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .)
    COMMA           reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .)
    RIGHT_BRACKET   reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .)
    TIMES           reduce using rule 82 (factor -> condition .)
    DIVIDE          reduce using rule 82 (factor -> condition .)
    MOD             reduce using rule 82 (factor -> condition .)
    POWER           reduce using rule 82 (factor -> condition .)
    PLUS            reduce using rule 82 (factor -> condition .)
    MINUS           reduce using rule 82 (factor -> condition .)
    EQUAL_TO        reduce using rule 82 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 82 (factor -> condition .)
    LESS_THAN       reduce using rule 82 (factor -> condition .)
    GREATER_THAN    reduce using rule 82 (factor -> condition .)
    LESS_EQUAL      reduce using rule 82 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 82 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 82 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 82 (factor -> condition .)
    DIFFERENT       reduce using rule 82 (factor -> condition .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 87
    LOGICAL_XOR     shift and go to state 88

  ! LOGICAL_AND     [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_OR      [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! TIMES           [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! DIVIDE          [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! MOD             [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! POWER           [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! PLUS            [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! MINUS           [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! EQUAL_TO        [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LESS_THAN       [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! GREATER_THAN    [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LESS_EQUAL      [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! GREATER_EQUAL   [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! IDENTICAL_TO    [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]
  ! DIFFERENT       [ reduce using rule 116 (negated_condition -> LOGICAL_NOT condition .) ]

    logical_operator               shift and go to state 85

state 136

    (72) expression -> expression PLUS term .
    (75) term -> term . TIMES factor
    (76) term -> term . DIVIDE factor
    (77) term -> term . MOD factor
    (78) term -> term . POWER factor
    (74) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 72 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 72 (expression -> expression PLUS term .)
    PLUS            reduce using rule 72 (expression -> expression PLUS term .)
    MINUS           reduce using rule 72 (expression -> expression PLUS term .)
    EQUAL_TO        reduce using rule 72 (expression -> expression PLUS term .)
    NOT_EQUAL_TO    reduce using rule 72 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 72 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 72 (expression -> expression PLUS term .)
    LESS_EQUAL      reduce using rule 72 (expression -> expression PLUS term .)
    GREATER_EQUAL   reduce using rule 72 (expression -> expression PLUS term .)
    IDENTICAL_TO    reduce using rule 72 (expression -> expression PLUS term .)
    NOT_IDENTICAL_TO reduce using rule 72 (expression -> expression PLUS term .)
    DIFFERENT       reduce using rule 72 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 72 (expression -> expression PLUS term .)
    RIGHT_PAREN     reduce using rule 72 (expression -> expression PLUS term .)
    DOT             reduce using rule 72 (expression -> expression PLUS term .)
    COMMA           reduce using rule 72 (expression -> expression PLUS term .)
    LOGICAL_AND     reduce using rule 72 (expression -> expression PLUS term .)
    LOGICAL_OR      reduce using rule 72 (expression -> expression PLUS term .)
    LOGICAL_XOR     reduce using rule 72 (expression -> expression PLUS term .)
    RIGHT_BRACKET   reduce using rule 72 (expression -> expression PLUS term .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MOD             shift and go to state 131
    POWER           shift and go to state 132

  ! TIMES           [ reduce using rule 72 (expression -> expression PLUS term .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression PLUS term .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression PLUS term .) ]
  ! POWER           [ reduce using rule 72 (expression -> expression PLUS term .) ]
  ! PLUS            [ reduce using rule 74 (expression -> term .) ]
  ! MINUS           [ reduce using rule 74 (expression -> term .) ]
  ! EQUAL_TO        [ reduce using rule 74 (expression -> term .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 74 (expression -> term .) ]
  ! LESS_THAN       [ reduce using rule 74 (expression -> term .) ]
  ! GREATER_THAN    [ reduce using rule 74 (expression -> term .) ]
  ! LESS_EQUAL      [ reduce using rule 74 (expression -> term .) ]
  ! GREATER_EQUAL   [ reduce using rule 74 (expression -> term .) ]
  ! IDENTICAL_TO    [ reduce using rule 74 (expression -> term .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 74 (expression -> term .) ]
  ! DIFFERENT       [ reduce using rule 74 (expression -> term .) ]


state 137

    (73) expression -> expression MINUS term .
    (75) term -> term . TIMES factor
    (76) term -> term . DIVIDE factor
    (77) term -> term . MOD factor
    (78) term -> term . POWER factor
    (74) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 73 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 73 (expression -> expression MINUS term .)
    PLUS            reduce using rule 73 (expression -> expression MINUS term .)
    MINUS           reduce using rule 73 (expression -> expression MINUS term .)
    EQUAL_TO        reduce using rule 73 (expression -> expression MINUS term .)
    NOT_EQUAL_TO    reduce using rule 73 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 73 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 73 (expression -> expression MINUS term .)
    LESS_EQUAL      reduce using rule 73 (expression -> expression MINUS term .)
    GREATER_EQUAL   reduce using rule 73 (expression -> expression MINUS term .)
    IDENTICAL_TO    reduce using rule 73 (expression -> expression MINUS term .)
    NOT_IDENTICAL_TO reduce using rule 73 (expression -> expression MINUS term .)
    DIFFERENT       reduce using rule 73 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 73 (expression -> expression MINUS term .)
    RIGHT_PAREN     reduce using rule 73 (expression -> expression MINUS term .)
    DOT             reduce using rule 73 (expression -> expression MINUS term .)
    COMMA           reduce using rule 73 (expression -> expression MINUS term .)
    LOGICAL_AND     reduce using rule 73 (expression -> expression MINUS term .)
    LOGICAL_OR      reduce using rule 73 (expression -> expression MINUS term .)
    LOGICAL_XOR     reduce using rule 73 (expression -> expression MINUS term .)
    RIGHT_BRACKET   reduce using rule 73 (expression -> expression MINUS term .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MOD             shift and go to state 131
    POWER           shift and go to state 132

  ! TIMES           [ reduce using rule 73 (expression -> expression MINUS term .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression MINUS term .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression MINUS term .) ]
  ! POWER           [ reduce using rule 73 (expression -> expression MINUS term .) ]
  ! PLUS            [ reduce using rule 74 (expression -> term .) ]
  ! MINUS           [ reduce using rule 74 (expression -> term .) ]
  ! EQUAL_TO        [ reduce using rule 74 (expression -> term .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 74 (expression -> term .) ]
  ! LESS_THAN       [ reduce using rule 74 (expression -> term .) ]
  ! GREATER_THAN    [ reduce using rule 74 (expression -> term .) ]
  ! LESS_EQUAL      [ reduce using rule 74 (expression -> term .) ]
  ! GREATER_EQUAL   [ reduce using rule 74 (expression -> term .) ]
  ! IDENTICAL_TO    [ reduce using rule 74 (expression -> term .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 74 (expression -> term .) ]
  ! DIFFERENT       [ reduce using rule 74 (expression -> term .) ]


state 138

    (119) relational_expression -> expression relational_operator expression .
    (72) expression -> expression . PLUS term
    (73) expression -> expression . MINUS term
    (119) relational_expression -> expression . relational_operator expression
    (120) relational_operator -> . EQUAL_TO
    (121) relational_operator -> . NOT_EQUAL_TO
    (122) relational_operator -> . LESS_THAN
    (123) relational_operator -> . GREATER_THAN
    (124) relational_operator -> . LESS_EQUAL
    (125) relational_operator -> . GREATER_EQUAL
    (126) relational_operator -> . IDENTICAL_TO
    (127) relational_operator -> . NOT_IDENTICAL_TO
    (128) relational_operator -> . DIFFERENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for NOT_EQUAL_TO resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for IDENTICAL_TO resolved as shift
  ! shift/reduce conflict for NOT_IDENTICAL_TO resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    LOGICAL_AND     reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    LOGICAL_OR      reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    LOGICAL_XOR     reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    TIMES           reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    DIVIDE          reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    MOD             reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    POWER           reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    SEMICOLON       reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    RIGHT_PAREN     reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    DOT             reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    COMMA           reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    RIGHT_BRACKET   reduce using rule 119 (relational_expression -> expression relational_operator expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    EQUAL_TO        shift and go to state 67
    NOT_EQUAL_TO    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_EQUAL      shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    IDENTICAL_TO    shift and go to state 73
    NOT_IDENTICAL_TO shift and go to state 74
    DIFFERENT       shift and go to state 75

  ! PLUS            [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! MINUS           [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! EQUAL_TO        [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! LESS_THAN       [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! GREATER_THAN    [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! IDENTICAL_TO    [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]
  ! DIFFERENT       [ reduce using rule 119 (relational_expression -> expression relational_operator expression .) ]

    relational_operator            shift and go to state 66

state 139

    (85) if_statement -> IF parenthesized_condition block .
    (86) if_statement -> IF parenthesized_condition block . else_if_extended
    (87) if_statement -> IF parenthesized_condition block . else_if_extended if_part3
    (88) if_statement -> IF parenthesized_condition block . if_part3
    (89) else_if_extended -> . if_part2
    (90) else_if_extended -> . else_if_extended if_part2
    (92) if_part3 -> . ELSE block
    (91) if_part2 -> . ELSEIF parenthesized_condition block

    CLOSE_TAG       reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    BREAK           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    CONTINUE        reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    IF              reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    WHILE           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    FUNCTION        reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    CLASS           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    FSCANF          reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    FGETS           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    NAME            reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    RETURN          reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    UNSET           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    COUNT           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    FOR             reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    PRINT           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    ECHO            reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    ID              reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    INTEGER         reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    FLOAT           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    STRING          reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    LEFT_PAREN      reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    TRUE            reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    FALSE           reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    LOGICAL_NOT     reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 85 (if_statement -> IF parenthesized_condition block .)
    ELSE            shift and go to state 197
    ELSEIF          shift and go to state 198

    else_if_extended               shift and go to state 194
    if_part3                       shift and go to state 195
    if_part2                       shift and go to state 196

state 140

    (106) block -> LEFT_BRACE . statements RIGHT_BRACE
    (107) block -> LEFT_BRACE . RIGHT_BRACE
    (3) statements -> . statement2
    (4) statements -> . statements statement2
    (5) statement2 -> . statement SEMICOLON
    (6) statement2 -> . if_statement
    (7) statement2 -> . while_statement
    (8) statement2 -> . for_statement
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement2 -> . class_declaration
    (13) statement -> . print_statement
    (14) statement -> . fscanf_statement
    (15) statement -> . fgets_statement
    (16) statement -> . assignment_statement
    (17) statement -> . array_declaration_statement
    (18) statement -> . BREAK
    (19) statement -> . CONTINUE
    (20) statement -> . function_call
    (21) statement -> . return_statement
    (22) statement -> . array_indexing
    (23) statement -> . array_add_element
    (24) statement -> . array_modify_element
    (25) statement -> . array_remove_element
    (26) statement -> . array_count_elements
    (27) statement -> . expression
    (85) if_statement -> . IF parenthesized_condition block
    (86) if_statement -> . IF parenthesized_condition block else_if_extended
    (87) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (88) if_statement -> . IF parenthesized_condition block if_part3
    (93) while_statement -> . WHILE parenthesized_condition block
    (96) for_statement -> . for_part1 condition for_part3
    (97) for_statement -> . for_part1 for_part3
    (28) function_statement -> . FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block
    (29) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (149) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (150) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (54) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (55) print_statement -> . print_function arguments
    (40) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (135) array_declaration_statement -> . variable EQUALS array
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (36) return_statement -> . RETURN arguments
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (145) array_add_element -> . variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> . variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
    (147) array_remove_element -> . UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
    (148) array_count_elements -> . COUNT LEFT_PAREN variable RIGHT_PAREN
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (94) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (95) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (56) print_function -> . PRINT
    (57) print_function -> . ECHO
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    RIGHT_BRACE     shift and go to state 200
    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FUNCTION        shift and go to state 34
    CLASS           shift and go to state 37
    FSCANF          shift and go to state 39
    FGETS           shift and go to state 41
    NAME            shift and go to state 35
    RETURN          shift and go to state 43
    UNSET           shift and go to state 44
    COUNT           shift and go to state 45
    FOR             shift and go to state 47
    PRINT           shift and go to state 48
    ECHO            shift and go to state 49
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    statements                     shift and go to state 199
    statement2                     shift and go to state 5
    statement                      shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    class_declaration              shift and go to state 13
    print_statement                shift and go to state 14
    fscanf_statement               shift and go to state 15
    fgets_statement                shift and go to state 16
    assignment_statement           shift and go to state 17
    array_declaration_statement    shift and go to state 18
    function_call                  shift and go to state 21
    return_statement               shift and go to state 22
    array_indexing                 shift and go to state 23
    array_add_element              shift and go to state 24
    array_modify_element           shift and go to state 25
    array_remove_element           shift and go to state 26
    array_count_elements           shift and go to state 27
    expression                     shift and go to state 28
    parenthesized_condition        shift and go to state 30
    for_part1                      shift and go to state 32
    condition                      shift and go to state 33
    print_function                 shift and go to state 38
    variable                       shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 51
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    relational_expression          shift and go to state 59

state 141

    (93) while_statement -> WHILE parenthesized_condition block .

    CLOSE_TAG       reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    BREAK           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    CONTINUE        reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    IF              reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    WHILE           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    FUNCTION        reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    CLASS           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    FSCANF          reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    FGETS           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    NAME            reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    RETURN          reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    UNSET           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    COUNT           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    FOR             reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    PRINT           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    ECHO            reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    ID              reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    INTEGER         reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    FLOAT           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    STRING          reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    LEFT_PAREN      reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    TRUE            reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    FALSE           reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    LOGICAL_NOT     reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 93 (while_statement -> WHILE parenthesized_condition block .)


state 142

    (96) for_statement -> for_part1 condition for_part3 .

    CLOSE_TAG       reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    ONE_LINE_COMMENT reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    BREAK           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    CONTINUE        reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    IF              reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    WHILE           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    FUNCTION        reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    CLASS           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    FSCANF          reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    FGETS           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    NAME            reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    RETURN          reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    UNSET           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    COUNT           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    FOR             reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    PRINT           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    ECHO            reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    ID              reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    INTEGER         reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    FLOAT           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    STRING          reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    LEFT_PAREN      reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    TRUE            reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    FALSE           reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    LOGICAL_NOT     reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)
    RIGHT_BRACE     reduce using rule 96 (for_statement -> for_part1 condition for_part3 .)


state 143

    (98) for_part3 -> SEMICOLON statement_list . RIGHT_PAREN for_part4
    (105) statement_list -> statement_list . COMMA statement

    RIGHT_PAREN     shift and go to state 201
    COMMA           shift and go to state 202


state 144

    (99) for_part3 -> SEMICOLON RIGHT_PAREN . for_part4
    (100) for_part4 -> . block
    (101) for_part4 -> . SEMICOLON
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 203
    LEFT_BRACE      shift and go to state 140

    for_part4                      shift and go to state 204
    block                          shift and go to state 205

state 145

    (104) statement_list -> statement .

    RIGHT_PAREN     reduce using rule 104 (statement_list -> statement .)
    COMMA           reduce using rule 104 (statement_list -> statement .)


state 146

    (117) complex_condition -> condition logical_operator condition .
    (117) complex_condition -> condition . logical_operator condition
    (82) factor -> condition .
    (129) logical_operator -> . LOGICAL_AND
    (130) logical_operator -> . LOGICAL_OR
    (131) logical_operator -> . LOGICAL_XOR

  ! reduce/reduce conflict for TIMES resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for MOD resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for POWER resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 82 (factor -> condition .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 82 (factor -> condition .)
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 117 (complex_condition -> condition logical_operator condition .)
    RIGHT_PAREN     reduce using rule 117 (complex_condition -> condition logical_operator condition .)
    DOT             reduce using rule 117 (complex_condition -> condition logical_operator condition .)
    COMMA           reduce using rule 117 (complex_condition -> condition logical_operator condition .)
    RIGHT_BRACKET   reduce using rule 117 (complex_condition -> condition logical_operator condition .)
    TIMES           reduce using rule 82 (factor -> condition .)
    DIVIDE          reduce using rule 82 (factor -> condition .)
    MOD             reduce using rule 82 (factor -> condition .)
    POWER           reduce using rule 82 (factor -> condition .)
    PLUS            reduce using rule 82 (factor -> condition .)
    MINUS           reduce using rule 82 (factor -> condition .)
    EQUAL_TO        reduce using rule 82 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 82 (factor -> condition .)
    LESS_THAN       reduce using rule 82 (factor -> condition .)
    GREATER_THAN    reduce using rule 82 (factor -> condition .)
    LESS_EQUAL      reduce using rule 82 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 82 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 82 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 82 (factor -> condition .)
    DIFFERENT       reduce using rule 82 (factor -> condition .)
    LOGICAL_AND     shift and go to state 86
    LOGICAL_OR      shift and go to state 87
    LOGICAL_XOR     shift and go to state 88

  ! LOGICAL_AND     [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! LOGICAL_OR      [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! TIMES           [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! DIVIDE          [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! MOD             [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! POWER           [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! PLUS            [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! MINUS           [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! EQUAL_TO        [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! LESS_THAN       [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! GREATER_THAN    [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! LESS_EQUAL      [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! GREATER_EQUAL   [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! IDENTICAL_TO    [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]
  ! DIFFERENT       [ reduce using rule 117 (complex_condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 85

state 147

    (28) function_statement -> FUNCTION NAME LEFT_PAREN . parameters RIGHT_PAREN block
    (29) function_statement -> FUNCTION NAME LEFT_PAREN . RIGHT_PAREN block
    (32) parameters -> . parameter
    (33) parameters -> . parameters COMMA parameter
    (34) parameter -> . variable
    (35) parameter -> . variable EQUALS argument
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    RIGHT_PAREN     shift and go to state 207
    ID              shift and go to state 50

    parameters                     shift and go to state 206
    parameter                      shift and go to state 208
    variable                       shift and go to state 209

state 148

    (37) function_call -> NAME LEFT_PAREN arguments . RIGHT_PAREN
    (59) arguments -> arguments . DOT argument
    (60) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 210
    DOT             shift and go to state 160
    COMMA           shift and go to state 161


state 149

    (38) function_call -> NAME LEFT_PAREN RIGHT_PAREN .

    SEMICOLON       reduce using rule 38 (function_call -> NAME LEFT_PAREN RIGHT_PAREN .)
    DOT             reduce using rule 38 (function_call -> NAME LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 38 (function_call -> NAME LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 38 (function_call -> NAME LEFT_PAREN RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 38 (function_call -> NAME LEFT_PAREN RIGHT_PAREN .)


state 150

    (84) factor -> LEFT_PAREN expression RIGHT_PAREN .

    TIMES           reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MOD             reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POWER           reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUAL_TO        reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUAL_TO    reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_THAN       reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL_TO    reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL_TO reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIFFERENT       reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT             reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_AND     reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 84 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 151

    (118) parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .

    LOGICAL_AND     reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    TIMES           reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DIVIDE          reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    MOD             reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    POWER           reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    PLUS            reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    MINUS           reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    EQUAL_TO        reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    NOT_EQUAL_TO    reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LESS_THAN       reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    IDENTICAL_TO    reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    NOT_IDENTICAL_TO reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DIFFERENT       reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    SEMICOLON       reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DOT             reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    COMMA           reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 118 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)


state 152

    (149) class_declaration -> CLASS NAME LEFT_BRACE . class_statements RIGHT_BRACE
    (150) class_declaration -> CLASS NAME LEFT_BRACE . RIGHT_BRACE
    (151) class_statements -> . class_statement
    (152) class_statements -> . class_statements class_statement
    (153) class_statement -> . method_declaration
    (154) class_statement -> . property_declaration
    (155) class_statement -> . ONE_LINE_COMMENT
    (156) class_statement -> . MULTI_LINE_COMMENT
    (157) method_declaration -> . visibility_operator function_statement
    (158) property_declaration -> . visibility_operator variable SEMICOLON
    (159) visibility_operator -> . PUBLIC
    (160) visibility_operator -> . PRIVATE
    (161) visibility_operator -> . PROTECTED

    RIGHT_BRACE     shift and go to state 212
    ONE_LINE_COMMENT shift and go to state 216
    MULTI_LINE_COMMENT shift and go to state 217
    PUBLIC          shift and go to state 219
    PRIVATE         shift and go to state 220
    PROTECTED       shift and go to state 221

    class_statements               shift and go to state 211
    class_statement                shift and go to state 213
    method_declaration             shift and go to state 214
    property_declaration           shift and go to state 215
    visibility_operator            shift and go to state 218

state 153

    (118) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (132) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (84) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (133) casting_type -> . INT_TYPE
    (134) casting_type -> . FLOAT_TYPE
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (119) relational_expression -> . expression relational_operator expression
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INT_TYPE        shift and go to state 157
    FLOAT_TYPE      shift and go to state 158
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60
    LEFT_PAREN      shift and go to state 83
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40

    condition                      shift and go to state 92
    casting_type                   shift and go to state 155
    expression                     shift and go to state 91
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    term                           shift and go to state 46
    variable                       shift and go to state 82
    relational_expression          shift and go to state 59
    factor                         shift and go to state 51

state 154

    (54) print_statement -> print_function LEFT_PAREN arguments . RIGHT_PAREN
    (59) arguments -> arguments . DOT argument
    (60) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 222
    DOT             shift and go to state 160
    COMMA           shift and go to state 161


state 155

    (132) casting -> LEFT_PAREN casting_type . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 223


state 156

    (84) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (72) expression -> expression . PLUS term
    (73) expression -> expression . MINUS term
    (62) argument -> expression .
    (119) relational_expression -> expression . relational_operator expression
    (120) relational_operator -> . EQUAL_TO
    (121) relational_operator -> . NOT_EQUAL_TO
    (122) relational_operator -> . LESS_THAN
    (123) relational_operator -> . GREATER_THAN
    (124) relational_operator -> . LESS_EQUAL
    (125) relational_operator -> . GREATER_EQUAL
    (126) relational_operator -> . IDENTICAL_TO
    (127) relational_operator -> . NOT_IDENTICAL_TO
    (128) relational_operator -> . DIFFERENT

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 150
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    DOT             reduce using rule 62 (argument -> expression .)
    COMMA           reduce using rule 62 (argument -> expression .)
    EQUAL_TO        shift and go to state 67
    NOT_EQUAL_TO    shift and go to state 68
    LESS_THAN       shift and go to state 69
    GREATER_THAN    shift and go to state 70
    LESS_EQUAL      shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    IDENTICAL_TO    shift and go to state 73
    NOT_IDENTICAL_TO shift and go to state 74
    DIFFERENT       shift and go to state 75

  ! RIGHT_PAREN     [ reduce using rule 62 (argument -> expression .) ]

    relational_operator            shift and go to state 66

state 157

    (133) casting_type -> INT_TYPE .

    RIGHT_PAREN     reduce using rule 133 (casting_type -> INT_TYPE .)


state 158

    (134) casting_type -> FLOAT_TYPE .

    RIGHT_PAREN     reduce using rule 134 (casting_type -> FLOAT_TYPE .)


state 159

    (114) simple_condition -> variable .
    (144) array_indexing -> variable . LEFT_BRACKET clave RIGHT_BRACKET
    (45) assignment_statement -> variable . assignment_operator argument
    (46) assignment_statement -> variable . PLUS_PLUS
    (47) assignment_statement -> variable . MINUS_MINUS
    (48) assignment_operator -> . EQUALS
    (49) assignment_operator -> . PLUS_EQUALS
    (50) assignment_operator -> . MINUS_EQUALS
    (51) assignment_operator -> . TIMES_EQUALS
    (52) assignment_operator -> . DIVIDE_EQUALS
    (53) assignment_operator -> . MOD_EQUALS

    RIGHT_PAREN     reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_AND     reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 114 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 114 (simple_condition -> variable .)
    TIMES           reduce using rule 114 (simple_condition -> variable .)
    DIVIDE          reduce using rule 114 (simple_condition -> variable .)
    MOD             reduce using rule 114 (simple_condition -> variable .)
    POWER           reduce using rule 114 (simple_condition -> variable .)
    PLUS            reduce using rule 114 (simple_condition -> variable .)
    MINUS           reduce using rule 114 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 114 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 114 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 114 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 114 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 114 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 114 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 114 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 114 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 114 (simple_condition -> variable .)
    DOT             reduce using rule 114 (simple_condition -> variable .)
    COMMA           reduce using rule 114 (simple_condition -> variable .)
    LEFT_BRACKET    shift and go to state 171
    PLUS_PLUS       shift and go to state 116
    MINUS_MINUS     shift and go to state 117
    EQUALS          shift and go to state 172
    PLUS_EQUALS     shift and go to state 120
    MINUS_EQUALS    shift and go to state 121
    TIMES_EQUALS    shift and go to state 122
    DIVIDE_EQUALS   shift and go to state 123
    MOD_EQUALS      shift and go to state 124

    assignment_operator            shift and go to state 115

state 160

    (59) arguments -> arguments DOT . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    argument                       shift and go to state 224
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 161

    (60) arguments -> arguments COMMA . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    argument                       shift and go to state 225
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 162

    (66) argument -> ID CALL . function_call
    (44) variable -> ID CALL . NAME
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN

    NAME            shift and go to state 227

    function_call                  shift and go to state 226

state 163

    (71) argument -> casting argument .

    DOT             reduce using rule 71 (argument -> casting argument .)
    COMMA           reduce using rule 71 (argument -> casting argument .)
    SEMICOLON       reduce using rule 71 (argument -> casting argument .)
    RIGHT_PAREN     reduce using rule 71 (argument -> casting argument .)
    RIGHT_BRACKET   reduce using rule 71 (argument -> casting argument .)


state 164

    (136) array -> ARRAY LEFT_PAREN . array_elements RIGHT_PAREN
    (138) array_elements -> . array_argument
    (139) array_elements -> . array_elements COMMA array_argument
    (140) array_argument -> . argument
    (141) array_argument -> . clave KEY_VALUE argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (142) clave -> . STRING
    (143) clave -> . INTEGER
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 169
    ID              shift and go to state 102
    INTEGER         shift and go to state 170
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    array_elements                 shift and go to state 228
    array_argument                 shift and go to state 166
    argument                       shift and go to state 167
    clave                          shift and go to state 168
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 165

    (137) array -> LEFT_BRACKET array_elements . RIGHT_BRACKET
    (139) array_elements -> array_elements . COMMA array_argument

    RIGHT_BRACKET   shift and go to state 229
    COMMA           shift and go to state 230


state 166

    (138) array_elements -> array_argument .

    RIGHT_BRACKET   reduce using rule 138 (array_elements -> array_argument .)
    COMMA           reduce using rule 138 (array_elements -> array_argument .)
    RIGHT_PAREN     reduce using rule 138 (array_elements -> array_argument .)


state 167

    (140) array_argument -> argument .

    RIGHT_BRACKET   reduce using rule 140 (array_argument -> argument .)
    COMMA           reduce using rule 140 (array_argument -> argument .)
    RIGHT_PAREN     reduce using rule 140 (array_argument -> argument .)


state 168

    (141) array_argument -> clave . KEY_VALUE argument

    KEY_VALUE       shift and go to state 231


state 169

    (61) argument -> STRING .
    (142) clave -> STRING .
    (83) factor -> STRING .

  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 61 (argument -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 61 (argument -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 61 (argument -> STRING .)
    RIGHT_BRACKET   reduce using rule 61 (argument -> STRING .)
    COMMA           reduce using rule 61 (argument -> STRING .)
    RIGHT_PAREN     reduce using rule 61 (argument -> STRING .)
    KEY_VALUE       reduce using rule 142 (clave -> STRING .)
    TIMES           reduce using rule 83 (factor -> STRING .)
    DIVIDE          reduce using rule 83 (factor -> STRING .)
    MOD             reduce using rule 83 (factor -> STRING .)
    POWER           reduce using rule 83 (factor -> STRING .)
    PLUS            reduce using rule 83 (factor -> STRING .)
    MINUS           reduce using rule 83 (factor -> STRING .)
    EQUAL_TO        reduce using rule 83 (factor -> STRING .)
    NOT_EQUAL_TO    reduce using rule 83 (factor -> STRING .)
    LESS_THAN       reduce using rule 83 (factor -> STRING .)
    GREATER_THAN    reduce using rule 83 (factor -> STRING .)
    LESS_EQUAL      reduce using rule 83 (factor -> STRING .)
    GREATER_EQUAL   reduce using rule 83 (factor -> STRING .)
    IDENTICAL_TO    reduce using rule 83 (factor -> STRING .)
    NOT_IDENTICAL_TO reduce using rule 83 (factor -> STRING .)
    DIFFERENT       reduce using rule 83 (factor -> STRING .)

  ! RIGHT_BRACKET   [ reduce using rule 83 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 83 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 83 (factor -> STRING .) ]


state 170

    (143) clave -> INTEGER .
    (80) factor -> INTEGER .

    KEY_VALUE       reduce using rule 143 (clave -> INTEGER .)
    TIMES           reduce using rule 80 (factor -> INTEGER .)
    DIVIDE          reduce using rule 80 (factor -> INTEGER .)
    MOD             reduce using rule 80 (factor -> INTEGER .)
    POWER           reduce using rule 80 (factor -> INTEGER .)
    PLUS            reduce using rule 80 (factor -> INTEGER .)
    MINUS           reduce using rule 80 (factor -> INTEGER .)
    EQUAL_TO        reduce using rule 80 (factor -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 80 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 80 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 80 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 80 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 80 (factor -> INTEGER .)
    IDENTICAL_TO    reduce using rule 80 (factor -> INTEGER .)
    NOT_IDENTICAL_TO reduce using rule 80 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 80 (factor -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 80 (factor -> INTEGER .)
    COMMA           reduce using rule 80 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 80 (factor -> INTEGER .)


state 171

    (144) array_indexing -> variable LEFT_BRACKET . clave RIGHT_BRACKET
    (142) clave -> . STRING
    (143) clave -> . INTEGER

    STRING          shift and go to state 181
    INTEGER         shift and go to state 182

    clave                          shift and go to state 232

state 172

    (48) assignment_operator -> EQUALS .

    STRING          reduce using rule 48 (assignment_operator -> EQUALS .)
    ID              reduce using rule 48 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 48 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 48 (assignment_operator -> EQUALS .)
    NAME            reduce using rule 48 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 48 (assignment_operator -> EQUALS .)
    FGETS           reduce using rule 48 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 48 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 48 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 48 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 48 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 48 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 48 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 48 (assignment_operator -> EQUALS .)


state 173

    (30) anonymous_function -> FUNCTION LEFT_PAREN . parameters RIGHT_PAREN block
    (31) anonymous_function -> FUNCTION LEFT_PAREN . RIGHT_PAREN block
    (32) parameters -> . parameter
    (33) parameters -> . parameters COMMA parameter
    (34) parameter -> . variable
    (35) parameter -> . variable EQUALS argument
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    RIGHT_PAREN     shift and go to state 234
    ID              shift and go to state 50

    parameters                     shift and go to state 233
    parameter                      shift and go to state 208
    variable                       shift and go to state 209

state 174

    (162) object_creation -> NEW NAME . LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> NEW NAME . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN      shift and go to state 235


state 175

    (40) fscanf_statement -> FSCANF LEFT_PAREN STDIN . COMMA STRING COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 236


state 176

    (39) fgets_statement -> FGETS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 237


state 177

    (45) assignment_statement -> variable assignment_operator argument .

    SEMICOLON       reduce using rule 45 (assignment_statement -> variable assignment_operator argument .)
    DOT             reduce using rule 45 (assignment_statement -> variable assignment_operator argument .)
    COMMA           reduce using rule 45 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_PAREN     reduce using rule 45 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_BRACKET   reduce using rule 45 (assignment_statement -> variable assignment_operator argument .)


state 178

    (135) array_declaration_statement -> variable EQUALS array .

    SEMICOLON       reduce using rule 135 (array_declaration_statement -> variable EQUALS array .)
    RIGHT_PAREN     reduce using rule 135 (array_declaration_statement -> variable EQUALS array .)
    COMMA           reduce using rule 135 (array_declaration_statement -> variable EQUALS array .)


state 179

    (144) array_indexing -> variable LEFT_BRACKET clave . RIGHT_BRACKET
    (146) array_modify_element -> variable LEFT_BRACKET clave . RIGHT_BRACKET EQUALS argument

    RIGHT_BRACKET   shift and go to state 238


state 180

    (145) array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET . EQUALS argument

    EQUALS          shift and go to state 239


state 181

    (142) clave -> STRING .

    RIGHT_BRACKET   reduce using rule 142 (clave -> STRING .)


state 182

    (143) clave -> INTEGER .

    RIGHT_BRACKET   reduce using rule 143 (clave -> INTEGER .)


state 183

    (147) array_remove_element -> UNSET LEFT_PAREN variable . LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN

    LEFT_BRACKET    shift and go to state 240


state 184

    (148) array_count_elements -> COUNT LEFT_PAREN variable . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 241


state 185

    (75) term -> term TIMES factor .
    (79) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for MOD resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for POWER resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 75 (term -> term TIMES factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 75 (term -> term TIMES factor .)
    TIMES           reduce using rule 75 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 75 (term -> term TIMES factor .)
    MOD             reduce using rule 75 (term -> term TIMES factor .)
    POWER           reduce using rule 75 (term -> term TIMES factor .)
    PLUS            reduce using rule 75 (term -> term TIMES factor .)
    MINUS           reduce using rule 75 (term -> term TIMES factor .)
    EQUAL_TO        reduce using rule 75 (term -> term TIMES factor .)
    NOT_EQUAL_TO    reduce using rule 75 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 75 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 75 (term -> term TIMES factor .)
    LESS_EQUAL      reduce using rule 75 (term -> term TIMES factor .)
    GREATER_EQUAL   reduce using rule 75 (term -> term TIMES factor .)
    IDENTICAL_TO    reduce using rule 75 (term -> term TIMES factor .)
    NOT_IDENTICAL_TO reduce using rule 75 (term -> term TIMES factor .)
    DIFFERENT       reduce using rule 75 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 75 (term -> term TIMES factor .)
    RIGHT_PAREN     reduce using rule 75 (term -> term TIMES factor .)
    DOT             reduce using rule 75 (term -> term TIMES factor .)
    COMMA           reduce using rule 75 (term -> term TIMES factor .)
    LOGICAL_AND     reduce using rule 75 (term -> term TIMES factor .)
    LOGICAL_OR      reduce using rule 75 (term -> term TIMES factor .)
    LOGICAL_XOR     reduce using rule 75 (term -> term TIMES factor .)
    RIGHT_BRACKET   reduce using rule 75 (term -> term TIMES factor .)

  ! TIMES           [ reduce using rule 79 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 79 (term -> factor .) ]
  ! MOD             [ reduce using rule 79 (term -> factor .) ]
  ! POWER           [ reduce using rule 79 (term -> factor .) ]
  ! PLUS            [ reduce using rule 79 (term -> factor .) ]
  ! MINUS           [ reduce using rule 79 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 79 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 79 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 79 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 79 (term -> factor .) ]


state 186

    (76) term -> term DIVIDE factor .
    (79) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for MOD resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for POWER resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 76 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 76 (term -> term DIVIDE factor .)
    TIMES           reduce using rule 76 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 76 (term -> term DIVIDE factor .)
    MOD             reduce using rule 76 (term -> term DIVIDE factor .)
    POWER           reduce using rule 76 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 76 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 76 (term -> term DIVIDE factor .)
    EQUAL_TO        reduce using rule 76 (term -> term DIVIDE factor .)
    NOT_EQUAL_TO    reduce using rule 76 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 76 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 76 (term -> term DIVIDE factor .)
    LESS_EQUAL      reduce using rule 76 (term -> term DIVIDE factor .)
    GREATER_EQUAL   reduce using rule 76 (term -> term DIVIDE factor .)
    IDENTICAL_TO    reduce using rule 76 (term -> term DIVIDE factor .)
    NOT_IDENTICAL_TO reduce using rule 76 (term -> term DIVIDE factor .)
    DIFFERENT       reduce using rule 76 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 76 (term -> term DIVIDE factor .)
    RIGHT_PAREN     reduce using rule 76 (term -> term DIVIDE factor .)
    DOT             reduce using rule 76 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 76 (term -> term DIVIDE factor .)
    LOGICAL_AND     reduce using rule 76 (term -> term DIVIDE factor .)
    LOGICAL_OR      reduce using rule 76 (term -> term DIVIDE factor .)
    LOGICAL_XOR     reduce using rule 76 (term -> term DIVIDE factor .)
    RIGHT_BRACKET   reduce using rule 76 (term -> term DIVIDE factor .)

  ! TIMES           [ reduce using rule 79 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 79 (term -> factor .) ]
  ! MOD             [ reduce using rule 79 (term -> factor .) ]
  ! POWER           [ reduce using rule 79 (term -> factor .) ]
  ! PLUS            [ reduce using rule 79 (term -> factor .) ]
  ! MINUS           [ reduce using rule 79 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 79 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 79 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 79 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 79 (term -> factor .) ]


state 187

    (77) term -> term MOD factor .
    (79) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for MOD resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for POWER resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 77 (term -> term MOD factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 77 (term -> term MOD factor .)
    TIMES           reduce using rule 77 (term -> term MOD factor .)
    DIVIDE          reduce using rule 77 (term -> term MOD factor .)
    MOD             reduce using rule 77 (term -> term MOD factor .)
    POWER           reduce using rule 77 (term -> term MOD factor .)
    PLUS            reduce using rule 77 (term -> term MOD factor .)
    MINUS           reduce using rule 77 (term -> term MOD factor .)
    EQUAL_TO        reduce using rule 77 (term -> term MOD factor .)
    NOT_EQUAL_TO    reduce using rule 77 (term -> term MOD factor .)
    LESS_THAN       reduce using rule 77 (term -> term MOD factor .)
    GREATER_THAN    reduce using rule 77 (term -> term MOD factor .)
    LESS_EQUAL      reduce using rule 77 (term -> term MOD factor .)
    GREATER_EQUAL   reduce using rule 77 (term -> term MOD factor .)
    IDENTICAL_TO    reduce using rule 77 (term -> term MOD factor .)
    NOT_IDENTICAL_TO reduce using rule 77 (term -> term MOD factor .)
    DIFFERENT       reduce using rule 77 (term -> term MOD factor .)
    SEMICOLON       reduce using rule 77 (term -> term MOD factor .)
    RIGHT_PAREN     reduce using rule 77 (term -> term MOD factor .)
    DOT             reduce using rule 77 (term -> term MOD factor .)
    COMMA           reduce using rule 77 (term -> term MOD factor .)
    LOGICAL_AND     reduce using rule 77 (term -> term MOD factor .)
    LOGICAL_OR      reduce using rule 77 (term -> term MOD factor .)
    LOGICAL_XOR     reduce using rule 77 (term -> term MOD factor .)
    RIGHT_BRACKET   reduce using rule 77 (term -> term MOD factor .)

  ! TIMES           [ reduce using rule 79 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 79 (term -> factor .) ]
  ! MOD             [ reduce using rule 79 (term -> factor .) ]
  ! POWER           [ reduce using rule 79 (term -> factor .) ]
  ! PLUS            [ reduce using rule 79 (term -> factor .) ]
  ! MINUS           [ reduce using rule 79 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 79 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 79 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 79 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 79 (term -> factor .) ]


state 188

    (78) term -> term POWER factor .
    (79) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for MOD resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for POWER resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 78 (term -> term POWER factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 78 (term -> term POWER factor .)
    TIMES           reduce using rule 78 (term -> term POWER factor .)
    DIVIDE          reduce using rule 78 (term -> term POWER factor .)
    MOD             reduce using rule 78 (term -> term POWER factor .)
    POWER           reduce using rule 78 (term -> term POWER factor .)
    PLUS            reduce using rule 78 (term -> term POWER factor .)
    MINUS           reduce using rule 78 (term -> term POWER factor .)
    EQUAL_TO        reduce using rule 78 (term -> term POWER factor .)
    NOT_EQUAL_TO    reduce using rule 78 (term -> term POWER factor .)
    LESS_THAN       reduce using rule 78 (term -> term POWER factor .)
    GREATER_THAN    reduce using rule 78 (term -> term POWER factor .)
    LESS_EQUAL      reduce using rule 78 (term -> term POWER factor .)
    GREATER_EQUAL   reduce using rule 78 (term -> term POWER factor .)
    IDENTICAL_TO    reduce using rule 78 (term -> term POWER factor .)
    NOT_IDENTICAL_TO reduce using rule 78 (term -> term POWER factor .)
    DIFFERENT       reduce using rule 78 (term -> term POWER factor .)
    SEMICOLON       reduce using rule 78 (term -> term POWER factor .)
    RIGHT_PAREN     reduce using rule 78 (term -> term POWER factor .)
    DOT             reduce using rule 78 (term -> term POWER factor .)
    COMMA           reduce using rule 78 (term -> term POWER factor .)
    LOGICAL_AND     reduce using rule 78 (term -> term POWER factor .)
    LOGICAL_OR      reduce using rule 78 (term -> term POWER factor .)
    LOGICAL_XOR     reduce using rule 78 (term -> term POWER factor .)
    RIGHT_BRACKET   reduce using rule 78 (term -> term POWER factor .)

  ! TIMES           [ reduce using rule 79 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 79 (term -> factor .) ]
  ! MOD             [ reduce using rule 79 (term -> factor .) ]
  ! POWER           [ reduce using rule 79 (term -> factor .) ]
  ! PLUS            [ reduce using rule 79 (term -> factor .) ]
  ! MINUS           [ reduce using rule 79 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 79 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 79 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 79 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 79 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 79 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 79 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 79 (term -> factor .) ]


state 189

    (94) for_part1 -> FOR LEFT_PAREN assignment_list . SEMICOLON
    (103) assignment_list -> assignment_list . COMMA assignment_statement

    SEMICOLON       shift and go to state 242
    COMMA           shift and go to state 243


state 190

    (95) for_part1 -> FOR LEFT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    TRUE            reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FALSE           reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LEFT_PAREN      reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    ID              reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    INTEGER         reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FLOAT           reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    STRING          reduce using rule 95 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)


state 191

    (102) assignment_list -> assignment_statement .

    SEMICOLON       reduce using rule 102 (assignment_list -> assignment_statement .)
    COMMA           reduce using rule 102 (assignment_list -> assignment_statement .)


state 192

    (45) assignment_statement -> variable . assignment_operator argument
    (46) assignment_statement -> variable . PLUS_PLUS
    (47) assignment_statement -> variable . MINUS_MINUS
    (48) assignment_operator -> . EQUALS
    (49) assignment_operator -> . PLUS_EQUALS
    (50) assignment_operator -> . MINUS_EQUALS
    (51) assignment_operator -> . TIMES_EQUALS
    (52) assignment_operator -> . DIVIDE_EQUALS
    (53) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 116
    MINUS_MINUS     shift and go to state 117
    EQUALS          shift and go to state 172
    PLUS_EQUALS     shift and go to state 120
    MINUS_EQUALS    shift and go to state 121
    TIMES_EQUALS    shift and go to state 122
    DIVIDE_EQUALS   shift and go to state 123
    MOD_EQUALS      shift and go to state 124

    assignment_operator            shift and go to state 115

state 193

    (44) variable -> ID CALL NAME .

    PLUS_PLUS       reduce using rule 44 (variable -> ID CALL NAME .)
    MINUS_MINUS     reduce using rule 44 (variable -> ID CALL NAME .)
    EQUALS          reduce using rule 44 (variable -> ID CALL NAME .)
    LEFT_BRACKET    reduce using rule 44 (variable -> ID CALL NAME .)
    PLUS_EQUALS     reduce using rule 44 (variable -> ID CALL NAME .)
    MINUS_EQUALS    reduce using rule 44 (variable -> ID CALL NAME .)
    TIMES_EQUALS    reduce using rule 44 (variable -> ID CALL NAME .)
    DIVIDE_EQUALS   reduce using rule 44 (variable -> ID CALL NAME .)
    MOD_EQUALS      reduce using rule 44 (variable -> ID CALL NAME .)
    LOGICAL_AND     reduce using rule 44 (variable -> ID CALL NAME .)
    LOGICAL_OR      reduce using rule 44 (variable -> ID CALL NAME .)
    LOGICAL_XOR     reduce using rule 44 (variable -> ID CALL NAME .)
    TIMES           reduce using rule 44 (variable -> ID CALL NAME .)
    DIVIDE          reduce using rule 44 (variable -> ID CALL NAME .)
    MOD             reduce using rule 44 (variable -> ID CALL NAME .)
    POWER           reduce using rule 44 (variable -> ID CALL NAME .)
    PLUS            reduce using rule 44 (variable -> ID CALL NAME .)
    MINUS           reduce using rule 44 (variable -> ID CALL NAME .)
    EQUAL_TO        reduce using rule 44 (variable -> ID CALL NAME .)
    NOT_EQUAL_TO    reduce using rule 44 (variable -> ID CALL NAME .)
    LESS_THAN       reduce using rule 44 (variable -> ID CALL NAME .)
    GREATER_THAN    reduce using rule 44 (variable -> ID CALL NAME .)
    LESS_EQUAL      reduce using rule 44 (variable -> ID CALL NAME .)
    GREATER_EQUAL   reduce using rule 44 (variable -> ID CALL NAME .)
    IDENTICAL_TO    reduce using rule 44 (variable -> ID CALL NAME .)
    NOT_IDENTICAL_TO reduce using rule 44 (variable -> ID CALL NAME .)
    DIFFERENT       reduce using rule 44 (variable -> ID CALL NAME .)
    SEMICOLON       reduce using rule 44 (variable -> ID CALL NAME .)
    RIGHT_PAREN     reduce using rule 44 (variable -> ID CALL NAME .)
    DOT             reduce using rule 44 (variable -> ID CALL NAME .)
    COMMA           reduce using rule 44 (variable -> ID CALL NAME .)
    RIGHT_BRACKET   reduce using rule 44 (variable -> ID CALL NAME .)


state 194

    (86) if_statement -> IF parenthesized_condition block else_if_extended .
    (87) if_statement -> IF parenthesized_condition block else_if_extended . if_part3
    (90) else_if_extended -> else_if_extended . if_part2
    (92) if_part3 -> . ELSE block
    (91) if_part2 -> . ELSEIF parenthesized_condition block

    CLOSE_TAG       reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ONE_LINE_COMMENT reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    MULTI_LINE_COMMENT reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    BREAK           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    CONTINUE        reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    IF              reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    WHILE           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FUNCTION        reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    CLASS           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FSCANF          reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FGETS           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    NAME            reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    RETURN          reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    UNSET           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    COUNT           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FOR             reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    PRINT           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ECHO            reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ID              reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    INTEGER         reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FLOAT           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    STRING          reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    LEFT_PAREN      reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    TRUE            reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FALSE           reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    LOGICAL_NOT     reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    RIGHT_BRACE     reduce using rule 86 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ELSE            shift and go to state 197
    ELSEIF          shift and go to state 198

    if_part3                       shift and go to state 244
    if_part2                       shift and go to state 245

state 195

    (88) if_statement -> IF parenthesized_condition block if_part3 .

    CLOSE_TAG       reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    ONE_LINE_COMMENT reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    MULTI_LINE_COMMENT reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    BREAK           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    CONTINUE        reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    IF              reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    WHILE           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    FUNCTION        reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    CLASS           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    FSCANF          reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    FGETS           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    NAME            reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    RETURN          reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    UNSET           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    COUNT           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    FOR             reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    PRINT           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    ECHO            reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    ID              reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    INTEGER         reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    FLOAT           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    STRING          reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    LEFT_PAREN      reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    TRUE            reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    FALSE           reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    LOGICAL_NOT     reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)
    RIGHT_BRACE     reduce using rule 88 (if_statement -> IF parenthesized_condition block if_part3 .)


state 196

    (89) else_if_extended -> if_part2 .

    ELSE            reduce using rule 89 (else_if_extended -> if_part2 .)
    ELSEIF          reduce using rule 89 (else_if_extended -> if_part2 .)
    CLOSE_TAG       reduce using rule 89 (else_if_extended -> if_part2 .)
    ONE_LINE_COMMENT reduce using rule 89 (else_if_extended -> if_part2 .)
    MULTI_LINE_COMMENT reduce using rule 89 (else_if_extended -> if_part2 .)
    BREAK           reduce using rule 89 (else_if_extended -> if_part2 .)
    CONTINUE        reduce using rule 89 (else_if_extended -> if_part2 .)
    IF              reduce using rule 89 (else_if_extended -> if_part2 .)
    WHILE           reduce using rule 89 (else_if_extended -> if_part2 .)
    FUNCTION        reduce using rule 89 (else_if_extended -> if_part2 .)
    CLASS           reduce using rule 89 (else_if_extended -> if_part2 .)
    FSCANF          reduce using rule 89 (else_if_extended -> if_part2 .)
    FGETS           reduce using rule 89 (else_if_extended -> if_part2 .)
    NAME            reduce using rule 89 (else_if_extended -> if_part2 .)
    RETURN          reduce using rule 89 (else_if_extended -> if_part2 .)
    UNSET           reduce using rule 89 (else_if_extended -> if_part2 .)
    COUNT           reduce using rule 89 (else_if_extended -> if_part2 .)
    FOR             reduce using rule 89 (else_if_extended -> if_part2 .)
    PRINT           reduce using rule 89 (else_if_extended -> if_part2 .)
    ECHO            reduce using rule 89 (else_if_extended -> if_part2 .)
    ID              reduce using rule 89 (else_if_extended -> if_part2 .)
    INTEGER         reduce using rule 89 (else_if_extended -> if_part2 .)
    FLOAT           reduce using rule 89 (else_if_extended -> if_part2 .)
    STRING          reduce using rule 89 (else_if_extended -> if_part2 .)
    LEFT_PAREN      reduce using rule 89 (else_if_extended -> if_part2 .)
    TRUE            reduce using rule 89 (else_if_extended -> if_part2 .)
    FALSE           reduce using rule 89 (else_if_extended -> if_part2 .)
    LOGICAL_NOT     reduce using rule 89 (else_if_extended -> if_part2 .)
    RIGHT_BRACE     reduce using rule 89 (else_if_extended -> if_part2 .)


state 197

    (92) if_part3 -> ELSE . block
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 246

state 198

    (91) if_part2 -> ELSEIF . parenthesized_condition block
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 77

    parenthesized_condition        shift and go to state 247

state 199

    (106) block -> LEFT_BRACE statements . RIGHT_BRACE
    (4) statements -> statements . statement2
    (5) statement2 -> . statement SEMICOLON
    (6) statement2 -> . if_statement
    (7) statement2 -> . while_statement
    (8) statement2 -> . for_statement
    (9) statement2 -> . function_statement
    (10) statement2 -> . ONE_LINE_COMMENT
    (11) statement2 -> . MULTI_LINE_COMMENT
    (12) statement2 -> . class_declaration
    (13) statement -> . print_statement
    (14) statement -> . fscanf_statement
    (15) statement -> . fgets_statement
    (16) statement -> . assignment_statement
    (17) statement -> . array_declaration_statement
    (18) statement -> . BREAK
    (19) statement -> . CONTINUE
    (20) statement -> . function_call
    (21) statement -> . return_statement
    (22) statement -> . array_indexing
    (23) statement -> . array_add_element
    (24) statement -> . array_modify_element
    (25) statement -> . array_remove_element
    (26) statement -> . array_count_elements
    (27) statement -> . expression
    (85) if_statement -> . IF parenthesized_condition block
    (86) if_statement -> . IF parenthesized_condition block else_if_extended
    (87) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (88) if_statement -> . IF parenthesized_condition block if_part3
    (93) while_statement -> . WHILE parenthesized_condition block
    (96) for_statement -> . for_part1 condition for_part3
    (97) for_statement -> . for_part1 for_part3
    (28) function_statement -> . FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block
    (29) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (149) class_declaration -> . CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE
    (150) class_declaration -> . CLASS NAME LEFT_BRACE RIGHT_BRACE
    (54) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (55) print_statement -> . print_function arguments
    (40) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (135) array_declaration_statement -> . variable EQUALS array
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (36) return_statement -> . RETURN arguments
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (145) array_add_element -> . variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> . variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
    (147) array_remove_element -> . UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
    (148) array_count_elements -> . COUNT LEFT_PAREN variable RIGHT_PAREN
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (94) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (95) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (56) print_function -> . PRINT
    (57) print_function -> . ECHO
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    RIGHT_BRACE     shift and go to state 248
    ONE_LINE_COMMENT shift and go to state 11
    MULTI_LINE_COMMENT shift and go to state 12
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FUNCTION        shift and go to state 34
    CLASS           shift and go to state 37
    FSCANF          shift and go to state 39
    FGETS           shift and go to state 41
    NAME            shift and go to state 35
    RETURN          shift and go to state 43
    UNSET           shift and go to state 44
    COUNT           shift and go to state 45
    FOR             shift and go to state 47
    PRINT           shift and go to state 48
    ECHO            shift and go to state 49
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    statement2                     shift and go to state 62
    statement                      shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    class_declaration              shift and go to state 13
    print_statement                shift and go to state 14
    fscanf_statement               shift and go to state 15
    fgets_statement                shift and go to state 16
    assignment_statement           shift and go to state 17
    array_declaration_statement    shift and go to state 18
    function_call                  shift and go to state 21
    return_statement               shift and go to state 22
    array_indexing                 shift and go to state 23
    array_add_element              shift and go to state 24
    array_modify_element           shift and go to state 25
    array_remove_element           shift and go to state 26
    array_count_elements           shift and go to state 27
    expression                     shift and go to state 28
    parenthesized_condition        shift and go to state 30
    for_part1                      shift and go to state 32
    condition                      shift and go to state 33
    print_function                 shift and go to state 38
    variable                       shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 51
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    relational_expression          shift and go to state 59

state 200

    (107) block -> LEFT_BRACE RIGHT_BRACE .

    ELSE            reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    ELSEIF          reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    CLOSE_TAG       reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    CONTINUE        reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    CLASS           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    FSCANF          reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    FGETS           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    NAME            reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    UNSET           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    COUNT           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    FOR             reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    ECHO            reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    ID              reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    INTEGER         reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    FLOAT           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    STRING          reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    TRUE            reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    FALSE           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    LOGICAL_NOT     reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    PUBLIC          reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    PRIVATE         reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    PROTECTED       reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    DOT             reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    COMMA           reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    SEMICOLON       reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 107 (block -> LEFT_BRACE RIGHT_BRACE .)


state 201

    (98) for_part3 -> SEMICOLON statement_list RIGHT_PAREN . for_part4
    (100) for_part4 -> . block
    (101) for_part4 -> . SEMICOLON
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 203
    LEFT_BRACE      shift and go to state 140

    for_part4                      shift and go to state 249
    block                          shift and go to state 205

state 202

    (105) statement_list -> statement_list COMMA . statement
    (13) statement -> . print_statement
    (14) statement -> . fscanf_statement
    (15) statement -> . fgets_statement
    (16) statement -> . assignment_statement
    (17) statement -> . array_declaration_statement
    (18) statement -> . BREAK
    (19) statement -> . CONTINUE
    (20) statement -> . function_call
    (21) statement -> . return_statement
    (22) statement -> . array_indexing
    (23) statement -> . array_add_element
    (24) statement -> . array_modify_element
    (25) statement -> . array_remove_element
    (26) statement -> . array_count_elements
    (27) statement -> . expression
    (54) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (55) print_statement -> . print_function arguments
    (40) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (135) array_declaration_statement -> . variable EQUALS array
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (36) return_statement -> . RETURN arguments
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (145) array_add_element -> . variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument
    (146) array_modify_element -> . variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument
    (147) array_remove_element -> . UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN
    (148) array_count_elements -> . COUNT LEFT_PAREN variable RIGHT_PAREN
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (56) print_function -> . PRINT
    (57) print_function -> . ECHO
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FSCANF          shift and go to state 39
    FGETS           shift and go to state 41
    NAME            shift and go to state 35
    RETURN          shift and go to state 43
    UNSET           shift and go to state 44
    COUNT           shift and go to state 45
    PRINT           shift and go to state 48
    ECHO            shift and go to state 49
    ID              shift and go to state 50
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 40
    LEFT_PAREN      shift and go to state 36
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    statement                      shift and go to state 250
    print_statement                shift and go to state 14
    fscanf_statement               shift and go to state 15
    fgets_statement                shift and go to state 16
    assignment_statement           shift and go to state 17
    array_declaration_statement    shift and go to state 18
    function_call                  shift and go to state 21
    return_statement               shift and go to state 22
    array_indexing                 shift and go to state 23
    array_add_element              shift and go to state 24
    array_modify_element           shift and go to state 25
    array_remove_element           shift and go to state 26
    array_count_elements           shift and go to state 27
    expression                     shift and go to state 28
    print_function                 shift and go to state 38
    variable                       shift and go to state 42
    term                           shift and go to state 46
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 203

    (101) for_part4 -> SEMICOLON .

    CLOSE_TAG       reduce using rule 101 (for_part4 -> SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 101 (for_part4 -> SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 101 (for_part4 -> SEMICOLON .)
    BREAK           reduce using rule 101 (for_part4 -> SEMICOLON .)
    CONTINUE        reduce using rule 101 (for_part4 -> SEMICOLON .)
    IF              reduce using rule 101 (for_part4 -> SEMICOLON .)
    WHILE           reduce using rule 101 (for_part4 -> SEMICOLON .)
    FUNCTION        reduce using rule 101 (for_part4 -> SEMICOLON .)
    CLASS           reduce using rule 101 (for_part4 -> SEMICOLON .)
    FSCANF          reduce using rule 101 (for_part4 -> SEMICOLON .)
    FGETS           reduce using rule 101 (for_part4 -> SEMICOLON .)
    NAME            reduce using rule 101 (for_part4 -> SEMICOLON .)
    RETURN          reduce using rule 101 (for_part4 -> SEMICOLON .)
    UNSET           reduce using rule 101 (for_part4 -> SEMICOLON .)
    COUNT           reduce using rule 101 (for_part4 -> SEMICOLON .)
    FOR             reduce using rule 101 (for_part4 -> SEMICOLON .)
    PRINT           reduce using rule 101 (for_part4 -> SEMICOLON .)
    ECHO            reduce using rule 101 (for_part4 -> SEMICOLON .)
    ID              reduce using rule 101 (for_part4 -> SEMICOLON .)
    INTEGER         reduce using rule 101 (for_part4 -> SEMICOLON .)
    FLOAT           reduce using rule 101 (for_part4 -> SEMICOLON .)
    STRING          reduce using rule 101 (for_part4 -> SEMICOLON .)
    LEFT_PAREN      reduce using rule 101 (for_part4 -> SEMICOLON .)
    TRUE            reduce using rule 101 (for_part4 -> SEMICOLON .)
    FALSE           reduce using rule 101 (for_part4 -> SEMICOLON .)
    LOGICAL_NOT     reduce using rule 101 (for_part4 -> SEMICOLON .)
    RIGHT_BRACE     reduce using rule 101 (for_part4 -> SEMICOLON .)


state 204

    (99) for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    IF              reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    CLASS           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    NAME            reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    UNSET           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    COUNT           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ID              reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    INTEGER         reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FLOAT           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    STRING          reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    LEFT_PAREN      reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    TRUE            reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FALSE           reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    LOGICAL_NOT     reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 99 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)


state 205

    (100) for_part4 -> block .

    CLOSE_TAG       reduce using rule 100 (for_part4 -> block .)
    ONE_LINE_COMMENT reduce using rule 100 (for_part4 -> block .)
    MULTI_LINE_COMMENT reduce using rule 100 (for_part4 -> block .)
    BREAK           reduce using rule 100 (for_part4 -> block .)
    CONTINUE        reduce using rule 100 (for_part4 -> block .)
    IF              reduce using rule 100 (for_part4 -> block .)
    WHILE           reduce using rule 100 (for_part4 -> block .)
    FUNCTION        reduce using rule 100 (for_part4 -> block .)
    CLASS           reduce using rule 100 (for_part4 -> block .)
    FSCANF          reduce using rule 100 (for_part4 -> block .)
    FGETS           reduce using rule 100 (for_part4 -> block .)
    NAME            reduce using rule 100 (for_part4 -> block .)
    RETURN          reduce using rule 100 (for_part4 -> block .)
    UNSET           reduce using rule 100 (for_part4 -> block .)
    COUNT           reduce using rule 100 (for_part4 -> block .)
    FOR             reduce using rule 100 (for_part4 -> block .)
    PRINT           reduce using rule 100 (for_part4 -> block .)
    ECHO            reduce using rule 100 (for_part4 -> block .)
    ID              reduce using rule 100 (for_part4 -> block .)
    INTEGER         reduce using rule 100 (for_part4 -> block .)
    FLOAT           reduce using rule 100 (for_part4 -> block .)
    STRING          reduce using rule 100 (for_part4 -> block .)
    LEFT_PAREN      reduce using rule 100 (for_part4 -> block .)
    TRUE            reduce using rule 100 (for_part4 -> block .)
    FALSE           reduce using rule 100 (for_part4 -> block .)
    LOGICAL_NOT     reduce using rule 100 (for_part4 -> block .)
    RIGHT_BRACE     reduce using rule 100 (for_part4 -> block .)


state 206

    (28) function_statement -> FUNCTION NAME LEFT_PAREN parameters . RIGHT_PAREN block
    (33) parameters -> parameters . COMMA parameter

    RIGHT_PAREN     shift and go to state 251
    COMMA           shift and go to state 252


state 207

    (29) function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN . block
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 253

state 208

    (32) parameters -> parameter .

    RIGHT_PAREN     reduce using rule 32 (parameters -> parameter .)
    COMMA           reduce using rule 32 (parameters -> parameter .)


state 209

    (34) parameter -> variable .
    (35) parameter -> variable . EQUALS argument

    RIGHT_PAREN     reduce using rule 34 (parameter -> variable .)
    COMMA           reduce using rule 34 (parameter -> variable .)
    EQUALS          shift and go to state 254


state 210

    (37) function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN .

    SEMICOLON       reduce using rule 37 (function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN .)
    DOT             reduce using rule 37 (function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 37 (function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 37 (function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 37 (function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN .)


state 211

    (149) class_declaration -> CLASS NAME LEFT_BRACE class_statements . RIGHT_BRACE
    (152) class_statements -> class_statements . class_statement
    (153) class_statement -> . method_declaration
    (154) class_statement -> . property_declaration
    (155) class_statement -> . ONE_LINE_COMMENT
    (156) class_statement -> . MULTI_LINE_COMMENT
    (157) method_declaration -> . visibility_operator function_statement
    (158) property_declaration -> . visibility_operator variable SEMICOLON
    (159) visibility_operator -> . PUBLIC
    (160) visibility_operator -> . PRIVATE
    (161) visibility_operator -> . PROTECTED

    RIGHT_BRACE     shift and go to state 255
    ONE_LINE_COMMENT shift and go to state 216
    MULTI_LINE_COMMENT shift and go to state 217
    PUBLIC          shift and go to state 219
    PRIVATE         shift and go to state 220
    PROTECTED       shift and go to state 221

    class_statement                shift and go to state 256
    method_declaration             shift and go to state 214
    property_declaration           shift and go to state 215
    visibility_operator            shift and go to state 218

state 212

    (150) class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .

    CLOSE_TAG       reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    CONTINUE        reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    CLASS           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FSCANF          reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FGETS           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    NAME            reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    UNSET           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    COUNT           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FOR             reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    ECHO            reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    ID              reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    INTEGER         reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FLOAT           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    STRING          reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    TRUE            reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    FALSE           reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    LOGICAL_NOT     reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 150 (class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE .)


state 213

    (151) class_statements -> class_statement .

    RIGHT_BRACE     reduce using rule 151 (class_statements -> class_statement .)
    ONE_LINE_COMMENT reduce using rule 151 (class_statements -> class_statement .)
    MULTI_LINE_COMMENT reduce using rule 151 (class_statements -> class_statement .)
    PUBLIC          reduce using rule 151 (class_statements -> class_statement .)
    PRIVATE         reduce using rule 151 (class_statements -> class_statement .)
    PROTECTED       reduce using rule 151 (class_statements -> class_statement .)


state 214

    (153) class_statement -> method_declaration .

    RIGHT_BRACE     reduce using rule 153 (class_statement -> method_declaration .)
    ONE_LINE_COMMENT reduce using rule 153 (class_statement -> method_declaration .)
    MULTI_LINE_COMMENT reduce using rule 153 (class_statement -> method_declaration .)
    PUBLIC          reduce using rule 153 (class_statement -> method_declaration .)
    PRIVATE         reduce using rule 153 (class_statement -> method_declaration .)
    PROTECTED       reduce using rule 153 (class_statement -> method_declaration .)


state 215

    (154) class_statement -> property_declaration .

    RIGHT_BRACE     reduce using rule 154 (class_statement -> property_declaration .)
    ONE_LINE_COMMENT reduce using rule 154 (class_statement -> property_declaration .)
    MULTI_LINE_COMMENT reduce using rule 154 (class_statement -> property_declaration .)
    PUBLIC          reduce using rule 154 (class_statement -> property_declaration .)
    PRIVATE         reduce using rule 154 (class_statement -> property_declaration .)
    PROTECTED       reduce using rule 154 (class_statement -> property_declaration .)


state 216

    (155) class_statement -> ONE_LINE_COMMENT .

    RIGHT_BRACE     reduce using rule 155 (class_statement -> ONE_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 155 (class_statement -> ONE_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 155 (class_statement -> ONE_LINE_COMMENT .)
    PUBLIC          reduce using rule 155 (class_statement -> ONE_LINE_COMMENT .)
    PRIVATE         reduce using rule 155 (class_statement -> ONE_LINE_COMMENT .)
    PROTECTED       reduce using rule 155 (class_statement -> ONE_LINE_COMMENT .)


state 217

    (156) class_statement -> MULTI_LINE_COMMENT .

    RIGHT_BRACE     reduce using rule 156 (class_statement -> MULTI_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 156 (class_statement -> MULTI_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 156 (class_statement -> MULTI_LINE_COMMENT .)
    PUBLIC          reduce using rule 156 (class_statement -> MULTI_LINE_COMMENT .)
    PRIVATE         reduce using rule 156 (class_statement -> MULTI_LINE_COMMENT .)
    PROTECTED       reduce using rule 156 (class_statement -> MULTI_LINE_COMMENT .)


state 218

    (157) method_declaration -> visibility_operator . function_statement
    (158) property_declaration -> visibility_operator . variable SEMICOLON
    (28) function_statement -> . FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block
    (29) function_statement -> . FUNCTION NAME LEFT_PAREN RIGHT_PAREN block
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    FUNCTION        shift and go to state 34
    ID              shift and go to state 50

    function_statement             shift and go to state 257
    variable                       shift and go to state 258

state 219

    (159) visibility_operator -> PUBLIC .

    FUNCTION        reduce using rule 159 (visibility_operator -> PUBLIC .)
    ID              reduce using rule 159 (visibility_operator -> PUBLIC .)


state 220

    (160) visibility_operator -> PRIVATE .

    FUNCTION        reduce using rule 160 (visibility_operator -> PRIVATE .)
    ID              reduce using rule 160 (visibility_operator -> PRIVATE .)


state 221

    (161) visibility_operator -> PROTECTED .

    FUNCTION        reduce using rule 161 (visibility_operator -> PROTECTED .)
    ID              reduce using rule 161 (visibility_operator -> PROTECTED .)


state 222

    (54) print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .

    SEMICOLON       reduce using rule 54 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 54 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 54 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)


state 223

    (132) casting -> LEFT_PAREN casting_type RIGHT_PAREN .

    STRING          reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    ID              reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    ARRAY           reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    NAME            reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FUNCTION        reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FGETS           reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    NEW             reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    INTEGER         reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FLOAT           reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    TRUE            reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FALSE           reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LOGICAL_NOT     reduce using rule 132 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)


state 224

    (59) arguments -> arguments DOT argument .

    DOT             reduce using rule 59 (arguments -> arguments DOT argument .)
    COMMA           reduce using rule 59 (arguments -> arguments DOT argument .)
    SEMICOLON       reduce using rule 59 (arguments -> arguments DOT argument .)
    RIGHT_PAREN     reduce using rule 59 (arguments -> arguments DOT argument .)


state 225

    (60) arguments -> arguments COMMA argument .

    DOT             reduce using rule 60 (arguments -> arguments COMMA argument .)
    COMMA           reduce using rule 60 (arguments -> arguments COMMA argument .)
    SEMICOLON       reduce using rule 60 (arguments -> arguments COMMA argument .)
    RIGHT_PAREN     reduce using rule 60 (arguments -> arguments COMMA argument .)


state 226

    (66) argument -> ID CALL function_call .

    DOT             reduce using rule 66 (argument -> ID CALL function_call .)
    COMMA           reduce using rule 66 (argument -> ID CALL function_call .)
    SEMICOLON       reduce using rule 66 (argument -> ID CALL function_call .)
    RIGHT_PAREN     reduce using rule 66 (argument -> ID CALL function_call .)
    RIGHT_BRACKET   reduce using rule 66 (argument -> ID CALL function_call .)


state 227

    (44) variable -> ID CALL NAME .
    (37) function_call -> NAME . LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> NAME . LEFT_PAREN RIGHT_PAREN

    LEFT_BRACKET    reduce using rule 44 (variable -> ID CALL NAME .)
    PLUS_PLUS       reduce using rule 44 (variable -> ID CALL NAME .)
    MINUS_MINUS     reduce using rule 44 (variable -> ID CALL NAME .)
    EQUALS          reduce using rule 44 (variable -> ID CALL NAME .)
    PLUS_EQUALS     reduce using rule 44 (variable -> ID CALL NAME .)
    MINUS_EQUALS    reduce using rule 44 (variable -> ID CALL NAME .)
    TIMES_EQUALS    reduce using rule 44 (variable -> ID CALL NAME .)
    DIVIDE_EQUALS   reduce using rule 44 (variable -> ID CALL NAME .)
    MOD_EQUALS      reduce using rule 44 (variable -> ID CALL NAME .)
    LOGICAL_AND     reduce using rule 44 (variable -> ID CALL NAME .)
    LOGICAL_OR      reduce using rule 44 (variable -> ID CALL NAME .)
    LOGICAL_XOR     reduce using rule 44 (variable -> ID CALL NAME .)
    TIMES           reduce using rule 44 (variable -> ID CALL NAME .)
    DIVIDE          reduce using rule 44 (variable -> ID CALL NAME .)
    MOD             reduce using rule 44 (variable -> ID CALL NAME .)
    POWER           reduce using rule 44 (variable -> ID CALL NAME .)
    PLUS            reduce using rule 44 (variable -> ID CALL NAME .)
    MINUS           reduce using rule 44 (variable -> ID CALL NAME .)
    EQUAL_TO        reduce using rule 44 (variable -> ID CALL NAME .)
    NOT_EQUAL_TO    reduce using rule 44 (variable -> ID CALL NAME .)
    LESS_THAN       reduce using rule 44 (variable -> ID CALL NAME .)
    GREATER_THAN    reduce using rule 44 (variable -> ID CALL NAME .)
    LESS_EQUAL      reduce using rule 44 (variable -> ID CALL NAME .)
    GREATER_EQUAL   reduce using rule 44 (variable -> ID CALL NAME .)
    IDENTICAL_TO    reduce using rule 44 (variable -> ID CALL NAME .)
    NOT_IDENTICAL_TO reduce using rule 44 (variable -> ID CALL NAME .)
    DIFFERENT       reduce using rule 44 (variable -> ID CALL NAME .)
    DOT             reduce using rule 44 (variable -> ID CALL NAME .)
    COMMA           reduce using rule 44 (variable -> ID CALL NAME .)
    SEMICOLON       reduce using rule 44 (variable -> ID CALL NAME .)
    RIGHT_PAREN     reduce using rule 44 (variable -> ID CALL NAME .)
    RIGHT_BRACKET   reduce using rule 44 (variable -> ID CALL NAME .)
    LEFT_PAREN      shift and go to state 90


state 228

    (136) array -> ARRAY LEFT_PAREN array_elements . RIGHT_PAREN
    (139) array_elements -> array_elements . COMMA array_argument

    RIGHT_PAREN     shift and go to state 259
    COMMA           shift and go to state 230


state 229

    (137) array -> LEFT_BRACKET array_elements RIGHT_BRACKET .

    DOT             reduce using rule 137 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    COMMA           reduce using rule 137 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 137 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 137 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 137 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 230

    (139) array_elements -> array_elements COMMA . array_argument
    (140) array_argument -> . argument
    (141) array_argument -> . clave KEY_VALUE argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (142) clave -> . STRING
    (143) clave -> . INTEGER
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 169
    ID              shift and go to state 102
    INTEGER         shift and go to state 170
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    array_argument                 shift and go to state 260
    argument                       shift and go to state 167
    clave                          shift and go to state 168
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 231

    (141) array_argument -> clave KEY_VALUE . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    argument                       shift and go to state 261
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 232

    (144) array_indexing -> variable LEFT_BRACKET clave . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 262


state 233

    (30) anonymous_function -> FUNCTION LEFT_PAREN parameters . RIGHT_PAREN block
    (33) parameters -> parameters . COMMA parameter

    RIGHT_PAREN     shift and go to state 263
    COMMA           shift and go to state 252


state 234

    (31) anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN . block
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 264

state 235

    (162) object_creation -> NEW NAME LEFT_PAREN . RIGHT_PAREN
    (163) object_creation -> NEW NAME LEFT_PAREN . arguments RIGHT_PAREN
    (58) arguments -> . argument
    (59) arguments -> . arguments DOT argument
    (60) arguments -> . arguments COMMA argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    RIGHT_PAREN     shift and go to state 265
    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    arguments                      shift and go to state 266
    argument                       shift and go to state 96
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    variable                       shift and go to state 110
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 236

    (40) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA . STRING COMMA variable_list RIGHT_PAREN

    STRING          shift and go to state 267


state 237

    (39) fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    DOT             reduce using rule 39 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    COMMA           reduce using rule 39 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 39 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)


state 238

    (144) array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .
    (146) array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET . EQUALS argument

    SEMICOLON       reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)
    COMMA           reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)
    EQUALS          shift and go to state 268


state 239

    (145) array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    variable                       shift and go to state 110
    argument                       shift and go to state 269
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 240

    (147) array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET . clave RIGHT_BRACKET RIGHT_PAREN
    (142) clave -> . STRING
    (143) clave -> . INTEGER

    STRING          shift and go to state 181
    INTEGER         shift and go to state 182

    clave                          shift and go to state 270

state 241

    (148) array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN .

    SEMICOLON       reduce using rule 148 (array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 148 (array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN .)
    COMMA           reduce using rule 148 (array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN .)


state 242

    (94) for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .

    SEMICOLON       reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    TRUE            reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FALSE           reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LOGICAL_NOT     reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LEFT_PAREN      reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    ID              reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    INTEGER         reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FLOAT           reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    STRING          reduce using rule 94 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)


state 243

    (103) assignment_list -> assignment_list COMMA . assignment_statement
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    ID              shift and go to state 50

    assignment_statement           shift and go to state 271
    variable                       shift and go to state 192

state 244

    (87) if_statement -> IF parenthesized_condition block else_if_extended if_part3 .

    CLOSE_TAG       reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ONE_LINE_COMMENT reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    MULTI_LINE_COMMENT reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    BREAK           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    CONTINUE        reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    IF              reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    WHILE           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FUNCTION        reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    CLASS           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FSCANF          reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FGETS           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    NAME            reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    RETURN          reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    UNSET           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    COUNT           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FOR             reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    PRINT           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ECHO            reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ID              reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    INTEGER         reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FLOAT           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    STRING          reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    LEFT_PAREN      reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    TRUE            reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FALSE           reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    LOGICAL_NOT     reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    RIGHT_BRACE     reduce using rule 87 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)


state 245

    (90) else_if_extended -> else_if_extended if_part2 .

    ELSE            reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    ELSEIF          reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    CLOSE_TAG       reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    ONE_LINE_COMMENT reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    MULTI_LINE_COMMENT reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    BREAK           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    CONTINUE        reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    IF              reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    WHILE           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    FUNCTION        reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    CLASS           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    FSCANF          reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    FGETS           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    NAME            reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    RETURN          reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    UNSET           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    COUNT           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    FOR             reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    PRINT           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    ECHO            reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    ID              reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    INTEGER         reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    FLOAT           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    STRING          reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    LEFT_PAREN      reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    TRUE            reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    FALSE           reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    LOGICAL_NOT     reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)
    RIGHT_BRACE     reduce using rule 90 (else_if_extended -> else_if_extended if_part2 .)


state 246

    (92) if_part3 -> ELSE block .

    CLOSE_TAG       reduce using rule 92 (if_part3 -> ELSE block .)
    ONE_LINE_COMMENT reduce using rule 92 (if_part3 -> ELSE block .)
    MULTI_LINE_COMMENT reduce using rule 92 (if_part3 -> ELSE block .)
    BREAK           reduce using rule 92 (if_part3 -> ELSE block .)
    CONTINUE        reduce using rule 92 (if_part3 -> ELSE block .)
    IF              reduce using rule 92 (if_part3 -> ELSE block .)
    WHILE           reduce using rule 92 (if_part3 -> ELSE block .)
    FUNCTION        reduce using rule 92 (if_part3 -> ELSE block .)
    CLASS           reduce using rule 92 (if_part3 -> ELSE block .)
    FSCANF          reduce using rule 92 (if_part3 -> ELSE block .)
    FGETS           reduce using rule 92 (if_part3 -> ELSE block .)
    NAME            reduce using rule 92 (if_part3 -> ELSE block .)
    RETURN          reduce using rule 92 (if_part3 -> ELSE block .)
    UNSET           reduce using rule 92 (if_part3 -> ELSE block .)
    COUNT           reduce using rule 92 (if_part3 -> ELSE block .)
    FOR             reduce using rule 92 (if_part3 -> ELSE block .)
    PRINT           reduce using rule 92 (if_part3 -> ELSE block .)
    ECHO            reduce using rule 92 (if_part3 -> ELSE block .)
    ID              reduce using rule 92 (if_part3 -> ELSE block .)
    INTEGER         reduce using rule 92 (if_part3 -> ELSE block .)
    FLOAT           reduce using rule 92 (if_part3 -> ELSE block .)
    STRING          reduce using rule 92 (if_part3 -> ELSE block .)
    LEFT_PAREN      reduce using rule 92 (if_part3 -> ELSE block .)
    TRUE            reduce using rule 92 (if_part3 -> ELSE block .)
    FALSE           reduce using rule 92 (if_part3 -> ELSE block .)
    LOGICAL_NOT     reduce using rule 92 (if_part3 -> ELSE block .)
    RIGHT_BRACE     reduce using rule 92 (if_part3 -> ELSE block .)


state 247

    (91) if_part2 -> ELSEIF parenthesized_condition . block
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 272

state 248

    (106) block -> LEFT_BRACE statements RIGHT_BRACE .

    ELSE            reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ELSEIF          reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CLOSE_TAG       reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    BREAK           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CONTINUE        reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    IF              reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    WHILE           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CLASS           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FSCANF          reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FGETS           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    NAME            reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RETURN          reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    UNSET           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    COUNT           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FOR             reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PRINT           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ECHO            reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ID              reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    INTEGER         reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FLOAT           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    STRING          reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    TRUE            reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FALSE           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    LOGICAL_NOT     reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PUBLIC          reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PRIVATE         reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PROTECTED       reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    DOT             reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    COMMA           reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    SEMICOLON       reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 106 (block -> LEFT_BRACE statements RIGHT_BRACE .)


state 249

    (98) for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    IF              reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    CLASS           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    NAME            reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    UNSET           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    COUNT           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ID              reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    INTEGER         reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FLOAT           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    STRING          reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    LEFT_PAREN      reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    TRUE            reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FALSE           reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    LOGICAL_NOT     reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 98 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)


state 250

    (105) statement_list -> statement_list COMMA statement .

    RIGHT_PAREN     reduce using rule 105 (statement_list -> statement_list COMMA statement .)
    COMMA           reduce using rule 105 (statement_list -> statement_list COMMA statement .)


state 251

    (28) function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN . block
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 273

state 252

    (33) parameters -> parameters COMMA . parameter
    (34) parameter -> . variable
    (35) parameter -> . variable EQUALS argument
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    ID              shift and go to state 50

    parameter                      shift and go to state 274
    variable                       shift and go to state 209

state 253

    (29) function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .

    CLOSE_TAG       reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    BREAK           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    CONTINUE        reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    IF              reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    WHILE           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FUNCTION        reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    CLASS           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FSCANF          reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FGETS           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    NAME            reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    RETURN          reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    UNSET           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    COUNT           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FOR             reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PRINT           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    ECHO            reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    ID              reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    INTEGER         reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FLOAT           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    STRING          reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    LEFT_PAREN      reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    TRUE            reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    FALSE           reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    LOGICAL_NOT     reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PUBLIC          reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PRIVATE         reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)
    PROTECTED       reduce using rule 29 (function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block .)


state 254

    (35) parameter -> variable EQUALS . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    variable                       shift and go to state 110
    argument                       shift and go to state 275
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 255

    (149) class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .

    CLOSE_TAG       reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    BREAK           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    CONTINUE        reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    IF              reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    WHILE           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    CLASS           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FSCANF          reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FGETS           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    NAME            reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    RETURN          reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    UNSET           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    COUNT           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FOR             reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    PRINT           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    ECHO            reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    ID              reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    INTEGER         reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FLOAT           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    STRING          reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    TRUE            reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    FALSE           reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    LOGICAL_NOT     reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 149 (class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE .)


state 256

    (152) class_statements -> class_statements class_statement .

    RIGHT_BRACE     reduce using rule 152 (class_statements -> class_statements class_statement .)
    ONE_LINE_COMMENT reduce using rule 152 (class_statements -> class_statements class_statement .)
    MULTI_LINE_COMMENT reduce using rule 152 (class_statements -> class_statements class_statement .)
    PUBLIC          reduce using rule 152 (class_statements -> class_statements class_statement .)
    PRIVATE         reduce using rule 152 (class_statements -> class_statements class_statement .)
    PROTECTED       reduce using rule 152 (class_statements -> class_statements class_statement .)


state 257

    (157) method_declaration -> visibility_operator function_statement .

    RIGHT_BRACE     reduce using rule 157 (method_declaration -> visibility_operator function_statement .)
    ONE_LINE_COMMENT reduce using rule 157 (method_declaration -> visibility_operator function_statement .)
    MULTI_LINE_COMMENT reduce using rule 157 (method_declaration -> visibility_operator function_statement .)
    PUBLIC          reduce using rule 157 (method_declaration -> visibility_operator function_statement .)
    PRIVATE         reduce using rule 157 (method_declaration -> visibility_operator function_statement .)
    PROTECTED       reduce using rule 157 (method_declaration -> visibility_operator function_statement .)


state 258

    (158) property_declaration -> visibility_operator variable . SEMICOLON

    SEMICOLON       shift and go to state 276


state 259

    (136) array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .

    DOT             reduce using rule 136 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    COMMA           reduce using rule 136 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    SEMICOLON       reduce using rule 136 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 136 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 136 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)


state 260

    (139) array_elements -> array_elements COMMA array_argument .

    RIGHT_BRACKET   reduce using rule 139 (array_elements -> array_elements COMMA array_argument .)
    COMMA           reduce using rule 139 (array_elements -> array_elements COMMA array_argument .)
    RIGHT_PAREN     reduce using rule 139 (array_elements -> array_elements COMMA array_argument .)


state 261

    (141) array_argument -> clave KEY_VALUE argument .

    RIGHT_BRACKET   reduce using rule 141 (array_argument -> clave KEY_VALUE argument .)
    COMMA           reduce using rule 141 (array_argument -> clave KEY_VALUE argument .)
    RIGHT_PAREN     reduce using rule 141 (array_argument -> clave KEY_VALUE argument .)


state 262

    (144) array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .

    DOT             reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)
    COMMA           reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 144 (array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET .)


state 263

    (30) anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN . block
    (106) block -> . LEFT_BRACE statements RIGHT_BRACE
    (107) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140

    block                          shift and go to state 277

state 264

    (31) anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .

    DOT             reduce using rule 31 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    COMMA           reduce using rule 31 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    SEMICOLON       reduce using rule 31 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    RIGHT_PAREN     reduce using rule 31 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)
    RIGHT_BRACKET   reduce using rule 31 (anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block .)


state 265

    (162) object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .

    DOT             reduce using rule 162 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 162 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 162 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 162 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 162 (object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN .)


state 266

    (163) object_creation -> NEW NAME LEFT_PAREN arguments . RIGHT_PAREN
    (59) arguments -> arguments . DOT argument
    (60) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 278
    DOT             shift and go to state 160
    COMMA           shift and go to state 161


state 267

    (40) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING . COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 279


state 268

    (146) array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS . argument
    (61) argument -> . STRING
    (62) argument -> . expression
    (63) argument -> . array
    (64) argument -> . array_indexing
    (65) argument -> . function_call
    (66) argument -> . ID CALL function_call
    (67) argument -> . anonymous_function
    (68) argument -> . assignment_statement
    (69) argument -> . fgets_statement
    (70) argument -> . object_creation
    (71) argument -> . casting argument
    (72) expression -> . expression PLUS term
    (73) expression -> . expression MINUS term
    (74) expression -> . term
    (136) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (137) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET
    (144) array_indexing -> . variable LEFT_BRACKET clave RIGHT_BRACKET
    (37) function_call -> . NAME LEFT_PAREN arguments RIGHT_PAREN
    (38) function_call -> . NAME LEFT_PAREN RIGHT_PAREN
    (30) anonymous_function -> . FUNCTION LEFT_PAREN parameters RIGHT_PAREN block
    (31) anonymous_function -> . FUNCTION LEFT_PAREN RIGHT_PAREN block
    (45) assignment_statement -> . variable assignment_operator argument
    (46) assignment_statement -> . variable PLUS_PLUS
    (47) assignment_statement -> . variable MINUS_MINUS
    (39) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (162) object_creation -> . NEW NAME LEFT_PAREN RIGHT_PAREN
    (163) object_creation -> . NEW NAME LEFT_PAREN arguments RIGHT_PAREN
    (132) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (75) term -> . term TIMES factor
    (76) term -> . term DIVIDE factor
    (77) term -> . term MOD factor
    (78) term -> . term POWER factor
    (79) term -> . factor
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME
    (80) factor -> . INTEGER
    (81) factor -> . FLOAT
    (82) factor -> . condition
    (83) factor -> . STRING
    (84) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (108) condition -> . simple_condition
    (109) condition -> . negated_condition
    (110) condition -> . complex_condition
    (111) condition -> . parenthesized_condition
    (112) simple_condition -> . TRUE
    (113) simple_condition -> . FALSE
    (114) simple_condition -> . variable
    (115) simple_condition -> . relational_expression
    (116) negated_condition -> . LOGICAL_NOT condition
    (117) complex_condition -> . condition logical_operator condition
    (118) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (119) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 97
    ID              shift and go to state 102
    ARRAY           shift and go to state 108
    LEFT_BRACKET    shift and go to state 109
    NAME            shift and go to state 35
    FUNCTION        shift and go to state 111
    FGETS           shift and go to state 41
    NEW             shift and go to state 112
    LEFT_PAREN      shift and go to state 126
    INTEGER         shift and go to state 52
    FLOAT           shift and go to state 53
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LOGICAL_NOT     shift and go to state 60

    variable                       shift and go to state 110
    argument                       shift and go to state 280
    expression                     shift and go to state 98
    array                          shift and go to state 99
    array_indexing                 shift and go to state 100
    function_call                  shift and go to state 101
    anonymous_function             shift and go to state 103
    assignment_statement           shift and go to state 104
    fgets_statement                shift and go to state 105
    object_creation                shift and go to state 106
    casting                        shift and go to state 107
    term                           shift and go to state 46
    factor                         shift and go to state 51
    condition                      shift and go to state 33
    simple_condition               shift and go to state 54
    negated_condition              shift and go to state 55
    complex_condition              shift and go to state 56
    parenthesized_condition        shift and go to state 30
    relational_expression          shift and go to state 59

state 269

    (145) array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument .

    SEMICOLON       reduce using rule 145 (array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument .)
    RIGHT_PAREN     reduce using rule 145 (array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument .)
    COMMA           reduce using rule 145 (array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument .)


state 270

    (147) array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave . RIGHT_BRACKET RIGHT_PAREN

    RIGHT_BRACKET   shift and go to state 281


state 271

    (103) assignment_list -> assignment_list COMMA assignment_statement .

    SEMICOLON       reduce using rule 103 (assignment_list -> assignment_list COMMA assignment_statement .)
    COMMA           reduce using rule 103 (assignment_list -> assignment_list COMMA assignment_statement .)


state 272

    (91) if_part2 -> ELSEIF parenthesized_condition block .

    ELSE            reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    ELSEIF          reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    CLOSE_TAG       reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    BREAK           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    CONTINUE        reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    IF              reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    WHILE           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    FUNCTION        reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    CLASS           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    FSCANF          reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    FGETS           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    NAME            reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    RETURN          reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    UNSET           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    COUNT           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    FOR             reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    PRINT           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    ECHO            reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    ID              reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    INTEGER         reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    FLOAT           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    STRING          reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    LEFT_PAREN      reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    TRUE            reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    FALSE           reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    LOGICAL_NOT     reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 91 (if_part2 -> ELSEIF parenthesized_condition block .)


state 273

    (28) function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .

    CLOSE_TAG       reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    BREAK           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    CONTINUE        reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    IF              reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    WHILE           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    FUNCTION        reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    CLASS           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    FSCANF          reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    FGETS           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    NAME            reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    RETURN          reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    UNSET           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    COUNT           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    FOR             reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    PRINT           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    ECHO            reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    ID              reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    INTEGER         reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    FLOAT           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    STRING          reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    LEFT_PAREN      reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    TRUE            reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    FALSE           reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    LOGICAL_NOT     reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    PUBLIC          reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    PRIVATE         reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)
    PROTECTED       reduce using rule 28 (function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block .)


state 274

    (33) parameters -> parameters COMMA parameter .

    RIGHT_PAREN     reduce using rule 33 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 33 (parameters -> parameters COMMA parameter .)


state 275

    (35) parameter -> variable EQUALS argument .

    RIGHT_PAREN     reduce using rule 35 (parameter -> variable EQUALS argument .)
    COMMA           reduce using rule 35 (parameter -> variable EQUALS argument .)


state 276

    (158) property_declaration -> visibility_operator variable SEMICOLON .

    RIGHT_BRACE     reduce using rule 158 (property_declaration -> visibility_operator variable SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 158 (property_declaration -> visibility_operator variable SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 158 (property_declaration -> visibility_operator variable SEMICOLON .)
    PUBLIC          reduce using rule 158 (property_declaration -> visibility_operator variable SEMICOLON .)
    PRIVATE         reduce using rule 158 (property_declaration -> visibility_operator variable SEMICOLON .)
    PROTECTED       reduce using rule 158 (property_declaration -> visibility_operator variable SEMICOLON .)


state 277

    (30) anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block .

    DOT             reduce using rule 30 (anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block .)
    COMMA           reduce using rule 30 (anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block .)
    SEMICOLON       reduce using rule 30 (anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block .)
    RIGHT_PAREN     reduce using rule 30 (anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block .)
    RIGHT_BRACKET   reduce using rule 30 (anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block .)


state 278

    (163) object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .

    DOT             reduce using rule 163 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 163 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    SEMICOLON       reduce using rule 163 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 163 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 163 (object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN .)


state 279

    (40) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA . variable_list RIGHT_PAREN
    (41) variable_list -> . variable
    (42) variable_list -> . variable_list COMMA variable
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    ID              shift and go to state 50

    variable_list                  shift and go to state 282
    variable                       shift and go to state 283

state 280

    (146) array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument .

    SEMICOLON       reduce using rule 146 (array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument .)
    RIGHT_PAREN     reduce using rule 146 (array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument .)
    COMMA           reduce using rule 146 (array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument .)


state 281

    (147) array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 284


state 282

    (40) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list . RIGHT_PAREN
    (42) variable_list -> variable_list . COMMA variable

    RIGHT_PAREN     shift and go to state 286
    COMMA           shift and go to state 285


state 283

    (41) variable_list -> variable .

    RIGHT_PAREN     reduce using rule 41 (variable_list -> variable .)
    COMMA           reduce using rule 41 (variable_list -> variable .)


state 284

    (147) array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN .

    SEMICOLON       reduce using rule 147 (array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 147 (array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN .)
    COMMA           reduce using rule 147 (array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN .)


state 285

    (42) variable_list -> variable_list COMMA . variable
    (43) variable -> . ID
    (44) variable -> . ID CALL NAME

    ID              shift and go to state 50

    variable                       shift and go to state 287

state 286

    (40) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    COMMA           reduce using rule 40 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)


state 287

    (42) variable_list -> variable_list COMMA variable .

    RIGHT_PAREN     reduce using rule 42 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 42 (variable_list -> variable_list COMMA variable .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOGICAL_AND in state 33 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 33 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 33 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for MOD in state 46 resolved as shift
WARNING: shift/reduce conflict for POWER in state 46 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 92 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 95 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 118 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 135 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 135 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 135 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD in state 136 resolved as shift
WARNING: shift/reduce conflict for POWER in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD in state 137 resolved as shift
WARNING: shift/reduce conflict for POWER in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 138 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL_TO in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL_TO in state 138 resolved as shift
WARNING: shift/reduce conflict for NOT_IDENTICAL_TO in state 138 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 138 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 146 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 146 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 146 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 156 resolved as shift
WARNING: reduce/reduce conflict in state 97 resolved using rule (argument -> STRING)
WARNING: rejected rule (factor -> STRING) in state 97
WARNING: reduce/reduce conflict in state 135 resolved using rule (factor -> condition)
WARNING: rejected rule (negated_condition -> LOGICAL_NOT condition) in state 135
WARNING: reduce/reduce conflict in state 136 resolved using rule (expression -> expression PLUS term)
WARNING: rejected rule (expression -> term) in state 136
WARNING: reduce/reduce conflict in state 137 resolved using rule (expression -> expression MINUS term)
WARNING: rejected rule (expression -> term) in state 137
WARNING: reduce/reduce conflict in state 146 resolved using rule (factor -> condition)
WARNING: rejected rule (complex_condition -> condition logical_operator condition) in state 146
WARNING: reduce/reduce conflict in state 169 resolved using rule (argument -> STRING)
WARNING: rejected rule (factor -> STRING) in state 169
WARNING: reduce/reduce conflict in state 185 resolved using rule (term -> term TIMES factor)
WARNING: rejected rule (term -> factor) in state 185
WARNING: reduce/reduce conflict in state 186 resolved using rule (term -> term DIVIDE factor)
WARNING: rejected rule (term -> factor) in state 186
WARNING: reduce/reduce conflict in state 187 resolved using rule (term -> term MOD factor)
WARNING: rejected rule (term -> factor) in state 187
WARNING: reduce/reduce conflict in state 188 resolved using rule (term -> term POWER factor)
WARNING: rejected rule (term -> factor) in state 188
