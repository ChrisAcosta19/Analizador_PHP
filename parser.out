Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    ASYNC
    AWAIT
    BOOL
    CALL
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    CONST
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ENUM
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    ITERABLE
    KEY_VALUE
    LIST
    LPAREN
    MATCH
    MIXED
    MOD
    NAMESPACE
    NEW
    NULL
    OBJECT
    POWER
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    RPAREN
    SELF
    STATIC
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    VOID
    YIELD
    YIELD_FROM
    object_declaration

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG statements CLOSE_TAG
Rule 2     statements -> statement2
Rule 3     statements -> statements statement2
Rule 4     statement2 -> statement SEMICOLON
Rule 5     statement2 -> if_statement
Rule 6     statement2 -> while_statement
Rule 7     statement2 -> for_statement
Rule 8     statement2 -> function_statement
Rule 9     statement2 -> ONE_LINE_COMMENT
Rule 10    statement2 -> MULTI_LINE_COMMENT
Rule 11    statement -> print_statement
Rule 12    statement -> fscanf_statement
Rule 13    statement -> fgets_statement
Rule 14    statement -> assignment_statement
Rule 15    statement -> array_declaration_statement
Rule 16    statement -> BREAK
Rule 17    statement -> CONTINUE
Rule 18    statement -> function_call
Rule 19    statement -> return_statement
Rule 20    function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
Rule 21    lambda_function -> LAMBDA arguments COLON expression
Rule 22    arrow_function -> ARROW arguments ARROW expression
Rule 23    return_statement -> RETURN expression
Rule 24    fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN
Rule 25    fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
Rule 26    variable_list -> variable
Rule 27    variable_list -> variable_list COMMA variable
Rule 28    variable -> ID
Rule 29    assignment_statement -> variable assignment_operator argument
Rule 30    assignment_statement -> variable PLUS_PLUS
Rule 31    assignment_statement -> variable MINUS_MINUS
Rule 32    assignment_operator -> EQUALS
Rule 33    assignment_operator -> PLUS_EQUALS
Rule 34    assignment_operator -> MINUS_EQUALS
Rule 35    assignment_operator -> TIMES_EQUALS
Rule 36    assignment_operator -> DIVIDE_EQUALS
Rule 37    assignment_operator -> MOD_EQUALS
Rule 38    print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN
Rule 39    print_statement -> print_function arguments
Rule 40    print_function -> PRINT
Rule 41    print_function -> ECHO
Rule 42    arguments -> argument
Rule 43    arguments -> arguments DOT argument
Rule 44    arguments -> arguments COMMA argument
Rule 45    argument -> STRING
Rule 46    argument -> expression
Rule 47    argument -> assignment_statement
Rule 48    argument -> function_call
Rule 49    argument -> fgets_statement
Rule 50    argument -> array_indexing
Rule 51    argument -> casting argument
Rule 52    expression -> expression PLUS term
Rule 53    expression -> expression MINUS term
Rule 54    expression -> term
Rule 55    term -> term TIMES factor
Rule 56    term -> term DIVIDE factor
Rule 57    term -> factor
Rule 58    factor -> INTEGER
Rule 59    factor -> FLOAT
Rule 60    factor -> condition
Rule 61    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 62    if_statement -> IF parenthesized_condition block
Rule 63    if_statement -> IF parenthesized_condition block else_if_extended
Rule 64    if_statement -> IF parenthesized_condition block else_if_extended if_part3
Rule 65    if_statement -> IF parenthesized_condition block if_part3
Rule 66    else_if_extended -> if_part2
Rule 67    else_if_extended -> else_if_extended if_part2
Rule 68    if_part2 -> ELSEIF parenthesized_condition block
Rule 69    if_part3 -> ELSE block
Rule 70    while_statement -> WHILE parenthesized_condition block
Rule 71    for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON
Rule 72    for_part1 -> FOR LEFT_PAREN SEMICOLON
Rule 73    for_statement -> for_part1 condition for_part3
Rule 74    for_statement -> for_part1 for_part3
Rule 75    for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4
Rule 76    for_part3 -> SEMICOLON RIGHT_PAREN for_part4
Rule 77    for_part4 -> block
Rule 78    for_part4 -> SEMICOLON
Rule 79    assignment_list -> assignment_statement
Rule 80    assignment_list -> assignment_list COMMA assignment_statement
Rule 81    statement_list -> statement
Rule 82    statement_list -> statement_list COMMA statement
Rule 83    block -> LEFT_BRACE statements RIGHT_BRACE
Rule 84    block -> LEFT_BRACE RIGHT_BRACE
Rule 85    condition -> simple_condition
Rule 86    condition -> negated_condition
Rule 87    condition -> complex_condition
Rule 88    condition -> parenthesized_condition
Rule 89    simple_condition -> TRUE
Rule 90    simple_condition -> FALSE
Rule 91    simple_condition -> variable
Rule 92    simple_condition -> relational_expression
Rule 93    negated_condition -> LOGICAL_NOT condition
Rule 94    complex_condition -> condition logical_operator condition
Rule 95    parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN
Rule 96    relational_expression -> expression relational_operator expression
Rule 97    relational_operator -> EQUAL_TO
Rule 98    relational_operator -> NOT_EQUAL_TO
Rule 99    relational_operator -> LESS_THAN
Rule 100   relational_operator -> GREATER_THAN
Rule 101   relational_operator -> LESS_EQUAL
Rule 102   relational_operator -> GREATER_EQUAL
Rule 103   relational_operator -> IDENTICAL_TO
Rule 104   relational_operator -> NOT_IDENTICAL_TO
Rule 105   relational_operator -> DIFFERENT
Rule 106   logical_operator -> LOGICAL_AND
Rule 107   logical_operator -> LOGICAL_OR
Rule 108   logical_operator -> LOGICAL_XOR
Rule 109   casting -> LEFT_PAREN casting_type RIGHT_PAREN
Rule 110   casting_type -> INT_TYPE
Rule 111   casting_type -> FLOAT_TYPE
Rule 112   function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN
Rule 113   array_declaration_statement -> variable EQUALS array
Rule 114   array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN
Rule 115   array -> LEFT_BRACKET array_elements RIGHT_BRACKET
Rule 116   array_elements -> argument
Rule 117   array_elements -> array_elements COMMA argument
Rule 118   array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 119   list -> LEFT_BRACKET elements RIGHT_BRACKET
Rule 120   elements -> argument
Rule 121   elements -> elements COMMA argument
Rule 122   stack_operations -> PUSH argument
Rule 123   stack_operations -> POP
Rule 124   queue_operations -> ENQUEUE argument
Rule 125   queue_operations -> DEQUEUE
Rule 126   deque_operations -> APPEND argument
Rule 127   deque_operations -> APPENDLEFT argument
Rule 128   deque_operations -> POP
Rule 129   deque_operations -> POPLEFT
Rule 130   set_declaration -> SET LEFT_BRACE set_elements RIGHT_BRACE
Rule 131   set_elements -> argument
Rule 132   set_elements -> set_elements COMMA argument
Rule 133   dictionary_declaration -> DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACE
Rule 134   dictionary_elements -> key_value_pair
Rule 135   dictionary_elements -> dictionary_elements COMMA key_value_pair
Rule 136   key_value_pair -> STRING COLON argument
Rule 137   iterator_declaration -> ITERATOR LEFT_BRACKET elements RIGHT_BRACKET
Rule 138   tree_operations -> ADD_CHILD argument

Terminals, with rules where they appear

ABSTRACT             : 
ADD_CHILD            : 138
APPEND               : 126
APPENDLEFT           : 127
ARRAY                : 114
ARROW                : 22 22
AS                   : 
ASYNC                : 
AWAIT                : 
BOOL                 : 
BREAK                : 16
CALL                 : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_TAG            : 1
COLON                : 21 136
COMMA                : 25 25 27 44 80 82 117 121 132 135
CONST                : 
CONTINUE             : 17
DECLARE              : 
DEFAULT              : 
DEQUEUE              : 125
DICTIONARY           : 133
DIE                  : 
DIFFERENT            : 105
DIVIDE               : 56
DIVIDE_EQUALS        : 36
DO                   : 
DOT                  : 43
ECHO                 : 41
ELSE                 : 69
ELSEIF               : 68
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENQUEUE              : 124
ENUM                 : 
EQUALS               : 32 113
EQUAL_TO             : 97
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 90
FGETS                : 24
FINAL                : 
FINALLY              : 
FLOAT                : 59
FLOAT_TYPE           : 111
FN                   : 
FOR                  : 71 72
FOREACH              : 
FSCANF               : 25
FUNCTION             : 20
GLOBAL               : 
GOTO                 : 
GREATER_EQUAL        : 102
GREATER_THAN         : 100
HALT_COMPILER        : 
ID                   : 28
IDENTICAL_TO         : 103
IF                   : 62 63 64 65
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 58 118
INTERFACE            : 
INT_TYPE             : 110
ISSET                : 
ITERABLE             : 
ITERATOR             : 137
KEY_VALUE            : 
LAMBDA               : 21
LEFT_BRACE           : 83 84 130 133
LEFT_BRACKET         : 115 118 119 137
LEFT_PAREN           : 20 24 25 38 61 71 72 95 109 112 114
LESS_EQUAL           : 101
LESS_THAN            : 99
LIST                 : 
LOGICAL_AND          : 106
LOGICAL_NOT          : 93
LOGICAL_OR           : 107
LOGICAL_XOR          : 108
LPAREN               : 
MATCH                : 
MINUS                : 53
MINUS_EQUALS         : 34
MINUS_MINUS          : 31
MIXED                : 
MOD                  : 
MOD_EQUALS           : 37
MULTI_LINE_COMMENT   : 10
NAME                 : 20 112
NAMESPACE            : 
NEW                  : 
NOT_EQUAL_TO         : 98
NOT_IDENTICAL_TO     : 104
NULL                 : 
OBJECT               : 
ONE_LINE_COMMENT     : 9
OPEN_TAG             : 1
PLUS                 : 52
PLUS_EQUALS          : 33
PLUS_PLUS            : 30
POP                  : 123 128
POPLEFT              : 129
POWER                : 
PRINT                : 40
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUSH                 : 122
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 23
RIGHT_BRACE          : 83 84 130 133
RIGHT_BRACKET        : 115 118 119 137
RIGHT_PAREN          : 20 24 25 38 61 75 76 95 109 112 114
RPAREN               : 
SELF                 : 
SEMICOLON            : 4 71 72 75 76 78
SET                  : 130
STATIC               : 
STDIN                : 24 25
STRING               : 25 45 136
SWITCH               : 
THROW                : 
TIMES                : 55
TIMES_EQUALS         : 35
TRAIT                : 
TRUE                 : 89
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VOID                 : 
WHILE                : 70
YIELD                : 
YIELD_FROM           : 
error                : 
object_declaration   : 

Nonterminals, with rules where they appear

argument             : 29 42 43 44 51 116 117 120 121 122 124 126 127 131 132 136 138
arguments            : 20 21 22 38 39 43 44
array                : 113
array_declaration_statement : 15
array_elements       : 112 114 115 117
array_indexing       : 50
arrow_function       : 
assignment_list      : 71 80
assignment_operator  : 29
assignment_statement : 14 47 79 80
block                : 20 62 63 64 65 68 69 70 77
casting              : 51
casting_type         : 109
complex_condition    : 87
condition            : 60 73 93 94 94 95
deque_operations     : 
dictionary_declaration : 
dictionary_elements  : 133 135
elements             : 119 121 137
else_if_extended     : 63 64 67
expression           : 21 22 23 46 52 53 61 96 96
factor               : 55 56 57
fgets_statement      : 13 49
for_part1            : 73 74
for_part3            : 73 74
for_part4            : 75 76
for_statement        : 7
fscanf_statement     : 12
function_call        : 18 48
function_statement   : 8
if_part2             : 66 67
if_part3             : 64 65
if_statement         : 5
iterator_declaration : 
key_value_pair       : 134 135
lambda_function      : 
list                 : 
logical_operator     : 94
negated_condition    : 86
parenthesized_condition : 62 63 64 65 68 70 88
print_function       : 38 39
print_statement      : 11
program              : 0
queue_operations     : 
relational_expression : 92
relational_operator  : 96
return_statement     : 19
set_declaration      : 
set_elements         : 130 132
simple_condition     : 85
stack_operations     : 
statement            : 4 81 82
statement2           : 2 3
statement_list       : 75 82
statements           : 1 3 83
term                 : 52 53 54 55 56
tree_operations      : 
variable             : 26 27 29 30 31 91 113 118
variable_list        : 25 27
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG statements CLOSE_TAG

    OPEN_TAG        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . statements CLOSE_TAG
    (2) statements -> . statement2
    (3) statements -> . statements statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement -> . print_statement
    (12) statement -> . fscanf_statement
    (13) statement -> . fgets_statement
    (14) statement -> . assignment_statement
    (15) statement -> . array_declaration_statement
    (16) statement -> . BREAK
    (17) statement -> . CONTINUE
    (18) statement -> . function_call
    (19) statement -> . return_statement
    (62) if_statement -> . IF parenthesized_condition block
    (63) if_statement -> . IF parenthesized_condition block else_if_extended
    (64) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (65) if_statement -> . IF parenthesized_condition block if_part3
    (70) while_statement -> . WHILE parenthesized_condition block
    (73) for_statement -> . for_part1 condition for_part3
    (74) for_statement -> . for_part1 for_part3
    (20) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (38) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (39) print_statement -> . print_function arguments
    (25) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (113) array_declaration_statement -> . variable EQUALS array
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (23) return_statement -> . RETURN expression
    (71) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (72) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (40) print_function -> . PRINT
    (41) print_function -> . ECHO
    (28) variable -> . ID

    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 27
    FGETS           shift and go to state 28
    NAME            shift and go to state 25
    RETURN          shift and go to state 30
    FOR             shift and go to state 31
    PRINT           shift and go to state 32
    ECHO            shift and go to state 33
    ID              shift and go to state 34

    statements                     shift and go to state 3
    statement2                     shift and go to state 4
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    print_statement                shift and go to state 12
    fscanf_statement               shift and go to state 13
    fgets_statement                shift and go to state 14
    assignment_statement           shift and go to state 15
    array_declaration_statement    shift and go to state 16
    function_call                  shift and go to state 19
    return_statement               shift and go to state 20
    for_part1                      shift and go to state 23
    print_function                 shift and go to state 26
    variable                       shift and go to state 29

state 3

    (1) program -> OPEN_TAG statements . CLOSE_TAG
    (3) statements -> statements . statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement -> . print_statement
    (12) statement -> . fscanf_statement
    (13) statement -> . fgets_statement
    (14) statement -> . assignment_statement
    (15) statement -> . array_declaration_statement
    (16) statement -> . BREAK
    (17) statement -> . CONTINUE
    (18) statement -> . function_call
    (19) statement -> . return_statement
    (62) if_statement -> . IF parenthesized_condition block
    (63) if_statement -> . IF parenthesized_condition block else_if_extended
    (64) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (65) if_statement -> . IF parenthesized_condition block if_part3
    (70) while_statement -> . WHILE parenthesized_condition block
    (73) for_statement -> . for_part1 condition for_part3
    (74) for_statement -> . for_part1 for_part3
    (20) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (38) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (39) print_statement -> . print_function arguments
    (25) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (113) array_declaration_statement -> . variable EQUALS array
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (23) return_statement -> . RETURN expression
    (71) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (72) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (40) print_function -> . PRINT
    (41) print_function -> . ECHO
    (28) variable -> . ID

    CLOSE_TAG       shift and go to state 35
    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 27
    FGETS           shift and go to state 28
    NAME            shift and go to state 25
    RETURN          shift and go to state 30
    FOR             shift and go to state 31
    PRINT           shift and go to state 32
    ECHO            shift and go to state 33
    ID              shift and go to state 34

    statement2                     shift and go to state 36
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    print_statement                shift and go to state 12
    fscanf_statement               shift and go to state 13
    fgets_statement                shift and go to state 14
    assignment_statement           shift and go to state 15
    array_declaration_statement    shift and go to state 16
    function_call                  shift and go to state 19
    return_statement               shift and go to state 20
    for_part1                      shift and go to state 23
    print_function                 shift and go to state 26
    variable                       shift and go to state 29

state 4

    (2) statements -> statement2 .

    CLOSE_TAG       reduce using rule 2 (statements -> statement2 .)
    ONE_LINE_COMMENT reduce using rule 2 (statements -> statement2 .)
    MULTI_LINE_COMMENT reduce using rule 2 (statements -> statement2 .)
    BREAK           reduce using rule 2 (statements -> statement2 .)
    CONTINUE        reduce using rule 2 (statements -> statement2 .)
    IF              reduce using rule 2 (statements -> statement2 .)
    WHILE           reduce using rule 2 (statements -> statement2 .)
    FUNCTION        reduce using rule 2 (statements -> statement2 .)
    FSCANF          reduce using rule 2 (statements -> statement2 .)
    FGETS           reduce using rule 2 (statements -> statement2 .)
    NAME            reduce using rule 2 (statements -> statement2 .)
    RETURN          reduce using rule 2 (statements -> statement2 .)
    FOR             reduce using rule 2 (statements -> statement2 .)
    PRINT           reduce using rule 2 (statements -> statement2 .)
    ECHO            reduce using rule 2 (statements -> statement2 .)
    ID              reduce using rule 2 (statements -> statement2 .)
    RIGHT_BRACE     reduce using rule 2 (statements -> statement2 .)


state 5

    (4) statement2 -> statement . SEMICOLON

    SEMICOLON       shift and go to state 37


state 6

    (5) statement2 -> if_statement .

    CLOSE_TAG       reduce using rule 5 (statement2 -> if_statement .)
    ONE_LINE_COMMENT reduce using rule 5 (statement2 -> if_statement .)
    MULTI_LINE_COMMENT reduce using rule 5 (statement2 -> if_statement .)
    BREAK           reduce using rule 5 (statement2 -> if_statement .)
    CONTINUE        reduce using rule 5 (statement2 -> if_statement .)
    IF              reduce using rule 5 (statement2 -> if_statement .)
    WHILE           reduce using rule 5 (statement2 -> if_statement .)
    FUNCTION        reduce using rule 5 (statement2 -> if_statement .)
    FSCANF          reduce using rule 5 (statement2 -> if_statement .)
    FGETS           reduce using rule 5 (statement2 -> if_statement .)
    NAME            reduce using rule 5 (statement2 -> if_statement .)
    RETURN          reduce using rule 5 (statement2 -> if_statement .)
    FOR             reduce using rule 5 (statement2 -> if_statement .)
    PRINT           reduce using rule 5 (statement2 -> if_statement .)
    ECHO            reduce using rule 5 (statement2 -> if_statement .)
    ID              reduce using rule 5 (statement2 -> if_statement .)
    RIGHT_BRACE     reduce using rule 5 (statement2 -> if_statement .)


state 7

    (6) statement2 -> while_statement .

    CLOSE_TAG       reduce using rule 6 (statement2 -> while_statement .)
    ONE_LINE_COMMENT reduce using rule 6 (statement2 -> while_statement .)
    MULTI_LINE_COMMENT reduce using rule 6 (statement2 -> while_statement .)
    BREAK           reduce using rule 6 (statement2 -> while_statement .)
    CONTINUE        reduce using rule 6 (statement2 -> while_statement .)
    IF              reduce using rule 6 (statement2 -> while_statement .)
    WHILE           reduce using rule 6 (statement2 -> while_statement .)
    FUNCTION        reduce using rule 6 (statement2 -> while_statement .)
    FSCANF          reduce using rule 6 (statement2 -> while_statement .)
    FGETS           reduce using rule 6 (statement2 -> while_statement .)
    NAME            reduce using rule 6 (statement2 -> while_statement .)
    RETURN          reduce using rule 6 (statement2 -> while_statement .)
    FOR             reduce using rule 6 (statement2 -> while_statement .)
    PRINT           reduce using rule 6 (statement2 -> while_statement .)
    ECHO            reduce using rule 6 (statement2 -> while_statement .)
    ID              reduce using rule 6 (statement2 -> while_statement .)
    RIGHT_BRACE     reduce using rule 6 (statement2 -> while_statement .)


state 8

    (7) statement2 -> for_statement .

    CLOSE_TAG       reduce using rule 7 (statement2 -> for_statement .)
    ONE_LINE_COMMENT reduce using rule 7 (statement2 -> for_statement .)
    MULTI_LINE_COMMENT reduce using rule 7 (statement2 -> for_statement .)
    BREAK           reduce using rule 7 (statement2 -> for_statement .)
    CONTINUE        reduce using rule 7 (statement2 -> for_statement .)
    IF              reduce using rule 7 (statement2 -> for_statement .)
    WHILE           reduce using rule 7 (statement2 -> for_statement .)
    FUNCTION        reduce using rule 7 (statement2 -> for_statement .)
    FSCANF          reduce using rule 7 (statement2 -> for_statement .)
    FGETS           reduce using rule 7 (statement2 -> for_statement .)
    NAME            reduce using rule 7 (statement2 -> for_statement .)
    RETURN          reduce using rule 7 (statement2 -> for_statement .)
    FOR             reduce using rule 7 (statement2 -> for_statement .)
    PRINT           reduce using rule 7 (statement2 -> for_statement .)
    ECHO            reduce using rule 7 (statement2 -> for_statement .)
    ID              reduce using rule 7 (statement2 -> for_statement .)
    RIGHT_BRACE     reduce using rule 7 (statement2 -> for_statement .)


state 9

    (8) statement2 -> function_statement .

    CLOSE_TAG       reduce using rule 8 (statement2 -> function_statement .)
    ONE_LINE_COMMENT reduce using rule 8 (statement2 -> function_statement .)
    MULTI_LINE_COMMENT reduce using rule 8 (statement2 -> function_statement .)
    BREAK           reduce using rule 8 (statement2 -> function_statement .)
    CONTINUE        reduce using rule 8 (statement2 -> function_statement .)
    IF              reduce using rule 8 (statement2 -> function_statement .)
    WHILE           reduce using rule 8 (statement2 -> function_statement .)
    FUNCTION        reduce using rule 8 (statement2 -> function_statement .)
    FSCANF          reduce using rule 8 (statement2 -> function_statement .)
    FGETS           reduce using rule 8 (statement2 -> function_statement .)
    NAME            reduce using rule 8 (statement2 -> function_statement .)
    RETURN          reduce using rule 8 (statement2 -> function_statement .)
    FOR             reduce using rule 8 (statement2 -> function_statement .)
    PRINT           reduce using rule 8 (statement2 -> function_statement .)
    ECHO            reduce using rule 8 (statement2 -> function_statement .)
    ID              reduce using rule 8 (statement2 -> function_statement .)
    RIGHT_BRACE     reduce using rule 8 (statement2 -> function_statement .)


state 10

    (9) statement2 -> ONE_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    BREAK           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    CONTINUE        reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    IF              reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    WHILE           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FUNCTION        reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FSCANF          reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FGETS           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    NAME            reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    RETURN          reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    FOR             reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    PRINT           reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    ECHO            reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    ID              reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 9 (statement2 -> ONE_LINE_COMMENT .)


state 11

    (10) statement2 -> MULTI_LINE_COMMENT .

    CLOSE_TAG       reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    ONE_LINE_COMMENT reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    BREAK           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    CONTINUE        reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    IF              reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    WHILE           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FUNCTION        reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FSCANF          reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FGETS           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    NAME            reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    RETURN          reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    FOR             reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    PRINT           reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    ECHO            reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    ID              reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)
    RIGHT_BRACE     reduce using rule 10 (statement2 -> MULTI_LINE_COMMENT .)


state 12

    (11) statement -> print_statement .

    SEMICOLON       reduce using rule 11 (statement -> print_statement .)
    RIGHT_PAREN     reduce using rule 11 (statement -> print_statement .)
    COMMA           reduce using rule 11 (statement -> print_statement .)


state 13

    (12) statement -> fscanf_statement .

    SEMICOLON       reduce using rule 12 (statement -> fscanf_statement .)
    RIGHT_PAREN     reduce using rule 12 (statement -> fscanf_statement .)
    COMMA           reduce using rule 12 (statement -> fscanf_statement .)


state 14

    (13) statement -> fgets_statement .

    SEMICOLON       reduce using rule 13 (statement -> fgets_statement .)
    RIGHT_PAREN     reduce using rule 13 (statement -> fgets_statement .)
    COMMA           reduce using rule 13 (statement -> fgets_statement .)


state 15

    (14) statement -> assignment_statement .

    SEMICOLON       reduce using rule 14 (statement -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 14 (statement -> assignment_statement .)
    COMMA           reduce using rule 14 (statement -> assignment_statement .)


state 16

    (15) statement -> array_declaration_statement .

    SEMICOLON       reduce using rule 15 (statement -> array_declaration_statement .)
    RIGHT_PAREN     reduce using rule 15 (statement -> array_declaration_statement .)
    COMMA           reduce using rule 15 (statement -> array_declaration_statement .)


state 17

    (16) statement -> BREAK .

    SEMICOLON       reduce using rule 16 (statement -> BREAK .)
    RIGHT_PAREN     reduce using rule 16 (statement -> BREAK .)
    COMMA           reduce using rule 16 (statement -> BREAK .)


state 18

    (17) statement -> CONTINUE .

    SEMICOLON       reduce using rule 17 (statement -> CONTINUE .)
    RIGHT_PAREN     reduce using rule 17 (statement -> CONTINUE .)
    COMMA           reduce using rule 17 (statement -> CONTINUE .)


state 19

    (18) statement -> function_call .

    SEMICOLON       reduce using rule 18 (statement -> function_call .)
    RIGHT_PAREN     reduce using rule 18 (statement -> function_call .)
    COMMA           reduce using rule 18 (statement -> function_call .)


state 20

    (19) statement -> return_statement .

    SEMICOLON       reduce using rule 19 (statement -> return_statement .)
    RIGHT_PAREN     reduce using rule 19 (statement -> return_statement .)
    COMMA           reduce using rule 19 (statement -> return_statement .)


state 21

    (62) if_statement -> IF . parenthesized_condition block
    (63) if_statement -> IF . parenthesized_condition block else_if_extended
    (64) if_statement -> IF . parenthesized_condition block else_if_extended if_part3
    (65) if_statement -> IF . parenthesized_condition block if_part3
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 39

    parenthesized_condition        shift and go to state 38

state 22

    (70) while_statement -> WHILE . parenthesized_condition block
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 39

    parenthesized_condition        shift and go to state 40

state 23

    (73) for_statement -> for_part1 . condition for_part3
    (74) for_statement -> for_part1 . for_part3
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (75) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (76) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    SEMICOLON       shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58

    condition                      shift and go to state 41
    for_part3                      shift and go to state 42
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51
    expression                     shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56

state 24

    (20) function_statement -> FUNCTION . NAME LEFT_PAREN arguments RIGHT_PAREN block

    NAME            shift and go to state 59


state 25

    (112) function_call -> NAME . LEFT_PAREN array_elements RIGHT_PAREN

    LEFT_PAREN      shift and go to state 60


state 26

    (38) print_statement -> print_function . LEFT_PAREN arguments RIGHT_PAREN
    (39) print_statement -> print_function . arguments
    (42) arguments -> . argument
    (43) arguments -> . arguments DOT argument
    (44) arguments -> . arguments COMMA argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    LEFT_PAREN      shift and go to state 61
    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    arguments                      shift and go to state 62
    argument                       shift and go to state 63
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 27

    (25) fscanf_statement -> FSCANF . LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 73


state 28

    (24) fgets_statement -> FGETS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 74


state 29

    (29) assignment_statement -> variable . assignment_operator argument
    (30) assignment_statement -> variable . PLUS_PLUS
    (31) assignment_statement -> variable . MINUS_MINUS
    (113) array_declaration_statement -> variable . EQUALS array
    (32) assignment_operator -> . EQUALS
    (33) assignment_operator -> . PLUS_EQUALS
    (34) assignment_operator -> . MINUS_EQUALS
    (35) assignment_operator -> . TIMES_EQUALS
    (36) assignment_operator -> . DIVIDE_EQUALS
    (37) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 76
    MINUS_MINUS     shift and go to state 77
    EQUALS          shift and go to state 78
    PLUS_EQUALS     shift and go to state 79
    MINUS_EQUALS    shift and go to state 80
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 82
    MOD_EQUALS      shift and go to state 83

    assignment_operator            shift and go to state 75

state 30

    (23) return_statement -> RETURN . expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    ID              shift and go to state 34

    expression                     shift and go to state 84
    term                           shift and go to state 55
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 31

    (71) for_part1 -> FOR . LEFT_PAREN assignment_list SEMICOLON
    (72) for_part1 -> FOR . LEFT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 86


state 32

    (40) print_function -> PRINT .

    LEFT_PAREN      reduce using rule 40 (print_function -> PRINT .)
    STRING          reduce using rule 40 (print_function -> PRINT .)
    NAME            reduce using rule 40 (print_function -> PRINT .)
    FGETS           reduce using rule 40 (print_function -> PRINT .)
    ID              reduce using rule 40 (print_function -> PRINT .)
    INTEGER         reduce using rule 40 (print_function -> PRINT .)
    FLOAT           reduce using rule 40 (print_function -> PRINT .)
    TRUE            reduce using rule 40 (print_function -> PRINT .)
    FALSE           reduce using rule 40 (print_function -> PRINT .)
    LOGICAL_NOT     reduce using rule 40 (print_function -> PRINT .)


state 33

    (41) print_function -> ECHO .

    LEFT_PAREN      reduce using rule 41 (print_function -> ECHO .)
    STRING          reduce using rule 41 (print_function -> ECHO .)
    NAME            reduce using rule 41 (print_function -> ECHO .)
    FGETS           reduce using rule 41 (print_function -> ECHO .)
    ID              reduce using rule 41 (print_function -> ECHO .)
    INTEGER         reduce using rule 41 (print_function -> ECHO .)
    FLOAT           reduce using rule 41 (print_function -> ECHO .)
    TRUE            reduce using rule 41 (print_function -> ECHO .)
    FALSE           reduce using rule 41 (print_function -> ECHO .)
    LOGICAL_NOT     reduce using rule 41 (print_function -> ECHO .)


state 34

    (28) variable -> ID .

    PLUS_PLUS       reduce using rule 28 (variable -> ID .)
    MINUS_MINUS     reduce using rule 28 (variable -> ID .)
    EQUALS          reduce using rule 28 (variable -> ID .)
    PLUS_EQUALS     reduce using rule 28 (variable -> ID .)
    MINUS_EQUALS    reduce using rule 28 (variable -> ID .)
    TIMES_EQUALS    reduce using rule 28 (variable -> ID .)
    DIVIDE_EQUALS   reduce using rule 28 (variable -> ID .)
    MOD_EQUALS      reduce using rule 28 (variable -> ID .)
    SEMICOLON       reduce using rule 28 (variable -> ID .)
    LOGICAL_AND     reduce using rule 28 (variable -> ID .)
    LOGICAL_OR      reduce using rule 28 (variable -> ID .)
    LOGICAL_XOR     reduce using rule 28 (variable -> ID .)
    TIMES           reduce using rule 28 (variable -> ID .)
    DIVIDE          reduce using rule 28 (variable -> ID .)
    PLUS            reduce using rule 28 (variable -> ID .)
    MINUS           reduce using rule 28 (variable -> ID .)
    EQUAL_TO        reduce using rule 28 (variable -> ID .)
    NOT_EQUAL_TO    reduce using rule 28 (variable -> ID .)
    LESS_THAN       reduce using rule 28 (variable -> ID .)
    GREATER_THAN    reduce using rule 28 (variable -> ID .)
    LESS_EQUAL      reduce using rule 28 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 28 (variable -> ID .)
    IDENTICAL_TO    reduce using rule 28 (variable -> ID .)
    NOT_IDENTICAL_TO reduce using rule 28 (variable -> ID .)
    DIFFERENT       reduce using rule 28 (variable -> ID .)
    LEFT_BRACKET    reduce using rule 28 (variable -> ID .)
    DOT             reduce using rule 28 (variable -> ID .)
    COMMA           reduce using rule 28 (variable -> ID .)
    RIGHT_PAREN     reduce using rule 28 (variable -> ID .)
    RIGHT_BRACKET   reduce using rule 28 (variable -> ID .)


state 35

    (1) program -> OPEN_TAG statements CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG statements CLOSE_TAG .)


state 36

    (3) statements -> statements statement2 .

    CLOSE_TAG       reduce using rule 3 (statements -> statements statement2 .)
    ONE_LINE_COMMENT reduce using rule 3 (statements -> statements statement2 .)
    MULTI_LINE_COMMENT reduce using rule 3 (statements -> statements statement2 .)
    BREAK           reduce using rule 3 (statements -> statements statement2 .)
    CONTINUE        reduce using rule 3 (statements -> statements statement2 .)
    IF              reduce using rule 3 (statements -> statements statement2 .)
    WHILE           reduce using rule 3 (statements -> statements statement2 .)
    FUNCTION        reduce using rule 3 (statements -> statements statement2 .)
    FSCANF          reduce using rule 3 (statements -> statements statement2 .)
    FGETS           reduce using rule 3 (statements -> statements statement2 .)
    NAME            reduce using rule 3 (statements -> statements statement2 .)
    RETURN          reduce using rule 3 (statements -> statements statement2 .)
    FOR             reduce using rule 3 (statements -> statements statement2 .)
    PRINT           reduce using rule 3 (statements -> statements statement2 .)
    ECHO            reduce using rule 3 (statements -> statements statement2 .)
    ID              reduce using rule 3 (statements -> statements statement2 .)
    RIGHT_BRACE     reduce using rule 3 (statements -> statements statement2 .)


state 37

    (4) statement2 -> statement SEMICOLON .

    CLOSE_TAG       reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 4 (statement2 -> statement SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 4 (statement2 -> statement SEMICOLON .)
    BREAK           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    CONTINUE        reduce using rule 4 (statement2 -> statement SEMICOLON .)
    IF              reduce using rule 4 (statement2 -> statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FUNCTION        reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FSCANF          reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FGETS           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    NAME            reduce using rule 4 (statement2 -> statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement2 -> statement SEMICOLON .)
    FOR             reduce using rule 4 (statement2 -> statement SEMICOLON .)
    PRINT           reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ECHO            reduce using rule 4 (statement2 -> statement SEMICOLON .)
    ID              reduce using rule 4 (statement2 -> statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (statement2 -> statement SEMICOLON .)


state 38

    (62) if_statement -> IF parenthesized_condition . block
    (63) if_statement -> IF parenthesized_condition . block else_if_extended
    (64) if_statement -> IF parenthesized_condition . block else_if_extended if_part3
    (65) if_statement -> IF parenthesized_condition . block if_part3
    (83) block -> . LEFT_BRACE statements RIGHT_BRACE
    (84) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 88

    block                          shift and go to state 87

state 39

    (95) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58

    condition                      shift and go to state 89
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51
    expression                     shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56

state 40

    (70) while_statement -> WHILE parenthesized_condition . block
    (83) block -> . LEFT_BRACE statements RIGHT_BRACE
    (84) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 88

    block                          shift and go to state 90

state 41

    (73) for_statement -> for_part1 condition . for_part3
    (94) complex_condition -> condition . logical_operator condition
    (60) factor -> condition .
    (75) for_part3 -> . SEMICOLON statement_list RIGHT_PAREN for_part4
    (76) for_part3 -> . SEMICOLON RIGHT_PAREN for_part4
    (106) logical_operator -> . LOGICAL_AND
    (107) logical_operator -> . LOGICAL_OR
    (108) logical_operator -> . LOGICAL_XOR

    TIMES           reduce using rule 60 (factor -> condition .)
    DIVIDE          reduce using rule 60 (factor -> condition .)
    PLUS            reduce using rule 60 (factor -> condition .)
    MINUS           reduce using rule 60 (factor -> condition .)
    EQUAL_TO        reduce using rule 60 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 60 (factor -> condition .)
    LESS_THAN       reduce using rule 60 (factor -> condition .)
    GREATER_THAN    reduce using rule 60 (factor -> condition .)
    LESS_EQUAL      reduce using rule 60 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 60 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 60 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 60 (factor -> condition .)
    DIFFERENT       reduce using rule 60 (factor -> condition .)
    SEMICOLON       shift and go to state 47
    LOGICAL_AND     shift and go to state 93
    LOGICAL_OR      shift and go to state 94
    LOGICAL_XOR     shift and go to state 95

    for_part3                      shift and go to state 91
    logical_operator               shift and go to state 92

state 42

    (74) for_statement -> for_part1 for_part3 .

    CLOSE_TAG       reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    ONE_LINE_COMMENT reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    BREAK           reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    CONTINUE        reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    IF              reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    WHILE           reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    FUNCTION        reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    FSCANF          reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    FGETS           reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    NAME            reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    RETURN          reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    FOR             reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    PRINT           reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    ECHO            reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    ID              reduce using rule 74 (for_statement -> for_part1 for_part3 .)
    RIGHT_BRACE     reduce using rule 74 (for_statement -> for_part1 for_part3 .)


state 43

    (85) condition -> simple_condition .

    SEMICOLON       reduce using rule 85 (condition -> simple_condition .)
    LOGICAL_AND     reduce using rule 85 (condition -> simple_condition .)
    LOGICAL_OR      reduce using rule 85 (condition -> simple_condition .)
    LOGICAL_XOR     reduce using rule 85 (condition -> simple_condition .)
    TIMES           reduce using rule 85 (condition -> simple_condition .)
    DIVIDE          reduce using rule 85 (condition -> simple_condition .)
    PLUS            reduce using rule 85 (condition -> simple_condition .)
    MINUS           reduce using rule 85 (condition -> simple_condition .)
    EQUAL_TO        reduce using rule 85 (condition -> simple_condition .)
    NOT_EQUAL_TO    reduce using rule 85 (condition -> simple_condition .)
    LESS_THAN       reduce using rule 85 (condition -> simple_condition .)
    GREATER_THAN    reduce using rule 85 (condition -> simple_condition .)
    LESS_EQUAL      reduce using rule 85 (condition -> simple_condition .)
    GREATER_EQUAL   reduce using rule 85 (condition -> simple_condition .)
    IDENTICAL_TO    reduce using rule 85 (condition -> simple_condition .)
    NOT_IDENTICAL_TO reduce using rule 85 (condition -> simple_condition .)
    DIFFERENT       reduce using rule 85 (condition -> simple_condition .)
    DOT             reduce using rule 85 (condition -> simple_condition .)
    COMMA           reduce using rule 85 (condition -> simple_condition .)
    RIGHT_PAREN     reduce using rule 85 (condition -> simple_condition .)
    RIGHT_BRACKET   reduce using rule 85 (condition -> simple_condition .)


state 44

    (86) condition -> negated_condition .

    SEMICOLON       reduce using rule 86 (condition -> negated_condition .)
    LOGICAL_AND     reduce using rule 86 (condition -> negated_condition .)
    LOGICAL_OR      reduce using rule 86 (condition -> negated_condition .)
    LOGICAL_XOR     reduce using rule 86 (condition -> negated_condition .)
    TIMES           reduce using rule 86 (condition -> negated_condition .)
    DIVIDE          reduce using rule 86 (condition -> negated_condition .)
    PLUS            reduce using rule 86 (condition -> negated_condition .)
    MINUS           reduce using rule 86 (condition -> negated_condition .)
    EQUAL_TO        reduce using rule 86 (condition -> negated_condition .)
    NOT_EQUAL_TO    reduce using rule 86 (condition -> negated_condition .)
    LESS_THAN       reduce using rule 86 (condition -> negated_condition .)
    GREATER_THAN    reduce using rule 86 (condition -> negated_condition .)
    LESS_EQUAL      reduce using rule 86 (condition -> negated_condition .)
    GREATER_EQUAL   reduce using rule 86 (condition -> negated_condition .)
    IDENTICAL_TO    reduce using rule 86 (condition -> negated_condition .)
    NOT_IDENTICAL_TO reduce using rule 86 (condition -> negated_condition .)
    DIFFERENT       reduce using rule 86 (condition -> negated_condition .)
    DOT             reduce using rule 86 (condition -> negated_condition .)
    COMMA           reduce using rule 86 (condition -> negated_condition .)
    RIGHT_PAREN     reduce using rule 86 (condition -> negated_condition .)
    RIGHT_BRACKET   reduce using rule 86 (condition -> negated_condition .)


state 45

    (87) condition -> complex_condition .

    SEMICOLON       reduce using rule 87 (condition -> complex_condition .)
    LOGICAL_AND     reduce using rule 87 (condition -> complex_condition .)
    LOGICAL_OR      reduce using rule 87 (condition -> complex_condition .)
    LOGICAL_XOR     reduce using rule 87 (condition -> complex_condition .)
    TIMES           reduce using rule 87 (condition -> complex_condition .)
    DIVIDE          reduce using rule 87 (condition -> complex_condition .)
    PLUS            reduce using rule 87 (condition -> complex_condition .)
    MINUS           reduce using rule 87 (condition -> complex_condition .)
    EQUAL_TO        reduce using rule 87 (condition -> complex_condition .)
    NOT_EQUAL_TO    reduce using rule 87 (condition -> complex_condition .)
    LESS_THAN       reduce using rule 87 (condition -> complex_condition .)
    GREATER_THAN    reduce using rule 87 (condition -> complex_condition .)
    LESS_EQUAL      reduce using rule 87 (condition -> complex_condition .)
    GREATER_EQUAL   reduce using rule 87 (condition -> complex_condition .)
    IDENTICAL_TO    reduce using rule 87 (condition -> complex_condition .)
    NOT_IDENTICAL_TO reduce using rule 87 (condition -> complex_condition .)
    DIFFERENT       reduce using rule 87 (condition -> complex_condition .)
    DOT             reduce using rule 87 (condition -> complex_condition .)
    COMMA           reduce using rule 87 (condition -> complex_condition .)
    RIGHT_PAREN     reduce using rule 87 (condition -> complex_condition .)
    RIGHT_BRACKET   reduce using rule 87 (condition -> complex_condition .)


state 46

    (88) condition -> parenthesized_condition .

    SEMICOLON       reduce using rule 88 (condition -> parenthesized_condition .)
    LOGICAL_AND     reduce using rule 88 (condition -> parenthesized_condition .)
    LOGICAL_OR      reduce using rule 88 (condition -> parenthesized_condition .)
    LOGICAL_XOR     reduce using rule 88 (condition -> parenthesized_condition .)
    TIMES           reduce using rule 88 (condition -> parenthesized_condition .)
    DIVIDE          reduce using rule 88 (condition -> parenthesized_condition .)
    PLUS            reduce using rule 88 (condition -> parenthesized_condition .)
    MINUS           reduce using rule 88 (condition -> parenthesized_condition .)
    EQUAL_TO        reduce using rule 88 (condition -> parenthesized_condition .)
    NOT_EQUAL_TO    reduce using rule 88 (condition -> parenthesized_condition .)
    LESS_THAN       reduce using rule 88 (condition -> parenthesized_condition .)
    GREATER_THAN    reduce using rule 88 (condition -> parenthesized_condition .)
    LESS_EQUAL      reduce using rule 88 (condition -> parenthesized_condition .)
    GREATER_EQUAL   reduce using rule 88 (condition -> parenthesized_condition .)
    IDENTICAL_TO    reduce using rule 88 (condition -> parenthesized_condition .)
    NOT_IDENTICAL_TO reduce using rule 88 (condition -> parenthesized_condition .)
    DIFFERENT       reduce using rule 88 (condition -> parenthesized_condition .)
    DOT             reduce using rule 88 (condition -> parenthesized_condition .)
    COMMA           reduce using rule 88 (condition -> parenthesized_condition .)
    RIGHT_PAREN     reduce using rule 88 (condition -> parenthesized_condition .)
    RIGHT_BRACKET   reduce using rule 88 (condition -> parenthesized_condition .)


state 47

    (75) for_part3 -> SEMICOLON . statement_list RIGHT_PAREN for_part4
    (76) for_part3 -> SEMICOLON . RIGHT_PAREN for_part4
    (81) statement_list -> . statement
    (82) statement_list -> . statement_list COMMA statement
    (11) statement -> . print_statement
    (12) statement -> . fscanf_statement
    (13) statement -> . fgets_statement
    (14) statement -> . assignment_statement
    (15) statement -> . array_declaration_statement
    (16) statement -> . BREAK
    (17) statement -> . CONTINUE
    (18) statement -> . function_call
    (19) statement -> . return_statement
    (38) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (39) print_statement -> . print_function arguments
    (25) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (113) array_declaration_statement -> . variable EQUALS array
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (23) return_statement -> . RETURN expression
    (40) print_function -> . PRINT
    (41) print_function -> . ECHO
    (28) variable -> . ID

    RIGHT_PAREN     shift and go to state 97
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    FSCANF          shift and go to state 27
    FGETS           shift and go to state 28
    NAME            shift and go to state 25
    RETURN          shift and go to state 30
    PRINT           shift and go to state 32
    ECHO            shift and go to state 33
    ID              shift and go to state 34

    statement_list                 shift and go to state 96
    statement                      shift and go to state 98
    print_statement                shift and go to state 12
    fscanf_statement               shift and go to state 13
    fgets_statement                shift and go to state 14
    assignment_statement           shift and go to state 15
    array_declaration_statement    shift and go to state 16
    function_call                  shift and go to state 19
    return_statement               shift and go to state 20
    print_function                 shift and go to state 26
    variable                       shift and go to state 29

state 48

    (89) simple_condition -> TRUE .

    SEMICOLON       reduce using rule 89 (simple_condition -> TRUE .)
    LOGICAL_AND     reduce using rule 89 (simple_condition -> TRUE .)
    LOGICAL_OR      reduce using rule 89 (simple_condition -> TRUE .)
    LOGICAL_XOR     reduce using rule 89 (simple_condition -> TRUE .)
    TIMES           reduce using rule 89 (simple_condition -> TRUE .)
    DIVIDE          reduce using rule 89 (simple_condition -> TRUE .)
    PLUS            reduce using rule 89 (simple_condition -> TRUE .)
    MINUS           reduce using rule 89 (simple_condition -> TRUE .)
    EQUAL_TO        reduce using rule 89 (simple_condition -> TRUE .)
    NOT_EQUAL_TO    reduce using rule 89 (simple_condition -> TRUE .)
    LESS_THAN       reduce using rule 89 (simple_condition -> TRUE .)
    GREATER_THAN    reduce using rule 89 (simple_condition -> TRUE .)
    LESS_EQUAL      reduce using rule 89 (simple_condition -> TRUE .)
    GREATER_EQUAL   reduce using rule 89 (simple_condition -> TRUE .)
    IDENTICAL_TO    reduce using rule 89 (simple_condition -> TRUE .)
    NOT_IDENTICAL_TO reduce using rule 89 (simple_condition -> TRUE .)
    DIFFERENT       reduce using rule 89 (simple_condition -> TRUE .)
    DOT             reduce using rule 89 (simple_condition -> TRUE .)
    COMMA           reduce using rule 89 (simple_condition -> TRUE .)
    RIGHT_PAREN     reduce using rule 89 (simple_condition -> TRUE .)
    RIGHT_BRACKET   reduce using rule 89 (simple_condition -> TRUE .)


state 49

    (90) simple_condition -> FALSE .

    SEMICOLON       reduce using rule 90 (simple_condition -> FALSE .)
    LOGICAL_AND     reduce using rule 90 (simple_condition -> FALSE .)
    LOGICAL_OR      reduce using rule 90 (simple_condition -> FALSE .)
    LOGICAL_XOR     reduce using rule 90 (simple_condition -> FALSE .)
    TIMES           reduce using rule 90 (simple_condition -> FALSE .)
    DIVIDE          reduce using rule 90 (simple_condition -> FALSE .)
    PLUS            reduce using rule 90 (simple_condition -> FALSE .)
    MINUS           reduce using rule 90 (simple_condition -> FALSE .)
    EQUAL_TO        reduce using rule 90 (simple_condition -> FALSE .)
    NOT_EQUAL_TO    reduce using rule 90 (simple_condition -> FALSE .)
    LESS_THAN       reduce using rule 90 (simple_condition -> FALSE .)
    GREATER_THAN    reduce using rule 90 (simple_condition -> FALSE .)
    LESS_EQUAL      reduce using rule 90 (simple_condition -> FALSE .)
    GREATER_EQUAL   reduce using rule 90 (simple_condition -> FALSE .)
    IDENTICAL_TO    reduce using rule 90 (simple_condition -> FALSE .)
    NOT_IDENTICAL_TO reduce using rule 90 (simple_condition -> FALSE .)
    DIFFERENT       reduce using rule 90 (simple_condition -> FALSE .)
    DOT             reduce using rule 90 (simple_condition -> FALSE .)
    COMMA           reduce using rule 90 (simple_condition -> FALSE .)
    RIGHT_PAREN     reduce using rule 90 (simple_condition -> FALSE .)
    RIGHT_BRACKET   reduce using rule 90 (simple_condition -> FALSE .)


state 50

    (91) simple_condition -> variable .

    SEMICOLON       reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_AND     reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 91 (simple_condition -> variable .)
    TIMES           reduce using rule 91 (simple_condition -> variable .)
    DIVIDE          reduce using rule 91 (simple_condition -> variable .)
    PLUS            reduce using rule 91 (simple_condition -> variable .)
    MINUS           reduce using rule 91 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 91 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 91 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 91 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 91 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 91 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 91 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 91 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 91 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 91 (simple_condition -> variable .)
    RIGHT_PAREN     reduce using rule 91 (simple_condition -> variable .)
    COMMA           reduce using rule 91 (simple_condition -> variable .)
    DOT             reduce using rule 91 (simple_condition -> variable .)
    RIGHT_BRACKET   reduce using rule 91 (simple_condition -> variable .)


state 51

    (92) simple_condition -> relational_expression .

    SEMICOLON       reduce using rule 92 (simple_condition -> relational_expression .)
    LOGICAL_AND     reduce using rule 92 (simple_condition -> relational_expression .)
    LOGICAL_OR      reduce using rule 92 (simple_condition -> relational_expression .)
    LOGICAL_XOR     reduce using rule 92 (simple_condition -> relational_expression .)
    TIMES           reduce using rule 92 (simple_condition -> relational_expression .)
    DIVIDE          reduce using rule 92 (simple_condition -> relational_expression .)
    PLUS            reduce using rule 92 (simple_condition -> relational_expression .)
    MINUS           reduce using rule 92 (simple_condition -> relational_expression .)
    EQUAL_TO        reduce using rule 92 (simple_condition -> relational_expression .)
    NOT_EQUAL_TO    reduce using rule 92 (simple_condition -> relational_expression .)
    LESS_THAN       reduce using rule 92 (simple_condition -> relational_expression .)
    GREATER_THAN    reduce using rule 92 (simple_condition -> relational_expression .)
    LESS_EQUAL      reduce using rule 92 (simple_condition -> relational_expression .)
    GREATER_EQUAL   reduce using rule 92 (simple_condition -> relational_expression .)
    IDENTICAL_TO    reduce using rule 92 (simple_condition -> relational_expression .)
    NOT_IDENTICAL_TO reduce using rule 92 (simple_condition -> relational_expression .)
    DIFFERENT       reduce using rule 92 (simple_condition -> relational_expression .)
    DOT             reduce using rule 92 (simple_condition -> relational_expression .)
    COMMA           reduce using rule 92 (simple_condition -> relational_expression .)
    RIGHT_PAREN     reduce using rule 92 (simple_condition -> relational_expression .)
    RIGHT_BRACKET   reduce using rule 92 (simple_condition -> relational_expression .)


state 52

    (93) negated_condition -> LOGICAL_NOT . condition
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58

    condition                      shift and go to state 99
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51
    expression                     shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56

state 53

    (95) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58

    condition                      shift and go to state 89
    expression                     shift and go to state 100
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    term                           shift and go to state 55
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51
    factor                         shift and go to state 56

state 54

    (96) relational_expression -> expression . relational_operator expression
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (97) relational_operator -> . EQUAL_TO
    (98) relational_operator -> . NOT_EQUAL_TO
    (99) relational_operator -> . LESS_THAN
    (100) relational_operator -> . GREATER_THAN
    (101) relational_operator -> . LESS_EQUAL
    (102) relational_operator -> . GREATER_EQUAL
    (103) relational_operator -> . IDENTICAL_TO
    (104) relational_operator -> . NOT_IDENTICAL_TO
    (105) relational_operator -> . DIFFERENT

    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQUAL_TO        shift and go to state 104
    NOT_EQUAL_TO    shift and go to state 105
    LESS_THAN       shift and go to state 106
    GREATER_THAN    shift and go to state 107
    LESS_EQUAL      shift and go to state 108
    GREATER_EQUAL   shift and go to state 109
    IDENTICAL_TO    shift and go to state 110
    NOT_IDENTICAL_TO shift and go to state 111
    DIFFERENT       shift and go to state 112

    relational_operator            shift and go to state 101

state 55

    (54) expression -> term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 54 (expression -> term .)
    MINUS           reduce using rule 54 (expression -> term .)
    EQUAL_TO        reduce using rule 54 (expression -> term .)
    NOT_EQUAL_TO    reduce using rule 54 (expression -> term .)
    LESS_THAN       reduce using rule 54 (expression -> term .)
    GREATER_THAN    reduce using rule 54 (expression -> term .)
    LESS_EQUAL      reduce using rule 54 (expression -> term .)
    GREATER_EQUAL   reduce using rule 54 (expression -> term .)
    IDENTICAL_TO    reduce using rule 54 (expression -> term .)
    NOT_IDENTICAL_TO reduce using rule 54 (expression -> term .)
    DIFFERENT       reduce using rule 54 (expression -> term .)
    DOT             reduce using rule 54 (expression -> term .)
    COMMA           reduce using rule 54 (expression -> term .)
    SEMICOLON       reduce using rule 54 (expression -> term .)
    RIGHT_PAREN     reduce using rule 54 (expression -> term .)
    RIGHT_BRACKET   reduce using rule 54 (expression -> term .)
    LOGICAL_AND     reduce using rule 54 (expression -> term .)
    LOGICAL_OR      reduce using rule 54 (expression -> term .)
    LOGICAL_XOR     reduce using rule 54 (expression -> term .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114

  ! TIMES           [ reduce using rule 54 (expression -> term .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> term .) ]


state 56

    (57) term -> factor .

    TIMES           reduce using rule 57 (term -> factor .)
    DIVIDE          reduce using rule 57 (term -> factor .)
    PLUS            reduce using rule 57 (term -> factor .)
    MINUS           reduce using rule 57 (term -> factor .)
    EQUAL_TO        reduce using rule 57 (term -> factor .)
    NOT_EQUAL_TO    reduce using rule 57 (term -> factor .)
    LESS_THAN       reduce using rule 57 (term -> factor .)
    GREATER_THAN    reduce using rule 57 (term -> factor .)
    LESS_EQUAL      reduce using rule 57 (term -> factor .)
    GREATER_EQUAL   reduce using rule 57 (term -> factor .)
    IDENTICAL_TO    reduce using rule 57 (term -> factor .)
    NOT_IDENTICAL_TO reduce using rule 57 (term -> factor .)
    DIFFERENT       reduce using rule 57 (term -> factor .)
    DOT             reduce using rule 57 (term -> factor .)
    COMMA           reduce using rule 57 (term -> factor .)
    SEMICOLON       reduce using rule 57 (term -> factor .)
    RIGHT_PAREN     reduce using rule 57 (term -> factor .)
    RIGHT_BRACKET   reduce using rule 57 (term -> factor .)
    LOGICAL_AND     reduce using rule 57 (term -> factor .)
    LOGICAL_OR      reduce using rule 57 (term -> factor .)
    LOGICAL_XOR     reduce using rule 57 (term -> factor .)


state 57

    (58) factor -> INTEGER .

    TIMES           reduce using rule 58 (factor -> INTEGER .)
    DIVIDE          reduce using rule 58 (factor -> INTEGER .)
    PLUS            reduce using rule 58 (factor -> INTEGER .)
    MINUS           reduce using rule 58 (factor -> INTEGER .)
    EQUAL_TO        reduce using rule 58 (factor -> INTEGER .)
    NOT_EQUAL_TO    reduce using rule 58 (factor -> INTEGER .)
    LESS_THAN       reduce using rule 58 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 58 (factor -> INTEGER .)
    LESS_EQUAL      reduce using rule 58 (factor -> INTEGER .)
    GREATER_EQUAL   reduce using rule 58 (factor -> INTEGER .)
    IDENTICAL_TO    reduce using rule 58 (factor -> INTEGER .)
    NOT_IDENTICAL_TO reduce using rule 58 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 58 (factor -> INTEGER .)
    DOT             reduce using rule 58 (factor -> INTEGER .)
    COMMA           reduce using rule 58 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 58 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 58 (factor -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 58 (factor -> INTEGER .)
    LOGICAL_AND     reduce using rule 58 (factor -> INTEGER .)
    LOGICAL_OR      reduce using rule 58 (factor -> INTEGER .)
    LOGICAL_XOR     reduce using rule 58 (factor -> INTEGER .)


state 58

    (59) factor -> FLOAT .

    TIMES           reduce using rule 59 (factor -> FLOAT .)
    DIVIDE          reduce using rule 59 (factor -> FLOAT .)
    PLUS            reduce using rule 59 (factor -> FLOAT .)
    MINUS           reduce using rule 59 (factor -> FLOAT .)
    EQUAL_TO        reduce using rule 59 (factor -> FLOAT .)
    NOT_EQUAL_TO    reduce using rule 59 (factor -> FLOAT .)
    LESS_THAN       reduce using rule 59 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 59 (factor -> FLOAT .)
    LESS_EQUAL      reduce using rule 59 (factor -> FLOAT .)
    GREATER_EQUAL   reduce using rule 59 (factor -> FLOAT .)
    IDENTICAL_TO    reduce using rule 59 (factor -> FLOAT .)
    NOT_IDENTICAL_TO reduce using rule 59 (factor -> FLOAT .)
    DIFFERENT       reduce using rule 59 (factor -> FLOAT .)
    DOT             reduce using rule 59 (factor -> FLOAT .)
    COMMA           reduce using rule 59 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 59 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 59 (factor -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 59 (factor -> FLOAT .)
    LOGICAL_AND     reduce using rule 59 (factor -> FLOAT .)
    LOGICAL_OR      reduce using rule 59 (factor -> FLOAT .)
    LOGICAL_XOR     reduce using rule 59 (factor -> FLOAT .)


state 59

    (20) function_statement -> FUNCTION NAME . LEFT_PAREN arguments RIGHT_PAREN block

    LEFT_PAREN      shift and go to state 115


state 60

    (112) function_call -> NAME LEFT_PAREN . array_elements RIGHT_PAREN
    (116) array_elements -> . argument
    (117) array_elements -> . array_elements COMMA argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    array_elements                 shift and go to state 117
    argument                       shift and go to state 118
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 61

    (38) print_statement -> print_function LEFT_PAREN . arguments RIGHT_PAREN
    (109) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (95) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (42) arguments -> . argument
    (43) arguments -> . arguments DOT argument
    (44) arguments -> . arguments COMMA argument
    (110) casting_type -> . INT_TYPE
    (111) casting_type -> . FLOAT_TYPE
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression

    INT_TYPE        shift and go to state 123
    FLOAT_TYPE      shift and go to state 124
    STRING          shift and go to state 64
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 119
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    ID              shift and go to state 34

    arguments                      shift and go to state 120
    casting_type                   shift and go to state 121
    expression                     shift and go to state 122
    condition                      shift and go to state 89
    argument                       shift and go to state 63
    term                           shift and go to state 55
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    factor                         shift and go to state 56
    variable                       shift and go to state 125
    relational_expression          shift and go to state 51

state 62

    (39) print_statement -> print_function arguments .
    (43) arguments -> arguments . DOT argument
    (44) arguments -> arguments . COMMA argument

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 39 (print_statement -> print_function arguments .)
    RIGHT_PAREN     reduce using rule 39 (print_statement -> print_function arguments .)
    DOT             shift and go to state 126
    COMMA           shift and go to state 127

  ! COMMA           [ reduce using rule 39 (print_statement -> print_function arguments .) ]


state 63

    (42) arguments -> argument .

    DOT             reduce using rule 42 (arguments -> argument .)
    COMMA           reduce using rule 42 (arguments -> argument .)
    SEMICOLON       reduce using rule 42 (arguments -> argument .)
    RIGHT_PAREN     reduce using rule 42 (arguments -> argument .)


state 64

    (45) argument -> STRING .

    DOT             reduce using rule 45 (argument -> STRING .)
    COMMA           reduce using rule 45 (argument -> STRING .)
    SEMICOLON       reduce using rule 45 (argument -> STRING .)
    RIGHT_PAREN     reduce using rule 45 (argument -> STRING .)
    RIGHT_BRACKET   reduce using rule 45 (argument -> STRING .)


state 65

    (46) argument -> expression .
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (96) relational_expression -> expression . relational_operator expression
    (97) relational_operator -> . EQUAL_TO
    (98) relational_operator -> . NOT_EQUAL_TO
    (99) relational_operator -> . LESS_THAN
    (100) relational_operator -> . GREATER_THAN
    (101) relational_operator -> . LESS_EQUAL
    (102) relational_operator -> . GREATER_EQUAL
    (103) relational_operator -> . IDENTICAL_TO
    (104) relational_operator -> . NOT_IDENTICAL_TO
    (105) relational_operator -> . DIFFERENT

    DOT             reduce using rule 46 (argument -> expression .)
    COMMA           reduce using rule 46 (argument -> expression .)
    SEMICOLON       reduce using rule 46 (argument -> expression .)
    RIGHT_PAREN     reduce using rule 46 (argument -> expression .)
    RIGHT_BRACKET   reduce using rule 46 (argument -> expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQUAL_TO        shift and go to state 104
    NOT_EQUAL_TO    shift and go to state 105
    LESS_THAN       shift and go to state 106
    GREATER_THAN    shift and go to state 107
    LESS_EQUAL      shift and go to state 108
    GREATER_EQUAL   shift and go to state 109
    IDENTICAL_TO    shift and go to state 110
    NOT_IDENTICAL_TO shift and go to state 111
    DIFFERENT       shift and go to state 112

    relational_operator            shift and go to state 101

state 66

    (47) argument -> assignment_statement .

    DOT             reduce using rule 47 (argument -> assignment_statement .)
    COMMA           reduce using rule 47 (argument -> assignment_statement .)
    SEMICOLON       reduce using rule 47 (argument -> assignment_statement .)
    RIGHT_PAREN     reduce using rule 47 (argument -> assignment_statement .)
    RIGHT_BRACKET   reduce using rule 47 (argument -> assignment_statement .)


state 67

    (48) argument -> function_call .

    DOT             reduce using rule 48 (argument -> function_call .)
    COMMA           reduce using rule 48 (argument -> function_call .)
    SEMICOLON       reduce using rule 48 (argument -> function_call .)
    RIGHT_PAREN     reduce using rule 48 (argument -> function_call .)
    RIGHT_BRACKET   reduce using rule 48 (argument -> function_call .)


state 68

    (49) argument -> fgets_statement .

    DOT             reduce using rule 49 (argument -> fgets_statement .)
    COMMA           reduce using rule 49 (argument -> fgets_statement .)
    SEMICOLON       reduce using rule 49 (argument -> fgets_statement .)
    RIGHT_PAREN     reduce using rule 49 (argument -> fgets_statement .)
    RIGHT_BRACKET   reduce using rule 49 (argument -> fgets_statement .)


state 69

    (50) argument -> array_indexing .

    DOT             reduce using rule 50 (argument -> array_indexing .)
    COMMA           reduce using rule 50 (argument -> array_indexing .)
    SEMICOLON       reduce using rule 50 (argument -> array_indexing .)
    RIGHT_PAREN     reduce using rule 50 (argument -> array_indexing .)
    RIGHT_BRACKET   reduce using rule 50 (argument -> array_indexing .)


state 70

    (51) argument -> casting . argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    casting                        shift and go to state 70
    argument                       shift and go to state 128
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 71

    (29) assignment_statement -> variable . assignment_operator argument
    (30) assignment_statement -> variable . PLUS_PLUS
    (31) assignment_statement -> variable . MINUS_MINUS
    (118) array_indexing -> variable . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (91) simple_condition -> variable .
    (32) assignment_operator -> . EQUALS
    (33) assignment_operator -> . PLUS_EQUALS
    (34) assignment_operator -> . MINUS_EQUALS
    (35) assignment_operator -> . TIMES_EQUALS
    (36) assignment_operator -> . DIVIDE_EQUALS
    (37) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 76
    MINUS_MINUS     shift and go to state 77
    LEFT_BRACKET    shift and go to state 129
    LOGICAL_AND     reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 91 (simple_condition -> variable .)
    TIMES           reduce using rule 91 (simple_condition -> variable .)
    DIVIDE          reduce using rule 91 (simple_condition -> variable .)
    PLUS            reduce using rule 91 (simple_condition -> variable .)
    MINUS           reduce using rule 91 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 91 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 91 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 91 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 91 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 91 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 91 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 91 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 91 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 91 (simple_condition -> variable .)
    DOT             reduce using rule 91 (simple_condition -> variable .)
    COMMA           reduce using rule 91 (simple_condition -> variable .)
    SEMICOLON       reduce using rule 91 (simple_condition -> variable .)
    RIGHT_PAREN     reduce using rule 91 (simple_condition -> variable .)
    RIGHT_BRACKET   reduce using rule 91 (simple_condition -> variable .)
    EQUALS          shift and go to state 130
    PLUS_EQUALS     shift and go to state 79
    MINUS_EQUALS    shift and go to state 80
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 82
    MOD_EQUALS      shift and go to state 83

    assignment_operator            shift and go to state 75

state 72

    (60) factor -> condition .
    (94) complex_condition -> condition . logical_operator condition
    (106) logical_operator -> . LOGICAL_AND
    (107) logical_operator -> . LOGICAL_OR
    (108) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    TIMES           reduce using rule 60 (factor -> condition .)
    DIVIDE          reduce using rule 60 (factor -> condition .)
    PLUS            reduce using rule 60 (factor -> condition .)
    MINUS           reduce using rule 60 (factor -> condition .)
    EQUAL_TO        reduce using rule 60 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 60 (factor -> condition .)
    LESS_THAN       reduce using rule 60 (factor -> condition .)
    GREATER_THAN    reduce using rule 60 (factor -> condition .)
    LESS_EQUAL      reduce using rule 60 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 60 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 60 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 60 (factor -> condition .)
    DIFFERENT       reduce using rule 60 (factor -> condition .)
    DOT             reduce using rule 60 (factor -> condition .)
    COMMA           reduce using rule 60 (factor -> condition .)
    SEMICOLON       reduce using rule 60 (factor -> condition .)
    RIGHT_PAREN     reduce using rule 60 (factor -> condition .)
    RIGHT_BRACKET   reduce using rule 60 (factor -> condition .)
    LOGICAL_AND     shift and go to state 93
    LOGICAL_OR      shift and go to state 94
    LOGICAL_XOR     shift and go to state 95

  ! LOGICAL_AND     [ reduce using rule 60 (factor -> condition .) ]
  ! LOGICAL_OR      [ reduce using rule 60 (factor -> condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 60 (factor -> condition .) ]

    logical_operator               shift and go to state 92

state 73

    (25) fscanf_statement -> FSCANF LEFT_PAREN . STDIN COMMA STRING COMMA variable_list RIGHT_PAREN

    STDIN           shift and go to state 131


state 74

    (24) fgets_statement -> FGETS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 132


state 75

    (29) assignment_statement -> variable assignment_operator . argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    variable                       shift and go to state 71
    argument                       shift and go to state 133
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 76

    (30) assignment_statement -> variable PLUS_PLUS .

    SEMICOLON       reduce using rule 30 (assignment_statement -> variable PLUS_PLUS .)
    DOT             reduce using rule 30 (assignment_statement -> variable PLUS_PLUS .)
    COMMA           reduce using rule 30 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_PAREN     reduce using rule 30 (assignment_statement -> variable PLUS_PLUS .)
    RIGHT_BRACKET   reduce using rule 30 (assignment_statement -> variable PLUS_PLUS .)


state 77

    (31) assignment_statement -> variable MINUS_MINUS .

    SEMICOLON       reduce using rule 31 (assignment_statement -> variable MINUS_MINUS .)
    DOT             reduce using rule 31 (assignment_statement -> variable MINUS_MINUS .)
    COMMA           reduce using rule 31 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_PAREN     reduce using rule 31 (assignment_statement -> variable MINUS_MINUS .)
    RIGHT_BRACKET   reduce using rule 31 (assignment_statement -> variable MINUS_MINUS .)


state 78

    (113) array_declaration_statement -> variable EQUALS . array
    (32) assignment_operator -> EQUALS .
    (114) array -> . ARRAY LEFT_PAREN array_elements RIGHT_PAREN
    (115) array -> . LEFT_BRACKET array_elements RIGHT_BRACKET

    STRING          reduce using rule 32 (assignment_operator -> EQUALS .)
    NAME            reduce using rule 32 (assignment_operator -> EQUALS .)
    FGETS           reduce using rule 32 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 32 (assignment_operator -> EQUALS .)
    ID              reduce using rule 32 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 32 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 32 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 32 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 32 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 32 (assignment_operator -> EQUALS .)
    ARRAY           shift and go to state 135
    LEFT_BRACKET    shift and go to state 136

    array                          shift and go to state 134

state 79

    (33) assignment_operator -> PLUS_EQUALS .

    STRING          reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    NAME            reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    FGETS           reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    ID              reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    INTEGER         reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 33 (assignment_operator -> PLUS_EQUALS .)


state 80

    (34) assignment_operator -> MINUS_EQUALS .

    STRING          reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    NAME            reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    FGETS           reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    LEFT_PAREN      reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    ID              reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    INTEGER         reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    FLOAT           reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    TRUE            reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    FALSE           reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)
    LOGICAL_NOT     reduce using rule 34 (assignment_operator -> MINUS_EQUALS .)


state 81

    (35) assignment_operator -> TIMES_EQUALS .

    STRING          reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    NAME            reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    FGETS           reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    LEFT_PAREN      reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    ID              reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    INTEGER         reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    FLOAT           reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    TRUE            reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    FALSE           reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)
    LOGICAL_NOT     reduce using rule 35 (assignment_operator -> TIMES_EQUALS .)


state 82

    (36) assignment_operator -> DIVIDE_EQUALS .

    STRING          reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    NAME            reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    FGETS           reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_PAREN      reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    ID              reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    INTEGER         reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    FLOAT           reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    TRUE            reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    FALSE           reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)
    LOGICAL_NOT     reduce using rule 36 (assignment_operator -> DIVIDE_EQUALS .)


state 83

    (37) assignment_operator -> MOD_EQUALS .

    STRING          reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    NAME            reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    FGETS           reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    LEFT_PAREN      reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    ID              reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    INTEGER         reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    FLOAT           reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    TRUE            reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    FALSE           reduce using rule 37 (assignment_operator -> MOD_EQUALS .)
    LOGICAL_NOT     reduce using rule 37 (assignment_operator -> MOD_EQUALS .)


state 84

    (23) return_statement -> RETURN expression .
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (96) relational_expression -> expression . relational_operator expression
    (97) relational_operator -> . EQUAL_TO
    (98) relational_operator -> . NOT_EQUAL_TO
    (99) relational_operator -> . LESS_THAN
    (100) relational_operator -> . GREATER_THAN
    (101) relational_operator -> . LESS_EQUAL
    (102) relational_operator -> . GREATER_EQUAL
    (103) relational_operator -> . IDENTICAL_TO
    (104) relational_operator -> . NOT_IDENTICAL_TO
    (105) relational_operator -> . DIFFERENT

    SEMICOLON       reduce using rule 23 (return_statement -> RETURN expression .)
    RIGHT_PAREN     reduce using rule 23 (return_statement -> RETURN expression .)
    COMMA           reduce using rule 23 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQUAL_TO        shift and go to state 104
    NOT_EQUAL_TO    shift and go to state 105
    LESS_THAN       shift and go to state 106
    GREATER_THAN    shift and go to state 107
    LESS_EQUAL      shift and go to state 108
    GREATER_EQUAL   shift and go to state 109
    IDENTICAL_TO    shift and go to state 110
    NOT_IDENTICAL_TO shift and go to state 111
    DIFFERENT       shift and go to state 112

    relational_operator            shift and go to state 101

state 85

    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (95) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression

    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    ID              shift and go to state 34

    expression                     shift and go to state 100
    condition                      shift and go to state 89
    term                           shift and go to state 55
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    factor                         shift and go to state 56
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 86

    (71) for_part1 -> FOR LEFT_PAREN . assignment_list SEMICOLON
    (72) for_part1 -> FOR LEFT_PAREN . SEMICOLON
    (79) assignment_list -> . assignment_statement
    (80) assignment_list -> . assignment_list COMMA assignment_statement
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (28) variable -> . ID

    SEMICOLON       shift and go to state 138
    ID              shift and go to state 34

    assignment_list                shift and go to state 137
    assignment_statement           shift and go to state 139
    variable                       shift and go to state 140

state 87

    (62) if_statement -> IF parenthesized_condition block .
    (63) if_statement -> IF parenthesized_condition block . else_if_extended
    (64) if_statement -> IF parenthesized_condition block . else_if_extended if_part3
    (65) if_statement -> IF parenthesized_condition block . if_part3
    (66) else_if_extended -> . if_part2
    (67) else_if_extended -> . else_if_extended if_part2
    (69) if_part3 -> . ELSE block
    (68) if_part2 -> . ELSEIF parenthesized_condition block

    CLOSE_TAG       reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    BREAK           reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    CONTINUE        reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    IF              reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    WHILE           reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    FUNCTION        reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    FSCANF          reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    FGETS           reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    NAME            reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    RETURN          reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    FOR             reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    PRINT           reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    ECHO            reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    ID              reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 62 (if_statement -> IF parenthesized_condition block .)
    ELSE            shift and go to state 144
    ELSEIF          shift and go to state 145

    else_if_extended               shift and go to state 141
    if_part3                       shift and go to state 142
    if_part2                       shift and go to state 143

state 88

    (83) block -> LEFT_BRACE . statements RIGHT_BRACE
    (84) block -> LEFT_BRACE . RIGHT_BRACE
    (2) statements -> . statement2
    (3) statements -> . statements statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement -> . print_statement
    (12) statement -> . fscanf_statement
    (13) statement -> . fgets_statement
    (14) statement -> . assignment_statement
    (15) statement -> . array_declaration_statement
    (16) statement -> . BREAK
    (17) statement -> . CONTINUE
    (18) statement -> . function_call
    (19) statement -> . return_statement
    (62) if_statement -> . IF parenthesized_condition block
    (63) if_statement -> . IF parenthesized_condition block else_if_extended
    (64) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (65) if_statement -> . IF parenthesized_condition block if_part3
    (70) while_statement -> . WHILE parenthesized_condition block
    (73) for_statement -> . for_part1 condition for_part3
    (74) for_statement -> . for_part1 for_part3
    (20) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (38) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (39) print_statement -> . print_function arguments
    (25) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (113) array_declaration_statement -> . variable EQUALS array
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (23) return_statement -> . RETURN expression
    (71) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (72) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (40) print_function -> . PRINT
    (41) print_function -> . ECHO
    (28) variable -> . ID

    RIGHT_BRACE     shift and go to state 147
    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 27
    FGETS           shift and go to state 28
    NAME            shift and go to state 25
    RETURN          shift and go to state 30
    FOR             shift and go to state 31
    PRINT           shift and go to state 32
    ECHO            shift and go to state 33
    ID              shift and go to state 34

    statements                     shift and go to state 146
    statement2                     shift and go to state 4
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    print_statement                shift and go to state 12
    fscanf_statement               shift and go to state 13
    fgets_statement                shift and go to state 14
    assignment_statement           shift and go to state 15
    array_declaration_statement    shift and go to state 16
    function_call                  shift and go to state 19
    return_statement               shift and go to state 20
    for_part1                      shift and go to state 23
    print_function                 shift and go to state 26
    variable                       shift and go to state 29

state 89

    (95) parenthesized_condition -> LEFT_PAREN condition . RIGHT_PAREN
    (94) complex_condition -> condition . logical_operator condition
    (60) factor -> condition .
    (106) logical_operator -> . LOGICAL_AND
    (107) logical_operator -> . LOGICAL_OR
    (108) logical_operator -> . LOGICAL_XOR

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 148
    TIMES           reduce using rule 60 (factor -> condition .)
    DIVIDE          reduce using rule 60 (factor -> condition .)
    PLUS            reduce using rule 60 (factor -> condition .)
    MINUS           reduce using rule 60 (factor -> condition .)
    EQUAL_TO        reduce using rule 60 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 60 (factor -> condition .)
    LESS_THAN       reduce using rule 60 (factor -> condition .)
    GREATER_THAN    reduce using rule 60 (factor -> condition .)
    LESS_EQUAL      reduce using rule 60 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 60 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 60 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 60 (factor -> condition .)
    DIFFERENT       reduce using rule 60 (factor -> condition .)
    DOT             reduce using rule 60 (factor -> condition .)
    COMMA           reduce using rule 60 (factor -> condition .)
    LOGICAL_AND     shift and go to state 93
    LOGICAL_OR      shift and go to state 94
    LOGICAL_XOR     shift and go to state 95

  ! RIGHT_PAREN     [ reduce using rule 60 (factor -> condition .) ]

    logical_operator               shift and go to state 92

state 90

    (70) while_statement -> WHILE parenthesized_condition block .

    CLOSE_TAG       reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    BREAK           reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    CONTINUE        reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    IF              reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    WHILE           reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    FUNCTION        reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    FSCANF          reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    FGETS           reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    NAME            reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    RETURN          reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    FOR             reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    PRINT           reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    ECHO            reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    ID              reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 70 (while_statement -> WHILE parenthesized_condition block .)


state 91

    (73) for_statement -> for_part1 condition for_part3 .

    CLOSE_TAG       reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    ONE_LINE_COMMENT reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    MULTI_LINE_COMMENT reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    BREAK           reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    CONTINUE        reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    IF              reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    WHILE           reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    FUNCTION        reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    FSCANF          reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    FGETS           reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    NAME            reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    RETURN          reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    FOR             reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    PRINT           reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    ECHO            reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    ID              reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)
    RIGHT_BRACE     reduce using rule 73 (for_statement -> for_part1 condition for_part3 .)


state 92

    (94) complex_condition -> condition logical_operator . condition
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58

    condition                      shift and go to state 149
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51
    expression                     shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56

state 93

    (106) logical_operator -> LOGICAL_AND .

    TRUE            reduce using rule 106 (logical_operator -> LOGICAL_AND .)
    FALSE           reduce using rule 106 (logical_operator -> LOGICAL_AND .)
    LOGICAL_NOT     reduce using rule 106 (logical_operator -> LOGICAL_AND .)
    LEFT_PAREN      reduce using rule 106 (logical_operator -> LOGICAL_AND .)
    ID              reduce using rule 106 (logical_operator -> LOGICAL_AND .)
    INTEGER         reduce using rule 106 (logical_operator -> LOGICAL_AND .)
    FLOAT           reduce using rule 106 (logical_operator -> LOGICAL_AND .)


state 94

    (107) logical_operator -> LOGICAL_OR .

    TRUE            reduce using rule 107 (logical_operator -> LOGICAL_OR .)
    FALSE           reduce using rule 107 (logical_operator -> LOGICAL_OR .)
    LOGICAL_NOT     reduce using rule 107 (logical_operator -> LOGICAL_OR .)
    LEFT_PAREN      reduce using rule 107 (logical_operator -> LOGICAL_OR .)
    ID              reduce using rule 107 (logical_operator -> LOGICAL_OR .)
    INTEGER         reduce using rule 107 (logical_operator -> LOGICAL_OR .)
    FLOAT           reduce using rule 107 (logical_operator -> LOGICAL_OR .)


state 95

    (108) logical_operator -> LOGICAL_XOR .

    TRUE            reduce using rule 108 (logical_operator -> LOGICAL_XOR .)
    FALSE           reduce using rule 108 (logical_operator -> LOGICAL_XOR .)
    LOGICAL_NOT     reduce using rule 108 (logical_operator -> LOGICAL_XOR .)
    LEFT_PAREN      reduce using rule 108 (logical_operator -> LOGICAL_XOR .)
    ID              reduce using rule 108 (logical_operator -> LOGICAL_XOR .)
    INTEGER         reduce using rule 108 (logical_operator -> LOGICAL_XOR .)
    FLOAT           reduce using rule 108 (logical_operator -> LOGICAL_XOR .)


state 96

    (75) for_part3 -> SEMICOLON statement_list . RIGHT_PAREN for_part4
    (82) statement_list -> statement_list . COMMA statement

    RIGHT_PAREN     shift and go to state 150
    COMMA           shift and go to state 151


state 97

    (76) for_part3 -> SEMICOLON RIGHT_PAREN . for_part4
    (77) for_part4 -> . block
    (78) for_part4 -> . SEMICOLON
    (83) block -> . LEFT_BRACE statements RIGHT_BRACE
    (84) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 152
    LEFT_BRACE      shift and go to state 88

    for_part4                      shift and go to state 153
    block                          shift and go to state 154

state 98

    (81) statement_list -> statement .

    RIGHT_PAREN     reduce using rule 81 (statement_list -> statement .)
    COMMA           reduce using rule 81 (statement_list -> statement .)


state 99

    (93) negated_condition -> LOGICAL_NOT condition .
    (94) complex_condition -> condition . logical_operator condition
    (60) factor -> condition .
    (106) logical_operator -> . LOGICAL_AND
    (107) logical_operator -> . LOGICAL_OR
    (108) logical_operator -> . LOGICAL_XOR

  ! reduce/reduce conflict for TIMES resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for PLUS resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for MINUS resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 60 (factor -> condition .)
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .)
    DOT             reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .)
    COMMA           reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .)
    RIGHT_PAREN     reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .)
    RIGHT_BRACKET   reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .)
    TIMES           reduce using rule 60 (factor -> condition .)
    DIVIDE          reduce using rule 60 (factor -> condition .)
    PLUS            reduce using rule 60 (factor -> condition .)
    MINUS           reduce using rule 60 (factor -> condition .)
    EQUAL_TO        reduce using rule 60 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 60 (factor -> condition .)
    LESS_THAN       reduce using rule 60 (factor -> condition .)
    GREATER_THAN    reduce using rule 60 (factor -> condition .)
    LESS_EQUAL      reduce using rule 60 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 60 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 60 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 60 (factor -> condition .)
    DIFFERENT       reduce using rule 60 (factor -> condition .)
    LOGICAL_AND     shift and go to state 93
    LOGICAL_OR      shift and go to state 94
    LOGICAL_XOR     shift and go to state 95

  ! LOGICAL_AND     [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_OR      [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! TIMES           [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! DIVIDE          [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! PLUS            [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! MINUS           [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! EQUAL_TO        [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LESS_THAN       [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! GREATER_THAN    [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! LESS_EQUAL      [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! GREATER_EQUAL   [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! IDENTICAL_TO    [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]
  ! DIFFERENT       [ reduce using rule 93 (negated_condition -> LOGICAL_NOT condition .) ]

    logical_operator               shift and go to state 92

state 100

    (61) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (96) relational_expression -> expression . relational_operator expression
    (97) relational_operator -> . EQUAL_TO
    (98) relational_operator -> . NOT_EQUAL_TO
    (99) relational_operator -> . LESS_THAN
    (100) relational_operator -> . GREATER_THAN
    (101) relational_operator -> . LESS_EQUAL
    (102) relational_operator -> . GREATER_EQUAL
    (103) relational_operator -> . IDENTICAL_TO
    (104) relational_operator -> . NOT_IDENTICAL_TO
    (105) relational_operator -> . DIFFERENT

    RIGHT_PAREN     shift and go to state 155
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQUAL_TO        shift and go to state 104
    NOT_EQUAL_TO    shift and go to state 105
    LESS_THAN       shift and go to state 106
    GREATER_THAN    shift and go to state 107
    LESS_EQUAL      shift and go to state 108
    GREATER_EQUAL   shift and go to state 109
    IDENTICAL_TO    shift and go to state 110
    NOT_IDENTICAL_TO shift and go to state 111
    DIFFERENT       shift and go to state 112

    relational_operator            shift and go to state 101

state 101

    (96) relational_expression -> expression relational_operator . expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    ID              shift and go to state 34

    expression                     shift and go to state 156
    term                           shift and go to state 55
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 102

    (52) expression -> expression PLUS . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    ID              shift and go to state 34

    expression                     shift and go to state 54
    term                           shift and go to state 157
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 103

    (53) expression -> expression MINUS . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    ID              shift and go to state 34

    expression                     shift and go to state 54
    term                           shift and go to state 158
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 104

    (97) relational_operator -> EQUAL_TO .

    INTEGER         reduce using rule 97 (relational_operator -> EQUAL_TO .)
    FLOAT           reduce using rule 97 (relational_operator -> EQUAL_TO .)
    LEFT_PAREN      reduce using rule 97 (relational_operator -> EQUAL_TO .)
    TRUE            reduce using rule 97 (relational_operator -> EQUAL_TO .)
    FALSE           reduce using rule 97 (relational_operator -> EQUAL_TO .)
    LOGICAL_NOT     reduce using rule 97 (relational_operator -> EQUAL_TO .)
    ID              reduce using rule 97 (relational_operator -> EQUAL_TO .)


state 105

    (98) relational_operator -> NOT_EQUAL_TO .

    INTEGER         reduce using rule 98 (relational_operator -> NOT_EQUAL_TO .)
    FLOAT           reduce using rule 98 (relational_operator -> NOT_EQUAL_TO .)
    LEFT_PAREN      reduce using rule 98 (relational_operator -> NOT_EQUAL_TO .)
    TRUE            reduce using rule 98 (relational_operator -> NOT_EQUAL_TO .)
    FALSE           reduce using rule 98 (relational_operator -> NOT_EQUAL_TO .)
    LOGICAL_NOT     reduce using rule 98 (relational_operator -> NOT_EQUAL_TO .)
    ID              reduce using rule 98 (relational_operator -> NOT_EQUAL_TO .)


state 106

    (99) relational_operator -> LESS_THAN .

    INTEGER         reduce using rule 99 (relational_operator -> LESS_THAN .)
    FLOAT           reduce using rule 99 (relational_operator -> LESS_THAN .)
    LEFT_PAREN      reduce using rule 99 (relational_operator -> LESS_THAN .)
    TRUE            reduce using rule 99 (relational_operator -> LESS_THAN .)
    FALSE           reduce using rule 99 (relational_operator -> LESS_THAN .)
    LOGICAL_NOT     reduce using rule 99 (relational_operator -> LESS_THAN .)
    ID              reduce using rule 99 (relational_operator -> LESS_THAN .)


state 107

    (100) relational_operator -> GREATER_THAN .

    INTEGER         reduce using rule 100 (relational_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 100 (relational_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 100 (relational_operator -> GREATER_THAN .)
    TRUE            reduce using rule 100 (relational_operator -> GREATER_THAN .)
    FALSE           reduce using rule 100 (relational_operator -> GREATER_THAN .)
    LOGICAL_NOT     reduce using rule 100 (relational_operator -> GREATER_THAN .)
    ID              reduce using rule 100 (relational_operator -> GREATER_THAN .)


state 108

    (101) relational_operator -> LESS_EQUAL .

    INTEGER         reduce using rule 101 (relational_operator -> LESS_EQUAL .)
    FLOAT           reduce using rule 101 (relational_operator -> LESS_EQUAL .)
    LEFT_PAREN      reduce using rule 101 (relational_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 101 (relational_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 101 (relational_operator -> LESS_EQUAL .)
    LOGICAL_NOT     reduce using rule 101 (relational_operator -> LESS_EQUAL .)
    ID              reduce using rule 101 (relational_operator -> LESS_EQUAL .)


state 109

    (102) relational_operator -> GREATER_EQUAL .

    INTEGER         reduce using rule 102 (relational_operator -> GREATER_EQUAL .)
    FLOAT           reduce using rule 102 (relational_operator -> GREATER_EQUAL .)
    LEFT_PAREN      reduce using rule 102 (relational_operator -> GREATER_EQUAL .)
    TRUE            reduce using rule 102 (relational_operator -> GREATER_EQUAL .)
    FALSE           reduce using rule 102 (relational_operator -> GREATER_EQUAL .)
    LOGICAL_NOT     reduce using rule 102 (relational_operator -> GREATER_EQUAL .)
    ID              reduce using rule 102 (relational_operator -> GREATER_EQUAL .)


state 110

    (103) relational_operator -> IDENTICAL_TO .

    INTEGER         reduce using rule 103 (relational_operator -> IDENTICAL_TO .)
    FLOAT           reduce using rule 103 (relational_operator -> IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 103 (relational_operator -> IDENTICAL_TO .)
    TRUE            reduce using rule 103 (relational_operator -> IDENTICAL_TO .)
    FALSE           reduce using rule 103 (relational_operator -> IDENTICAL_TO .)
    LOGICAL_NOT     reduce using rule 103 (relational_operator -> IDENTICAL_TO .)
    ID              reduce using rule 103 (relational_operator -> IDENTICAL_TO .)


state 111

    (104) relational_operator -> NOT_IDENTICAL_TO .

    INTEGER         reduce using rule 104 (relational_operator -> NOT_IDENTICAL_TO .)
    FLOAT           reduce using rule 104 (relational_operator -> NOT_IDENTICAL_TO .)
    LEFT_PAREN      reduce using rule 104 (relational_operator -> NOT_IDENTICAL_TO .)
    TRUE            reduce using rule 104 (relational_operator -> NOT_IDENTICAL_TO .)
    FALSE           reduce using rule 104 (relational_operator -> NOT_IDENTICAL_TO .)
    LOGICAL_NOT     reduce using rule 104 (relational_operator -> NOT_IDENTICAL_TO .)
    ID              reduce using rule 104 (relational_operator -> NOT_IDENTICAL_TO .)


state 112

    (105) relational_operator -> DIFFERENT .

    INTEGER         reduce using rule 105 (relational_operator -> DIFFERENT .)
    FLOAT           reduce using rule 105 (relational_operator -> DIFFERENT .)
    LEFT_PAREN      reduce using rule 105 (relational_operator -> DIFFERENT .)
    TRUE            reduce using rule 105 (relational_operator -> DIFFERENT .)
    FALSE           reduce using rule 105 (relational_operator -> DIFFERENT .)
    LOGICAL_NOT     reduce using rule 105 (relational_operator -> DIFFERENT .)
    ID              reduce using rule 105 (relational_operator -> DIFFERENT .)


state 113

    (55) term -> term TIMES . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    ID              shift and go to state 34

    term                           shift and go to state 55
    factor                         shift and go to state 159
    condition                      shift and go to state 72
    expression                     shift and go to state 54
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 114

    (56) term -> term DIVIDE . factor
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    ID              shift and go to state 34

    term                           shift and go to state 55
    factor                         shift and go to state 160
    condition                      shift and go to state 72
    expression                     shift and go to state 54
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 115

    (20) function_statement -> FUNCTION NAME LEFT_PAREN . arguments RIGHT_PAREN block
    (42) arguments -> . argument
    (43) arguments -> . arguments DOT argument
    (44) arguments -> . arguments COMMA argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    arguments                      shift and go to state 161
    argument                       shift and go to state 63
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 116

    (109) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (95) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (110) casting_type -> . INT_TYPE
    (111) casting_type -> . FLOAT_TYPE
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression

    INT_TYPE        shift and go to state 123
    FLOAT_TYPE      shift and go to state 124
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    ID              shift and go to state 34

    casting_type                   shift and go to state 121
    expression                     shift and go to state 100
    condition                      shift and go to state 89
    term                           shift and go to state 55
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    factor                         shift and go to state 56
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51

state 117

    (112) function_call -> NAME LEFT_PAREN array_elements . RIGHT_PAREN
    (117) array_elements -> array_elements . COMMA argument

    RIGHT_PAREN     shift and go to state 162
    COMMA           shift and go to state 163


state 118

    (116) array_elements -> argument .

    RIGHT_PAREN     reduce using rule 116 (array_elements -> argument .)
    COMMA           reduce using rule 116 (array_elements -> argument .)
    RIGHT_BRACKET   reduce using rule 116 (array_elements -> argument .)


state 119

    (95) parenthesized_condition -> LEFT_PAREN . condition RIGHT_PAREN
    (109) casting -> LEFT_PAREN . casting_type RIGHT_PAREN
    (61) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (110) casting_type -> . INT_TYPE
    (111) casting_type -> . FLOAT_TYPE
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (96) relational_expression -> . expression relational_operator expression
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INT_TYPE        shift and go to state 123
    FLOAT_TYPE      shift and go to state 124
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52
    LEFT_PAREN      shift and go to state 53
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58

    condition                      shift and go to state 89
    casting_type                   shift and go to state 121
    expression                     shift and go to state 100
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    term                           shift and go to state 55
    variable                       shift and go to state 50
    relational_expression          shift and go to state 51
    factor                         shift and go to state 56

state 120

    (38) print_statement -> print_function LEFT_PAREN arguments . RIGHT_PAREN
    (43) arguments -> arguments . DOT argument
    (44) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 164
    DOT             shift and go to state 126
    COMMA           shift and go to state 127


state 121

    (109) casting -> LEFT_PAREN casting_type . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 165


state 122

    (61) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (46) argument -> expression .
    (96) relational_expression -> expression . relational_operator expression
    (97) relational_operator -> . EQUAL_TO
    (98) relational_operator -> . NOT_EQUAL_TO
    (99) relational_operator -> . LESS_THAN
    (100) relational_operator -> . GREATER_THAN
    (101) relational_operator -> . LESS_EQUAL
    (102) relational_operator -> . GREATER_EQUAL
    (103) relational_operator -> . IDENTICAL_TO
    (104) relational_operator -> . NOT_IDENTICAL_TO
    (105) relational_operator -> . DIFFERENT

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 155
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    DOT             reduce using rule 46 (argument -> expression .)
    COMMA           reduce using rule 46 (argument -> expression .)
    EQUAL_TO        shift and go to state 104
    NOT_EQUAL_TO    shift and go to state 105
    LESS_THAN       shift and go to state 106
    GREATER_THAN    shift and go to state 107
    LESS_EQUAL      shift and go to state 108
    GREATER_EQUAL   shift and go to state 109
    IDENTICAL_TO    shift and go to state 110
    NOT_IDENTICAL_TO shift and go to state 111
    DIFFERENT       shift and go to state 112

  ! RIGHT_PAREN     [ reduce using rule 46 (argument -> expression .) ]

    relational_operator            shift and go to state 101

state 123

    (110) casting_type -> INT_TYPE .

    RIGHT_PAREN     reduce using rule 110 (casting_type -> INT_TYPE .)


state 124

    (111) casting_type -> FLOAT_TYPE .

    RIGHT_PAREN     reduce using rule 111 (casting_type -> FLOAT_TYPE .)


state 125

    (91) simple_condition -> variable .
    (29) assignment_statement -> variable . assignment_operator argument
    (30) assignment_statement -> variable . PLUS_PLUS
    (31) assignment_statement -> variable . MINUS_MINUS
    (118) array_indexing -> variable . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (32) assignment_operator -> . EQUALS
    (33) assignment_operator -> . PLUS_EQUALS
    (34) assignment_operator -> . MINUS_EQUALS
    (35) assignment_operator -> . TIMES_EQUALS
    (36) assignment_operator -> . DIVIDE_EQUALS
    (37) assignment_operator -> . MOD_EQUALS

    RIGHT_PAREN     reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_AND     reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_OR      reduce using rule 91 (simple_condition -> variable .)
    LOGICAL_XOR     reduce using rule 91 (simple_condition -> variable .)
    TIMES           reduce using rule 91 (simple_condition -> variable .)
    DIVIDE          reduce using rule 91 (simple_condition -> variable .)
    PLUS            reduce using rule 91 (simple_condition -> variable .)
    MINUS           reduce using rule 91 (simple_condition -> variable .)
    EQUAL_TO        reduce using rule 91 (simple_condition -> variable .)
    NOT_EQUAL_TO    reduce using rule 91 (simple_condition -> variable .)
    LESS_THAN       reduce using rule 91 (simple_condition -> variable .)
    GREATER_THAN    reduce using rule 91 (simple_condition -> variable .)
    LESS_EQUAL      reduce using rule 91 (simple_condition -> variable .)
    GREATER_EQUAL   reduce using rule 91 (simple_condition -> variable .)
    IDENTICAL_TO    reduce using rule 91 (simple_condition -> variable .)
    NOT_IDENTICAL_TO reduce using rule 91 (simple_condition -> variable .)
    DIFFERENT       reduce using rule 91 (simple_condition -> variable .)
    DOT             reduce using rule 91 (simple_condition -> variable .)
    COMMA           reduce using rule 91 (simple_condition -> variable .)
    PLUS_PLUS       shift and go to state 76
    MINUS_MINUS     shift and go to state 77
    LEFT_BRACKET    shift and go to state 129
    EQUALS          shift and go to state 130
    PLUS_EQUALS     shift and go to state 79
    MINUS_EQUALS    shift and go to state 80
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 82
    MOD_EQUALS      shift and go to state 83

    assignment_operator            shift and go to state 75

state 126

    (43) arguments -> arguments DOT . argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    argument                       shift and go to state 166
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 127

    (44) arguments -> arguments COMMA . argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    argument                       shift and go to state 167
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 128

    (51) argument -> casting argument .

    DOT             reduce using rule 51 (argument -> casting argument .)
    COMMA           reduce using rule 51 (argument -> casting argument .)
    SEMICOLON       reduce using rule 51 (argument -> casting argument .)
    RIGHT_PAREN     reduce using rule 51 (argument -> casting argument .)
    RIGHT_BRACKET   reduce using rule 51 (argument -> casting argument .)


state 129

    (118) array_indexing -> variable LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 168


state 130

    (32) assignment_operator -> EQUALS .

    STRING          reduce using rule 32 (assignment_operator -> EQUALS .)
    NAME            reduce using rule 32 (assignment_operator -> EQUALS .)
    FGETS           reduce using rule 32 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 32 (assignment_operator -> EQUALS .)
    ID              reduce using rule 32 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 32 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 32 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 32 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 32 (assignment_operator -> EQUALS .)
    LOGICAL_NOT     reduce using rule 32 (assignment_operator -> EQUALS .)


state 131

    (25) fscanf_statement -> FSCANF LEFT_PAREN STDIN . COMMA STRING COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 169


state 132

    (24) fgets_statement -> FGETS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 170


state 133

    (29) assignment_statement -> variable assignment_operator argument .

    SEMICOLON       reduce using rule 29 (assignment_statement -> variable assignment_operator argument .)
    DOT             reduce using rule 29 (assignment_statement -> variable assignment_operator argument .)
    COMMA           reduce using rule 29 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_PAREN     reduce using rule 29 (assignment_statement -> variable assignment_operator argument .)
    RIGHT_BRACKET   reduce using rule 29 (assignment_statement -> variable assignment_operator argument .)


state 134

    (113) array_declaration_statement -> variable EQUALS array .

    SEMICOLON       reduce using rule 113 (array_declaration_statement -> variable EQUALS array .)
    RIGHT_PAREN     reduce using rule 113 (array_declaration_statement -> variable EQUALS array .)
    COMMA           reduce using rule 113 (array_declaration_statement -> variable EQUALS array .)


state 135

    (114) array -> ARRAY . LEFT_PAREN array_elements RIGHT_PAREN

    LEFT_PAREN      shift and go to state 171


state 136

    (115) array -> LEFT_BRACKET . array_elements RIGHT_BRACKET
    (116) array_elements -> . argument
    (117) array_elements -> . array_elements COMMA argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    array_elements                 shift and go to state 172
    argument                       shift and go to state 118
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 137

    (71) for_part1 -> FOR LEFT_PAREN assignment_list . SEMICOLON
    (80) assignment_list -> assignment_list . COMMA assignment_statement

    SEMICOLON       shift and go to state 173
    COMMA           shift and go to state 174


state 138

    (72) for_part1 -> FOR LEFT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    TRUE            reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FALSE           reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    LEFT_PAREN      reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    ID              reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    INTEGER         reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)
    FLOAT           reduce using rule 72 (for_part1 -> FOR LEFT_PAREN SEMICOLON .)


state 139

    (79) assignment_list -> assignment_statement .

    SEMICOLON       reduce using rule 79 (assignment_list -> assignment_statement .)
    COMMA           reduce using rule 79 (assignment_list -> assignment_statement .)


state 140

    (29) assignment_statement -> variable . assignment_operator argument
    (30) assignment_statement -> variable . PLUS_PLUS
    (31) assignment_statement -> variable . MINUS_MINUS
    (32) assignment_operator -> . EQUALS
    (33) assignment_operator -> . PLUS_EQUALS
    (34) assignment_operator -> . MINUS_EQUALS
    (35) assignment_operator -> . TIMES_EQUALS
    (36) assignment_operator -> . DIVIDE_EQUALS
    (37) assignment_operator -> . MOD_EQUALS

    PLUS_PLUS       shift and go to state 76
    MINUS_MINUS     shift and go to state 77
    EQUALS          shift and go to state 130
    PLUS_EQUALS     shift and go to state 79
    MINUS_EQUALS    shift and go to state 80
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 82
    MOD_EQUALS      shift and go to state 83

    assignment_operator            shift and go to state 75

state 141

    (63) if_statement -> IF parenthesized_condition block else_if_extended .
    (64) if_statement -> IF parenthesized_condition block else_if_extended . if_part3
    (67) else_if_extended -> else_if_extended . if_part2
    (69) if_part3 -> . ELSE block
    (68) if_part2 -> . ELSEIF parenthesized_condition block

    CLOSE_TAG       reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ONE_LINE_COMMENT reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    MULTI_LINE_COMMENT reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    BREAK           reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    CONTINUE        reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    IF              reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    WHILE           reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FUNCTION        reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FSCANF          reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FGETS           reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    NAME            reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    RETURN          reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    FOR             reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    PRINT           reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ECHO            reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ID              reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    RIGHT_BRACE     reduce using rule 63 (if_statement -> IF parenthesized_condition block else_if_extended .)
    ELSE            shift and go to state 144
    ELSEIF          shift and go to state 145

    if_part3                       shift and go to state 175
    if_part2                       shift and go to state 176

state 142

    (65) if_statement -> IF parenthesized_condition block if_part3 .

    CLOSE_TAG       reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    ONE_LINE_COMMENT reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    MULTI_LINE_COMMENT reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    BREAK           reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    CONTINUE        reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    IF              reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    WHILE           reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    FUNCTION        reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    FSCANF          reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    FGETS           reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    NAME            reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    RETURN          reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    FOR             reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    PRINT           reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    ECHO            reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    ID              reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)
    RIGHT_BRACE     reduce using rule 65 (if_statement -> IF parenthesized_condition block if_part3 .)


state 143

    (66) else_if_extended -> if_part2 .

    ELSE            reduce using rule 66 (else_if_extended -> if_part2 .)
    ELSEIF          reduce using rule 66 (else_if_extended -> if_part2 .)
    CLOSE_TAG       reduce using rule 66 (else_if_extended -> if_part2 .)
    ONE_LINE_COMMENT reduce using rule 66 (else_if_extended -> if_part2 .)
    MULTI_LINE_COMMENT reduce using rule 66 (else_if_extended -> if_part2 .)
    BREAK           reduce using rule 66 (else_if_extended -> if_part2 .)
    CONTINUE        reduce using rule 66 (else_if_extended -> if_part2 .)
    IF              reduce using rule 66 (else_if_extended -> if_part2 .)
    WHILE           reduce using rule 66 (else_if_extended -> if_part2 .)
    FUNCTION        reduce using rule 66 (else_if_extended -> if_part2 .)
    FSCANF          reduce using rule 66 (else_if_extended -> if_part2 .)
    FGETS           reduce using rule 66 (else_if_extended -> if_part2 .)
    NAME            reduce using rule 66 (else_if_extended -> if_part2 .)
    RETURN          reduce using rule 66 (else_if_extended -> if_part2 .)
    FOR             reduce using rule 66 (else_if_extended -> if_part2 .)
    PRINT           reduce using rule 66 (else_if_extended -> if_part2 .)
    ECHO            reduce using rule 66 (else_if_extended -> if_part2 .)
    ID              reduce using rule 66 (else_if_extended -> if_part2 .)
    RIGHT_BRACE     reduce using rule 66 (else_if_extended -> if_part2 .)


state 144

    (69) if_part3 -> ELSE . block
    (83) block -> . LEFT_BRACE statements RIGHT_BRACE
    (84) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 88

    block                          shift and go to state 177

state 145

    (68) if_part2 -> ELSEIF . parenthesized_condition block
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN

    LEFT_PAREN      shift and go to state 39

    parenthesized_condition        shift and go to state 178

state 146

    (83) block -> LEFT_BRACE statements . RIGHT_BRACE
    (3) statements -> statements . statement2
    (4) statement2 -> . statement SEMICOLON
    (5) statement2 -> . if_statement
    (6) statement2 -> . while_statement
    (7) statement2 -> . for_statement
    (8) statement2 -> . function_statement
    (9) statement2 -> . ONE_LINE_COMMENT
    (10) statement2 -> . MULTI_LINE_COMMENT
    (11) statement -> . print_statement
    (12) statement -> . fscanf_statement
    (13) statement -> . fgets_statement
    (14) statement -> . assignment_statement
    (15) statement -> . array_declaration_statement
    (16) statement -> . BREAK
    (17) statement -> . CONTINUE
    (18) statement -> . function_call
    (19) statement -> . return_statement
    (62) if_statement -> . IF parenthesized_condition block
    (63) if_statement -> . IF parenthesized_condition block else_if_extended
    (64) if_statement -> . IF parenthesized_condition block else_if_extended if_part3
    (65) if_statement -> . IF parenthesized_condition block if_part3
    (70) while_statement -> . WHILE parenthesized_condition block
    (73) for_statement -> . for_part1 condition for_part3
    (74) for_statement -> . for_part1 for_part3
    (20) function_statement -> . FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block
    (38) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (39) print_statement -> . print_function arguments
    (25) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (113) array_declaration_statement -> . variable EQUALS array
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (23) return_statement -> . RETURN expression
    (71) for_part1 -> . FOR LEFT_PAREN assignment_list SEMICOLON
    (72) for_part1 -> . FOR LEFT_PAREN SEMICOLON
    (40) print_function -> . PRINT
    (41) print_function -> . ECHO
    (28) variable -> . ID

    RIGHT_BRACE     shift and go to state 179
    ONE_LINE_COMMENT shift and go to state 10
    MULTI_LINE_COMMENT shift and go to state 11
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FUNCTION        shift and go to state 24
    FSCANF          shift and go to state 27
    FGETS           shift and go to state 28
    NAME            shift and go to state 25
    RETURN          shift and go to state 30
    FOR             shift and go to state 31
    PRINT           shift and go to state 32
    ECHO            shift and go to state 33
    ID              shift and go to state 34

    statement2                     shift and go to state 36
    statement                      shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    print_statement                shift and go to state 12
    fscanf_statement               shift and go to state 13
    fgets_statement                shift and go to state 14
    assignment_statement           shift and go to state 15
    array_declaration_statement    shift and go to state 16
    function_call                  shift and go to state 19
    return_statement               shift and go to state 20
    for_part1                      shift and go to state 23
    print_function                 shift and go to state 26
    variable                       shift and go to state 29

state 147

    (84) block -> LEFT_BRACE RIGHT_BRACE .

    ELSE            reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    ELSEIF          reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    CLOSE_TAG       reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    CONTINUE        reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    FSCANF          reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    FGETS           reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    NAME            reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    FOR             reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    ECHO            reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    ID              reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 84 (block -> LEFT_BRACE RIGHT_BRACE .)


state 148

    (95) parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .

    LEFT_BRACE      reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    SEMICOLON       reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_AND     reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    TIMES           reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DIVIDE          reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    PLUS            reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    MINUS           reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    EQUAL_TO        reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    NOT_EQUAL_TO    reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LESS_THAN       reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    IDENTICAL_TO    reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    NOT_IDENTICAL_TO reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DIFFERENT       reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    DOT             reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    COMMA           reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 95 (parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN .)


state 149

    (94) complex_condition -> condition logical_operator condition .
    (94) complex_condition -> condition . logical_operator condition
    (60) factor -> condition .
    (106) logical_operator -> . LOGICAL_AND
    (107) logical_operator -> . LOGICAL_OR
    (108) logical_operator -> . LOGICAL_XOR

  ! reduce/reduce conflict for TIMES resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for PLUS resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for MINUS resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 60 (factor -> condition .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 60 (factor -> condition .)
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
    SEMICOLON       reduce using rule 94 (complex_condition -> condition logical_operator condition .)
    DOT             reduce using rule 94 (complex_condition -> condition logical_operator condition .)
    COMMA           reduce using rule 94 (complex_condition -> condition logical_operator condition .)
    RIGHT_PAREN     reduce using rule 94 (complex_condition -> condition logical_operator condition .)
    RIGHT_BRACKET   reduce using rule 94 (complex_condition -> condition logical_operator condition .)
    TIMES           reduce using rule 60 (factor -> condition .)
    DIVIDE          reduce using rule 60 (factor -> condition .)
    PLUS            reduce using rule 60 (factor -> condition .)
    MINUS           reduce using rule 60 (factor -> condition .)
    EQUAL_TO        reduce using rule 60 (factor -> condition .)
    NOT_EQUAL_TO    reduce using rule 60 (factor -> condition .)
    LESS_THAN       reduce using rule 60 (factor -> condition .)
    GREATER_THAN    reduce using rule 60 (factor -> condition .)
    LESS_EQUAL      reduce using rule 60 (factor -> condition .)
    GREATER_EQUAL   reduce using rule 60 (factor -> condition .)
    IDENTICAL_TO    reduce using rule 60 (factor -> condition .)
    NOT_IDENTICAL_TO reduce using rule 60 (factor -> condition .)
    DIFFERENT       reduce using rule 60 (factor -> condition .)
    LOGICAL_AND     shift and go to state 93
    LOGICAL_OR      shift and go to state 94
    LOGICAL_XOR     shift and go to state 95

  ! LOGICAL_AND     [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! LOGICAL_OR      [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! LOGICAL_XOR     [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! TIMES           [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! DIVIDE          [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! PLUS            [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! MINUS           [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! EQUAL_TO        [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! LESS_THAN       [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! GREATER_THAN    [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! LESS_EQUAL      [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! GREATER_EQUAL   [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! IDENTICAL_TO    [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]
  ! DIFFERENT       [ reduce using rule 94 (complex_condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 92

state 150

    (75) for_part3 -> SEMICOLON statement_list RIGHT_PAREN . for_part4
    (77) for_part4 -> . block
    (78) for_part4 -> . SEMICOLON
    (83) block -> . LEFT_BRACE statements RIGHT_BRACE
    (84) block -> . LEFT_BRACE RIGHT_BRACE

    SEMICOLON       shift and go to state 152
    LEFT_BRACE      shift and go to state 88

    for_part4                      shift and go to state 180
    block                          shift and go to state 154

state 151

    (82) statement_list -> statement_list COMMA . statement
    (11) statement -> . print_statement
    (12) statement -> . fscanf_statement
    (13) statement -> . fgets_statement
    (14) statement -> . assignment_statement
    (15) statement -> . array_declaration_statement
    (16) statement -> . BREAK
    (17) statement -> . CONTINUE
    (18) statement -> . function_call
    (19) statement -> . return_statement
    (38) print_statement -> . print_function LEFT_PAREN arguments RIGHT_PAREN
    (39) print_statement -> . print_function arguments
    (25) fscanf_statement -> . FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (113) array_declaration_statement -> . variable EQUALS array
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (23) return_statement -> . RETURN expression
    (40) print_function -> . PRINT
    (41) print_function -> . ECHO
    (28) variable -> . ID

    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    FSCANF          shift and go to state 27
    FGETS           shift and go to state 28
    NAME            shift and go to state 25
    RETURN          shift and go to state 30
    PRINT           shift and go to state 32
    ECHO            shift and go to state 33
    ID              shift and go to state 34

    statement                      shift and go to state 181
    print_statement                shift and go to state 12
    fscanf_statement               shift and go to state 13
    fgets_statement                shift and go to state 14
    assignment_statement           shift and go to state 15
    array_declaration_statement    shift and go to state 16
    function_call                  shift and go to state 19
    return_statement               shift and go to state 20
    print_function                 shift and go to state 26
    variable                       shift and go to state 29

state 152

    (78) for_part4 -> SEMICOLON .

    CLOSE_TAG       reduce using rule 78 (for_part4 -> SEMICOLON .)
    ONE_LINE_COMMENT reduce using rule 78 (for_part4 -> SEMICOLON .)
    MULTI_LINE_COMMENT reduce using rule 78 (for_part4 -> SEMICOLON .)
    BREAK           reduce using rule 78 (for_part4 -> SEMICOLON .)
    CONTINUE        reduce using rule 78 (for_part4 -> SEMICOLON .)
    IF              reduce using rule 78 (for_part4 -> SEMICOLON .)
    WHILE           reduce using rule 78 (for_part4 -> SEMICOLON .)
    FUNCTION        reduce using rule 78 (for_part4 -> SEMICOLON .)
    FSCANF          reduce using rule 78 (for_part4 -> SEMICOLON .)
    FGETS           reduce using rule 78 (for_part4 -> SEMICOLON .)
    NAME            reduce using rule 78 (for_part4 -> SEMICOLON .)
    RETURN          reduce using rule 78 (for_part4 -> SEMICOLON .)
    FOR             reduce using rule 78 (for_part4 -> SEMICOLON .)
    PRINT           reduce using rule 78 (for_part4 -> SEMICOLON .)
    ECHO            reduce using rule 78 (for_part4 -> SEMICOLON .)
    ID              reduce using rule 78 (for_part4 -> SEMICOLON .)
    RIGHT_BRACE     reduce using rule 78 (for_part4 -> SEMICOLON .)


state 153

    (76) for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    IF              reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    NAME            reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    ID              reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 76 (for_part3 -> SEMICOLON RIGHT_PAREN for_part4 .)


state 154

    (77) for_part4 -> block .

    CLOSE_TAG       reduce using rule 77 (for_part4 -> block .)
    ONE_LINE_COMMENT reduce using rule 77 (for_part4 -> block .)
    MULTI_LINE_COMMENT reduce using rule 77 (for_part4 -> block .)
    BREAK           reduce using rule 77 (for_part4 -> block .)
    CONTINUE        reduce using rule 77 (for_part4 -> block .)
    IF              reduce using rule 77 (for_part4 -> block .)
    WHILE           reduce using rule 77 (for_part4 -> block .)
    FUNCTION        reduce using rule 77 (for_part4 -> block .)
    FSCANF          reduce using rule 77 (for_part4 -> block .)
    FGETS           reduce using rule 77 (for_part4 -> block .)
    NAME            reduce using rule 77 (for_part4 -> block .)
    RETURN          reduce using rule 77 (for_part4 -> block .)
    FOR             reduce using rule 77 (for_part4 -> block .)
    PRINT           reduce using rule 77 (for_part4 -> block .)
    ECHO            reduce using rule 77 (for_part4 -> block .)
    ID              reduce using rule 77 (for_part4 -> block .)
    RIGHT_BRACE     reduce using rule 77 (for_part4 -> block .)


state 155

    (61) factor -> LEFT_PAREN expression RIGHT_PAREN .

    TIMES           reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUAL_TO        reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUAL_TO    reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_THAN       reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL_TO    reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL_TO reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIFFERENT       reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT             reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_AND     reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_OR      reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGICAL_XOR     reduce using rule 61 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 156

    (96) relational_expression -> expression relational_operator expression .
    (52) expression -> expression . PLUS term
    (53) expression -> expression . MINUS term
    (96) relational_expression -> expression . relational_operator expression
    (97) relational_operator -> . EQUAL_TO
    (98) relational_operator -> . NOT_EQUAL_TO
    (99) relational_operator -> . LESS_THAN
    (100) relational_operator -> . GREATER_THAN
    (101) relational_operator -> . LESS_EQUAL
    (102) relational_operator -> . GREATER_EQUAL
    (103) relational_operator -> . IDENTICAL_TO
    (104) relational_operator -> . NOT_IDENTICAL_TO
    (105) relational_operator -> . DIFFERENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for NOT_EQUAL_TO resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for IDENTICAL_TO resolved as shift
  ! shift/reduce conflict for NOT_IDENTICAL_TO resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
    SEMICOLON       reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    LOGICAL_AND     reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    LOGICAL_OR      reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    LOGICAL_XOR     reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    TIMES           reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    DIVIDE          reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    DOT             reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    COMMA           reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    RIGHT_PAREN     reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    RIGHT_BRACKET   reduce using rule 96 (relational_expression -> expression relational_operator expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQUAL_TO        shift and go to state 104
    NOT_EQUAL_TO    shift and go to state 105
    LESS_THAN       shift and go to state 106
    GREATER_THAN    shift and go to state 107
    LESS_EQUAL      shift and go to state 108
    GREATER_EQUAL   shift and go to state 109
    IDENTICAL_TO    shift and go to state 110
    NOT_IDENTICAL_TO shift and go to state 111
    DIFFERENT       shift and go to state 112

  ! PLUS            [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! MINUS           [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! EQUAL_TO        [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! LESS_THAN       [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! GREATER_THAN    [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! IDENTICAL_TO    [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]
  ! DIFFERENT       [ reduce using rule 96 (relational_expression -> expression relational_operator expression .) ]

    relational_operator            shift and go to state 101

state 157

    (52) expression -> expression PLUS term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor
    (54) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 52 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 52 (expression -> expression PLUS term .)
    PLUS            reduce using rule 52 (expression -> expression PLUS term .)
    MINUS           reduce using rule 52 (expression -> expression PLUS term .)
    EQUAL_TO        reduce using rule 52 (expression -> expression PLUS term .)
    NOT_EQUAL_TO    reduce using rule 52 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 52 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 52 (expression -> expression PLUS term .)
    LESS_EQUAL      reduce using rule 52 (expression -> expression PLUS term .)
    GREATER_EQUAL   reduce using rule 52 (expression -> expression PLUS term .)
    IDENTICAL_TO    reduce using rule 52 (expression -> expression PLUS term .)
    NOT_IDENTICAL_TO reduce using rule 52 (expression -> expression PLUS term .)
    DIFFERENT       reduce using rule 52 (expression -> expression PLUS term .)
    DOT             reduce using rule 52 (expression -> expression PLUS term .)
    COMMA           reduce using rule 52 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 52 (expression -> expression PLUS term .)
    RIGHT_PAREN     reduce using rule 52 (expression -> expression PLUS term .)
    RIGHT_BRACKET   reduce using rule 52 (expression -> expression PLUS term .)
    LOGICAL_AND     reduce using rule 52 (expression -> expression PLUS term .)
    LOGICAL_OR      reduce using rule 52 (expression -> expression PLUS term .)
    LOGICAL_XOR     reduce using rule 52 (expression -> expression PLUS term .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114

  ! TIMES           [ reduce using rule 52 (expression -> expression PLUS term .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression PLUS term .) ]
  ! PLUS            [ reduce using rule 54 (expression -> term .) ]
  ! MINUS           [ reduce using rule 54 (expression -> term .) ]
  ! EQUAL_TO        [ reduce using rule 54 (expression -> term .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 54 (expression -> term .) ]
  ! LESS_THAN       [ reduce using rule 54 (expression -> term .) ]
  ! GREATER_THAN    [ reduce using rule 54 (expression -> term .) ]
  ! LESS_EQUAL      [ reduce using rule 54 (expression -> term .) ]
  ! GREATER_EQUAL   [ reduce using rule 54 (expression -> term .) ]
  ! IDENTICAL_TO    [ reduce using rule 54 (expression -> term .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 54 (expression -> term .) ]
  ! DIFFERENT       [ reduce using rule 54 (expression -> term .) ]


state 158

    (53) expression -> expression MINUS term .
    (55) term -> term . TIMES factor
    (56) term -> term . DIVIDE factor
    (54) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 53 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 53 (expression -> expression MINUS term .)
    PLUS            reduce using rule 53 (expression -> expression MINUS term .)
    MINUS           reduce using rule 53 (expression -> expression MINUS term .)
    EQUAL_TO        reduce using rule 53 (expression -> expression MINUS term .)
    NOT_EQUAL_TO    reduce using rule 53 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 53 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 53 (expression -> expression MINUS term .)
    LESS_EQUAL      reduce using rule 53 (expression -> expression MINUS term .)
    GREATER_EQUAL   reduce using rule 53 (expression -> expression MINUS term .)
    IDENTICAL_TO    reduce using rule 53 (expression -> expression MINUS term .)
    NOT_IDENTICAL_TO reduce using rule 53 (expression -> expression MINUS term .)
    DIFFERENT       reduce using rule 53 (expression -> expression MINUS term .)
    DOT             reduce using rule 53 (expression -> expression MINUS term .)
    COMMA           reduce using rule 53 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 53 (expression -> expression MINUS term .)
    RIGHT_PAREN     reduce using rule 53 (expression -> expression MINUS term .)
    RIGHT_BRACKET   reduce using rule 53 (expression -> expression MINUS term .)
    LOGICAL_AND     reduce using rule 53 (expression -> expression MINUS term .)
    LOGICAL_OR      reduce using rule 53 (expression -> expression MINUS term .)
    LOGICAL_XOR     reduce using rule 53 (expression -> expression MINUS term .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114

  ! TIMES           [ reduce using rule 53 (expression -> expression MINUS term .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression MINUS term .) ]
  ! PLUS            [ reduce using rule 54 (expression -> term .) ]
  ! MINUS           [ reduce using rule 54 (expression -> term .) ]
  ! EQUAL_TO        [ reduce using rule 54 (expression -> term .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 54 (expression -> term .) ]
  ! LESS_THAN       [ reduce using rule 54 (expression -> term .) ]
  ! GREATER_THAN    [ reduce using rule 54 (expression -> term .) ]
  ! LESS_EQUAL      [ reduce using rule 54 (expression -> term .) ]
  ! GREATER_EQUAL   [ reduce using rule 54 (expression -> term .) ]
  ! IDENTICAL_TO    [ reduce using rule 54 (expression -> term .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 54 (expression -> term .) ]
  ! DIFFERENT       [ reduce using rule 54 (expression -> term .) ]


state 159

    (55) term -> term TIMES factor .
    (57) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 55 (term -> term TIMES factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 55 (term -> term TIMES factor .)
    TIMES           reduce using rule 55 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 55 (term -> term TIMES factor .)
    PLUS            reduce using rule 55 (term -> term TIMES factor .)
    MINUS           reduce using rule 55 (term -> term TIMES factor .)
    EQUAL_TO        reduce using rule 55 (term -> term TIMES factor .)
    NOT_EQUAL_TO    reduce using rule 55 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 55 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 55 (term -> term TIMES factor .)
    LESS_EQUAL      reduce using rule 55 (term -> term TIMES factor .)
    GREATER_EQUAL   reduce using rule 55 (term -> term TIMES factor .)
    IDENTICAL_TO    reduce using rule 55 (term -> term TIMES factor .)
    NOT_IDENTICAL_TO reduce using rule 55 (term -> term TIMES factor .)
    DIFFERENT       reduce using rule 55 (term -> term TIMES factor .)
    DOT             reduce using rule 55 (term -> term TIMES factor .)
    COMMA           reduce using rule 55 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 55 (term -> term TIMES factor .)
    RIGHT_PAREN     reduce using rule 55 (term -> term TIMES factor .)
    RIGHT_BRACKET   reduce using rule 55 (term -> term TIMES factor .)
    LOGICAL_AND     reduce using rule 55 (term -> term TIMES factor .)
    LOGICAL_OR      reduce using rule 55 (term -> term TIMES factor .)
    LOGICAL_XOR     reduce using rule 55 (term -> term TIMES factor .)

  ! TIMES           [ reduce using rule 57 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 57 (term -> factor .) ]
  ! PLUS            [ reduce using rule 57 (term -> factor .) ]
  ! MINUS           [ reduce using rule 57 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 57 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 57 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 57 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 57 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 57 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 57 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 57 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 57 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 57 (term -> factor .) ]


state 160

    (56) term -> term DIVIDE factor .
    (57) term -> factor .

  ! reduce/reduce conflict for TIMES resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for NOT_EQUAL_TO resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for IDENTICAL_TO resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for NOT_IDENTICAL_TO resolved using rule 56 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 56 (term -> term DIVIDE factor .)
    TIMES           reduce using rule 56 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 56 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 56 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 56 (term -> term DIVIDE factor .)
    EQUAL_TO        reduce using rule 56 (term -> term DIVIDE factor .)
    NOT_EQUAL_TO    reduce using rule 56 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 56 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 56 (term -> term DIVIDE factor .)
    LESS_EQUAL      reduce using rule 56 (term -> term DIVIDE factor .)
    GREATER_EQUAL   reduce using rule 56 (term -> term DIVIDE factor .)
    IDENTICAL_TO    reduce using rule 56 (term -> term DIVIDE factor .)
    NOT_IDENTICAL_TO reduce using rule 56 (term -> term DIVIDE factor .)
    DIFFERENT       reduce using rule 56 (term -> term DIVIDE factor .)
    DOT             reduce using rule 56 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 56 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 56 (term -> term DIVIDE factor .)
    RIGHT_PAREN     reduce using rule 56 (term -> term DIVIDE factor .)
    RIGHT_BRACKET   reduce using rule 56 (term -> term DIVIDE factor .)
    LOGICAL_AND     reduce using rule 56 (term -> term DIVIDE factor .)
    LOGICAL_OR      reduce using rule 56 (term -> term DIVIDE factor .)
    LOGICAL_XOR     reduce using rule 56 (term -> term DIVIDE factor .)

  ! TIMES           [ reduce using rule 57 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 57 (term -> factor .) ]
  ! PLUS            [ reduce using rule 57 (term -> factor .) ]
  ! MINUS           [ reduce using rule 57 (term -> factor .) ]
  ! EQUAL_TO        [ reduce using rule 57 (term -> factor .) ]
  ! NOT_EQUAL_TO    [ reduce using rule 57 (term -> factor .) ]
  ! LESS_THAN       [ reduce using rule 57 (term -> factor .) ]
  ! GREATER_THAN    [ reduce using rule 57 (term -> factor .) ]
  ! LESS_EQUAL      [ reduce using rule 57 (term -> factor .) ]
  ! GREATER_EQUAL   [ reduce using rule 57 (term -> factor .) ]
  ! IDENTICAL_TO    [ reduce using rule 57 (term -> factor .) ]
  ! NOT_IDENTICAL_TO [ reduce using rule 57 (term -> factor .) ]
  ! DIFFERENT       [ reduce using rule 57 (term -> factor .) ]


state 161

    (20) function_statement -> FUNCTION NAME LEFT_PAREN arguments . RIGHT_PAREN block
    (43) arguments -> arguments . DOT argument
    (44) arguments -> arguments . COMMA argument

    RIGHT_PAREN     shift and go to state 182
    DOT             shift and go to state 126
    COMMA           shift and go to state 127


state 162

    (112) function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN .

    SEMICOLON       reduce using rule 112 (function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN .)
    DOT             reduce using rule 112 (function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN .)
    COMMA           reduce using rule 112 (function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 112 (function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 112 (function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN .)


state 163

    (117) array_elements -> array_elements COMMA . argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    argument                       shift and go to state 183
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 164

    (38) print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .

    SEMICOLON       reduce using rule 38 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 38 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)
    COMMA           reduce using rule 38 (print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN .)


state 165

    (109) casting -> LEFT_PAREN casting_type RIGHT_PAREN .

    STRING          reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    NAME            reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FGETS           reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    ID              reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    INTEGER         reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FLOAT           reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    TRUE            reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    FALSE           reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)
    LOGICAL_NOT     reduce using rule 109 (casting -> LEFT_PAREN casting_type RIGHT_PAREN .)


state 166

    (43) arguments -> arguments DOT argument .

    DOT             reduce using rule 43 (arguments -> arguments DOT argument .)
    COMMA           reduce using rule 43 (arguments -> arguments DOT argument .)
    SEMICOLON       reduce using rule 43 (arguments -> arguments DOT argument .)
    RIGHT_PAREN     reduce using rule 43 (arguments -> arguments DOT argument .)


state 167

    (44) arguments -> arguments COMMA argument .

    DOT             reduce using rule 44 (arguments -> arguments COMMA argument .)
    COMMA           reduce using rule 44 (arguments -> arguments COMMA argument .)
    SEMICOLON       reduce using rule 44 (arguments -> arguments COMMA argument .)
    RIGHT_PAREN     reduce using rule 44 (arguments -> arguments COMMA argument .)


state 168

    (118) array_indexing -> variable LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 184


state 169

    (25) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA . STRING COMMA variable_list RIGHT_PAREN

    STRING          shift and go to state 185


state 170

    (24) fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 24 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    DOT             reduce using rule 24 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    COMMA           reduce using rule 24 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 24 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 24 (fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN .)


state 171

    (114) array -> ARRAY LEFT_PAREN . array_elements RIGHT_PAREN
    (116) array_elements -> . argument
    (117) array_elements -> . array_elements COMMA argument
    (45) argument -> . STRING
    (46) argument -> . expression
    (47) argument -> . assignment_statement
    (48) argument -> . function_call
    (49) argument -> . fgets_statement
    (50) argument -> . array_indexing
    (51) argument -> . casting argument
    (52) expression -> . expression PLUS term
    (53) expression -> . expression MINUS term
    (54) expression -> . term
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (112) function_call -> . NAME LEFT_PAREN array_elements RIGHT_PAREN
    (24) fgets_statement -> . FGETS LEFT_PAREN STDIN RIGHT_PAREN
    (118) array_indexing -> . variable LEFT_BRACKET INTEGER RIGHT_BRACKET
    (109) casting -> . LEFT_PAREN casting_type RIGHT_PAREN
    (55) term -> . term TIMES factor
    (56) term -> . term DIVIDE factor
    (57) term -> . factor
    (28) variable -> . ID
    (58) factor -> . INTEGER
    (59) factor -> . FLOAT
    (60) factor -> . condition
    (61) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (85) condition -> . simple_condition
    (86) condition -> . negated_condition
    (87) condition -> . complex_condition
    (88) condition -> . parenthesized_condition
    (89) simple_condition -> . TRUE
    (90) simple_condition -> . FALSE
    (91) simple_condition -> . variable
    (92) simple_condition -> . relational_expression
    (93) negated_condition -> . LOGICAL_NOT condition
    (94) complex_condition -> . condition logical_operator condition
    (95) parenthesized_condition -> . LEFT_PAREN condition RIGHT_PAREN
    (96) relational_expression -> . expression relational_operator expression

    STRING          shift and go to state 64
    NAME            shift and go to state 25
    FGETS           shift and go to state 28
    LEFT_PAREN      shift and go to state 116
    ID              shift and go to state 34
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LOGICAL_NOT     shift and go to state 52

    array_elements                 shift and go to state 186
    argument                       shift and go to state 118
    expression                     shift and go to state 65
    assignment_statement           shift and go to state 66
    function_call                  shift and go to state 67
    fgets_statement                shift and go to state 68
    array_indexing                 shift and go to state 69
    casting                        shift and go to state 70
    term                           shift and go to state 55
    variable                       shift and go to state 71
    factor                         shift and go to state 56
    condition                      shift and go to state 72
    simple_condition               shift and go to state 43
    negated_condition              shift and go to state 44
    complex_condition              shift and go to state 45
    parenthesized_condition        shift and go to state 46
    relational_expression          shift and go to state 51

state 172

    (115) array -> LEFT_BRACKET array_elements . RIGHT_BRACKET
    (117) array_elements -> array_elements . COMMA argument

    RIGHT_BRACKET   shift and go to state 187
    COMMA           shift and go to state 163


state 173

    (71) for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .

    SEMICOLON       reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    TRUE            reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FALSE           reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LOGICAL_NOT     reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    LEFT_PAREN      reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    ID              reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    INTEGER         reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)
    FLOAT           reduce using rule 71 (for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON .)


state 174

    (80) assignment_list -> assignment_list COMMA . assignment_statement
    (29) assignment_statement -> . variable assignment_operator argument
    (30) assignment_statement -> . variable PLUS_PLUS
    (31) assignment_statement -> . variable MINUS_MINUS
    (28) variable -> . ID

    ID              shift and go to state 34

    assignment_statement           shift and go to state 188
    variable                       shift and go to state 140

state 175

    (64) if_statement -> IF parenthesized_condition block else_if_extended if_part3 .

    CLOSE_TAG       reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ONE_LINE_COMMENT reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    MULTI_LINE_COMMENT reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    BREAK           reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    CONTINUE        reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    IF              reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    WHILE           reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FUNCTION        reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FSCANF          reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FGETS           reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    NAME            reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    RETURN          reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    FOR             reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    PRINT           reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ECHO            reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    ID              reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)
    RIGHT_BRACE     reduce using rule 64 (if_statement -> IF parenthesized_condition block else_if_extended if_part3 .)


state 176

    (67) else_if_extended -> else_if_extended if_part2 .

    ELSE            reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    ELSEIF          reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    CLOSE_TAG       reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    ONE_LINE_COMMENT reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    MULTI_LINE_COMMENT reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    BREAK           reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    CONTINUE        reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    IF              reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    WHILE           reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    FUNCTION        reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    FSCANF          reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    FGETS           reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    NAME            reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    RETURN          reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    FOR             reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    PRINT           reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    ECHO            reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    ID              reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)
    RIGHT_BRACE     reduce using rule 67 (else_if_extended -> else_if_extended if_part2 .)


state 177

    (69) if_part3 -> ELSE block .

    CLOSE_TAG       reduce using rule 69 (if_part3 -> ELSE block .)
    ONE_LINE_COMMENT reduce using rule 69 (if_part3 -> ELSE block .)
    MULTI_LINE_COMMENT reduce using rule 69 (if_part3 -> ELSE block .)
    BREAK           reduce using rule 69 (if_part3 -> ELSE block .)
    CONTINUE        reduce using rule 69 (if_part3 -> ELSE block .)
    IF              reduce using rule 69 (if_part3 -> ELSE block .)
    WHILE           reduce using rule 69 (if_part3 -> ELSE block .)
    FUNCTION        reduce using rule 69 (if_part3 -> ELSE block .)
    FSCANF          reduce using rule 69 (if_part3 -> ELSE block .)
    FGETS           reduce using rule 69 (if_part3 -> ELSE block .)
    NAME            reduce using rule 69 (if_part3 -> ELSE block .)
    RETURN          reduce using rule 69 (if_part3 -> ELSE block .)
    FOR             reduce using rule 69 (if_part3 -> ELSE block .)
    PRINT           reduce using rule 69 (if_part3 -> ELSE block .)
    ECHO            reduce using rule 69 (if_part3 -> ELSE block .)
    ID              reduce using rule 69 (if_part3 -> ELSE block .)
    RIGHT_BRACE     reduce using rule 69 (if_part3 -> ELSE block .)


state 178

    (68) if_part2 -> ELSEIF parenthesized_condition . block
    (83) block -> . LEFT_BRACE statements RIGHT_BRACE
    (84) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 88

    block                          shift and go to state 189

state 179

    (83) block -> LEFT_BRACE statements RIGHT_BRACE .

    ELSE            reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ELSEIF          reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CLOSE_TAG       reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ONE_LINE_COMMENT reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    MULTI_LINE_COMMENT reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    BREAK           reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    CONTINUE        reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    IF              reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    WHILE           reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FUNCTION        reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FSCANF          reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FGETS           reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    NAME            reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RETURN          reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    FOR             reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    PRINT           reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ECHO            reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    ID              reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 83 (block -> LEFT_BRACE statements RIGHT_BRACE .)


state 180

    (75) for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .

    CLOSE_TAG       reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ONE_LINE_COMMENT reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    MULTI_LINE_COMMENT reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    BREAK           reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    CONTINUE        reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    IF              reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    WHILE           reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FUNCTION        reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FSCANF          reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FGETS           reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    NAME            reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RETURN          reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    FOR             reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    PRINT           reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ECHO            reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    ID              reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)
    RIGHT_BRACE     reduce using rule 75 (for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4 .)


state 181

    (82) statement_list -> statement_list COMMA statement .

    RIGHT_PAREN     reduce using rule 82 (statement_list -> statement_list COMMA statement .)
    COMMA           reduce using rule 82 (statement_list -> statement_list COMMA statement .)


state 182

    (20) function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN . block
    (83) block -> . LEFT_BRACE statements RIGHT_BRACE
    (84) block -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 88

    block                          shift and go to state 190

state 183

    (117) array_elements -> array_elements COMMA argument .

    RIGHT_PAREN     reduce using rule 117 (array_elements -> array_elements COMMA argument .)
    COMMA           reduce using rule 117 (array_elements -> array_elements COMMA argument .)
    RIGHT_BRACKET   reduce using rule 117 (array_elements -> array_elements COMMA argument .)


state 184

    (118) array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .

    DOT             reduce using rule 118 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 118 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 118 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 118 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 118 (array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 185

    (25) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING . COMMA variable_list RIGHT_PAREN

    COMMA           shift and go to state 191


state 186

    (114) array -> ARRAY LEFT_PAREN array_elements . RIGHT_PAREN
    (117) array_elements -> array_elements . COMMA argument

    RIGHT_PAREN     shift and go to state 192
    COMMA           shift and go to state 163


state 187

    (115) array -> LEFT_BRACKET array_elements RIGHT_BRACKET .

    SEMICOLON       reduce using rule 115 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 115 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)
    COMMA           reduce using rule 115 (array -> LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 188

    (80) assignment_list -> assignment_list COMMA assignment_statement .

    SEMICOLON       reduce using rule 80 (assignment_list -> assignment_list COMMA assignment_statement .)
    COMMA           reduce using rule 80 (assignment_list -> assignment_list COMMA assignment_statement .)


state 189

    (68) if_part2 -> ELSEIF parenthesized_condition block .

    ELSE            reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    ELSEIF          reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    CLOSE_TAG       reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    ONE_LINE_COMMENT reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    MULTI_LINE_COMMENT reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    BREAK           reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    CONTINUE        reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    IF              reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    WHILE           reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    FUNCTION        reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    FSCANF          reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    FGETS           reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    NAME            reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    RETURN          reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    FOR             reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    PRINT           reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    ECHO            reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    ID              reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)
    RIGHT_BRACE     reduce using rule 68 (if_part2 -> ELSEIF parenthesized_condition block .)


state 190

    (20) function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .

    CLOSE_TAG       reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    ONE_LINE_COMMENT reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    MULTI_LINE_COMMENT reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    BREAK           reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    CONTINUE        reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    IF              reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    WHILE           reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FUNCTION        reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FSCANF          reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FGETS           reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    NAME            reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    RETURN          reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    FOR             reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    PRINT           reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    ECHO            reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    ID              reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)
    RIGHT_BRACE     reduce using rule 20 (function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block .)


state 191

    (25) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA . variable_list RIGHT_PAREN
    (26) variable_list -> . variable
    (27) variable_list -> . variable_list COMMA variable
    (28) variable -> . ID

    ID              shift and go to state 34

    variable_list                  shift and go to state 193
    variable                       shift and go to state 194

state 192

    (114) array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .

    SEMICOLON       reduce using rule 114 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 114 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)
    COMMA           reduce using rule 114 (array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN .)


state 193

    (25) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list . RIGHT_PAREN
    (27) variable_list -> variable_list . COMMA variable

    RIGHT_PAREN     shift and go to state 196
    COMMA           shift and go to state 195


state 194

    (26) variable_list -> variable .

    RIGHT_PAREN     reduce using rule 26 (variable_list -> variable .)
    COMMA           reduce using rule 26 (variable_list -> variable .)


state 195

    (27) variable_list -> variable_list COMMA . variable
    (28) variable -> . ID

    ID              shift and go to state 34

    variable                       shift and go to state 197

state 196

    (25) fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .

    SEMICOLON       reduce using rule 25 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 25 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)
    COMMA           reduce using rule 25 (fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN .)


state 197

    (27) variable_list -> variable_list COMMA variable .

    RIGHT_PAREN     reduce using rule 27 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 27 (variable_list -> variable_list COMMA variable .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 55 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 55 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 62 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 72 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 72 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 72 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 99 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 99 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 99 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 149 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 149 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 149 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 156 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL_TO in state 156 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 156 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 156 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 156 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 156 resolved as shift
WARNING: shift/reduce conflict for IDENTICAL_TO in state 156 resolved as shift
WARNING: shift/reduce conflict for NOT_IDENTICAL_TO in state 156 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 156 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 157 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 157 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 158 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 158 resolved as shift
WARNING: reduce/reduce conflict in state 99 resolved using rule (factor -> condition)
WARNING: rejected rule (negated_condition -> LOGICAL_NOT condition) in state 99
WARNING: reduce/reduce conflict in state 149 resolved using rule (factor -> condition)
WARNING: rejected rule (complex_condition -> condition logical_operator condition) in state 149
WARNING: reduce/reduce conflict in state 157 resolved using rule (expression -> expression PLUS term)
WARNING: rejected rule (expression -> term) in state 157
WARNING: reduce/reduce conflict in state 158 resolved using rule (expression -> expression MINUS term)
WARNING: rejected rule (expression -> term) in state 158
WARNING: reduce/reduce conflict in state 159 resolved using rule (term -> term TIMES factor)
WARNING: rejected rule (term -> factor) in state 159
WARNING: reduce/reduce conflict in state 160 resolved using rule (term -> term DIVIDE factor)
WARNING: rejected rule (term -> factor) in state 160
