
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE COUNT DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROMprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENT\n                  | class_declarationstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | return_statement\n                 | array_indexing\n                 | array_add_element\n                 | array_modify_element\n                 | array_remove_element\n                 | array_count_elements\n                 | expressionfunction_statement : FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION NAME LEFT_PAREN RIGHT_PAREN blockanonymous_function : FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION LEFT_PAREN RIGHT_PAREN blockreturn_statement : RETURN argumentsfunction_call : function_name LEFT_PAREN arguments RIGHT_PAREN\n                     | function_name LEFT_PAREN RIGHT_PARENfunction_name : NAME\n                     | variablefgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : ID\n                | ID CALL NAMEassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | array\n                | array_indexing\n                | function_call\n                | variable CALL function_call\n                | anonymous_function\n                | assignment_statement\n                | fgets_statement\n                | object_creation\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | term MOD factor\n            | term POWER factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block\n                    | IF parenthesized_condition block else_if_extended\n                    | IF parenthesized_condition block else_if_extended if_part3\n                    | IF parenthesized_condition block if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition blockif_part3 : ELSE blockwhile_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : array_argument\n                      | array_elements COMMA array_argumentarray_argument : argument\n                      | clave KEY_VALUE argumentclave : STRING\n             | INTEGERarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKETarray_add_element : variable LEFT_BRACKET RIGHT_BRACKET EQUALS argumentarray_modify_element : variable LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS argumentarray_remove_element : UNSET LEFT_PAREN variable LEFT_BRACKET INTEGER RIGHT_BRACKET RIGHT_PARENarray_count_elements : COUNT LEFT_PAREN variable RIGHT_PARENclass_declaration : CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE\n                         | CLASS NAME LEFT_BRACE RIGHT_BRACEclass_statements : class_statement\n                        | class_statements class_statementclass_statement : method_declaration\n                       | property_declaration\n                       | ONE_LINE_COMMENT\n                       | MULTI_LINE_COMMENTmethod_declaration : visibility_operator function_statementproperty_declaration : visibility_operator variable SEMICOLONvisibility_operator : PUBLIC\n                           | PRIVATE\n                           | PROTECTEDobject_creation : NEW NAME LEFT_PAREN RIGHT_PAREN\n                       | NEW NAME LEFT_PAREN arguments RIGHT_PAREN'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,60,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,61,62,79,137,138,139,140,148,190,191,192,195,196,199,200,201,204,205,206,207,208,209,210,238,239,240,242,243,246,247,248,249,264,265,266,],[10,10,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,10,-89,-92,209,-82,-84,-85,10,-103,-97,-95,-96,209,-146,-147,-149,-150,-151,-152,-83,-86,-88,-102,-94,-28,-145,-148,-153,-87,-27,-154,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,61,62,79,137,138,139,140,148,190,191,192,195,196,199,200,201,204,205,206,207,208,209,210,238,239,240,242,243,246,247,248,249,264,265,266,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,11,-89,-92,210,-82,-84,-85,11,-103,-97,-95,-96,210,-146,-147,-149,-150,-151,-152,-83,-86,-88,-102,-94,-28,-145,-148,-153,-87,-27,-154,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,18,-81,18,-89,-92,-82,-84,-85,18,-103,18,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,19,-81,19,-89,-92,-82,-84,-85,19,-103,19,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'IF':([2,3,4,6,7,8,9,10,11,12,61,62,79,137,138,139,140,190,191,192,195,196,199,200,201,205,238,239,240,242,243,246,247,264,265,],[28,28,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,28,-89,-92,-82,-84,-85,28,-103,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,61,62,79,137,138,139,140,190,191,192,195,196,199,200,201,205,238,239,240,242,243,246,247,264,265,],[30,30,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,30,-89,-92,-82,-84,-85,30,-103,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,37,42,48,49,61,62,79,92,105,107,112,115,117,118,119,120,121,122,137,138,139,140,145,156,157,160,162,169,190,191,192,195,196,199,200,201,205,211,212,213,214,216,224,225,228,232,238,239,240,242,243,246,247,260,264,265,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,108,108,-53,-54,-3,-4,-93,108,108,108,108,-45,-46,-47,-48,-49,-50,108,-81,33,-89,-92,108,108,108,-45,108,108,-82,-84,-85,33,-103,-97,-95,-96,-146,33,-155,-156,-157,-128,108,108,108,108,-83,-86,-88,-102,-94,-28,-145,108,-87,-27,]),'CLASS':([2,3,4,6,7,8,9,10,11,12,61,62,79,137,138,139,140,190,191,192,195,196,199,200,201,205,238,239,240,242,243,246,247,264,265,],[36,36,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,36,-89,-92,-82,-84,-85,36,-103,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[38,38,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,38,-81,38,-89,-92,-82,-84,-85,38,-103,38,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,37,42,48,49,61,62,79,80,92,105,107,112,115,117,118,119,120,121,122,137,138,139,140,145,156,157,160,162,169,190,191,192,195,196,198,199,200,201,205,216,224,225,228,232,238,239,240,242,243,246,247,260,264,265,],[39,39,-2,-5,-6,-7,-8,-9,-10,-11,39,39,-53,-54,-3,-4,-93,39,39,39,39,39,-45,-46,-47,-48,-49,-50,39,-81,39,-89,-92,39,39,39,-45,39,39,-82,-84,-85,39,-103,39,-97,-95,-96,-146,-128,39,39,39,39,-83,-86,-88,-102,-94,-28,-145,39,-87,-27,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[42,42,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,42,-81,42,-89,-92,-82,-84,-85,42,-103,42,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'UNSET':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[44,44,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,44,-81,44,-89,-92,-82,-84,-85,44,-103,44,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'COUNT':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[45,45,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,45,-81,45,-89,-92,-82,-84,-85,45,-103,45,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'FOR':([2,3,4,6,7,8,9,10,11,12,61,62,79,137,138,139,140,190,191,192,195,196,199,200,201,205,238,239,240,242,243,246,247,264,265,],[47,47,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,47,-89,-92,-82,-84,-85,47,-103,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[48,48,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,48,-81,48,-89,-92,-82,-84,-85,48,-103,48,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,61,62,79,80,137,138,139,140,190,191,192,195,196,198,199,200,201,205,238,239,240,242,243,246,247,264,265,],[49,49,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,49,-81,49,-89,-92,-82,-84,-85,49,-103,49,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'ID':([2,3,4,6,7,8,9,10,11,12,31,35,37,42,48,49,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,82,84,85,86,87,92,105,107,112,115,117,118,119,120,121,122,124,125,126,127,128,129,130,131,137,138,139,140,145,149,156,157,158,160,162,169,186,190,191,192,195,196,198,199,200,201,205,211,212,213,214,216,224,225,228,232,236,237,238,239,240,242,243,246,247,260,264,265,269,275,],[50,50,-2,-5,-6,-7,-8,-9,-10,-11,50,50,50,50,-53,-54,50,-3,-4,50,50,50,-116,-117,-118,-119,-120,-121,-122,-123,-124,50,-93,50,50,50,-125,-126,-127,50,50,50,50,-45,-46,-47,-48,-49,-50,50,50,50,50,50,50,50,50,50,-81,50,-89,-92,50,50,50,50,50,-45,50,50,-91,-82,-84,-85,50,-103,50,-97,-95,-96,-146,50,-155,-156,-157,-128,50,50,50,50,-90,50,-83,-86,-88,-102,-94,-28,-145,50,-87,-27,50,50,]),'NAME':([2,3,4,6,7,8,9,10,11,12,33,36,37,42,48,49,61,62,79,80,92,105,107,109,112,115,117,118,119,120,121,122,132,137,138,139,140,145,156,157,158,160,162,169,190,191,192,195,196,198,199,200,201,205,216,224,225,228,232,238,239,240,242,243,246,247,260,264,265,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,88,91,34,34,-53,-54,-3,-4,-93,34,34,34,34,170,34,-45,-46,-47,-48,-49,-50,34,189,-81,34,-89,-92,34,34,34,34,-45,34,34,-82,-84,-85,34,-103,34,-97,-95,-96,-146,-128,34,34,34,34,-83,-86,-88,-102,-94,-28,-145,34,-87,-27,]),'INTEGER':([2,3,4,6,7,8,9,10,11,12,31,35,37,42,48,49,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,82,84,85,86,87,92,105,107,112,115,116,117,118,119,120,121,122,124,127,128,129,130,137,138,139,140,145,149,156,157,159,160,162,169,186,190,191,192,195,196,198,199,200,201,205,216,224,225,228,232,234,236,238,239,240,242,243,246,247,260,264,265,],[43,43,-2,-5,-6,-7,-8,-9,-10,-11,43,43,43,43,-53,-54,43,-3,-4,43,43,43,-116,-117,-118,-119,-120,-121,-122,-123,-124,43,-93,43,43,43,-125,-126,-127,43,43,168,43,-45,175,-46,-47,-48,-49,-50,43,43,43,43,43,43,-81,43,-89,-92,168,43,43,43,221,-45,168,168,-91,-82,-84,-85,43,-103,43,-97,-95,-96,-146,-128,168,43,43,43,262,-90,-83,-86,-88,-102,-94,-28,-145,43,-87,-27,]),'FLOAT':([2,3,4,6,7,8,9,10,11,12,31,35,37,42,48,49,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,82,84,85,86,87,92,105,107,112,115,117,118,119,120,121,122,124,127,128,129,130,137,138,139,140,145,149,156,157,160,162,169,186,190,191,192,195,196,198,199,200,201,205,216,224,225,228,232,236,238,239,240,242,243,246,247,260,264,265,],[52,52,-2,-5,-6,-7,-8,-9,-10,-11,52,52,52,52,-53,-54,52,-3,-4,52,52,52,-116,-117,-118,-119,-120,-121,-122,-123,-124,52,-93,52,52,52,-125,-126,-127,52,52,52,52,-45,-46,-47,-48,-49,-50,52,52,52,52,52,52,-81,52,-89,-92,52,52,52,52,-45,52,52,-91,-82,-84,-85,52,-103,52,-97,-95,-96,-146,-128,52,52,52,52,-90,-83,-86,-88,-102,-94,-28,-145,52,-87,-27,]),'LEFT_PAREN':([2,3,4,6,7,8,9,10,11,12,28,30,31,34,35,37,38,39,40,41,42,44,45,47,48,49,50,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,82,84,85,86,87,88,92,100,105,106,107,108,112,115,117,118,119,120,121,122,124,127,128,129,130,137,138,139,140,145,149,155,156,157,160,162,169,170,186,189,190,191,192,194,195,196,198,199,200,201,205,216,219,224,225,228,232,236,238,239,240,242,243,246,247,260,264,265,],[35,35,-2,-5,-6,-7,-8,-9,-10,-11,76,76,82,-34,82,92,110,111,-35,122,124,125,126,131,-53,-54,-40,82,-3,-4,35,35,35,-116,-117,-118,-119,-120,-121,-122,-123,-124,82,-93,35,82,82,-125,-126,-127,145,149,-35,124,162,124,169,124,-45,-46,-47,-48,-49,-50,124,82,35,35,35,35,-81,35,-89,-92,124,82,-35,124,124,-45,124,124,228,-91,-41,-82,-84,-85,76,35,-103,35,-97,-95,-96,-146,-128,-35,124,124,124,124,-90,-83,-86,-88,-102,-94,-28,-145,124,-87,-27,]),'TRUE':([2,3,4,6,7,8,9,10,11,12,31,35,37,42,48,49,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,82,84,85,86,87,92,105,107,112,115,117,118,119,120,121,122,124,127,128,129,130,137,138,139,140,145,149,156,157,160,162,169,186,190,191,192,195,196,198,199,200,201,205,216,224,225,228,232,236,238,239,240,242,243,246,247,260,264,265,],[56,56,-2,-5,-6,-7,-8,-9,-10,-11,56,56,56,56,-53,-54,56,-3,-4,56,56,56,-116,-117,-118,-119,-120,-121,-122,-123,-124,56,-93,56,56,56,-125,-126,-127,56,56,56,56,-45,-46,-47,-48,-49,-50,56,56,56,56,56,56,-81,56,-89,-92,56,56,56,56,-45,56,56,-91,-82,-84,-85,56,-103,56,-97,-95,-96,-146,-128,56,56,56,56,-90,-83,-86,-88,-102,-94,-28,-145,56,-87,-27,]),'FALSE':([2,3,4,6,7,8,9,10,11,12,31,35,37,42,48,49,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,82,84,85,86,87,92,105,107,112,115,117,118,119,120,121,122,124,127,128,129,130,137,138,139,140,145,149,156,157,160,162,169,186,190,191,192,195,196,198,199,200,201,205,216,224,225,228,232,236,238,239,240,242,243,246,247,260,264,265,],[57,57,-2,-5,-6,-7,-8,-9,-10,-11,57,57,57,57,-53,-54,57,-3,-4,57,57,57,-116,-117,-118,-119,-120,-121,-122,-123,-124,57,-93,57,57,57,-125,-126,-127,57,57,57,57,-45,-46,-47,-48,-49,-50,57,57,57,57,57,57,-81,57,-89,-92,57,57,57,57,-45,57,57,-91,-82,-84,-85,57,-103,57,-97,-95,-96,-146,-128,57,57,57,57,-90,-83,-86,-88,-102,-94,-28,-145,57,-87,-27,]),'LOGICAL_NOT':([2,3,4,6,7,8,9,10,11,12,31,35,37,42,48,49,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,80,82,84,85,86,87,92,105,107,112,115,117,118,119,120,121,122,124,127,128,129,130,137,138,139,140,145,149,156,157,160,162,169,186,190,191,192,195,196,198,199,200,201,205,216,224,225,228,232,236,238,239,240,242,243,246,247,260,264,265,],[59,59,-2,-5,-6,-7,-8,-9,-10,-11,59,59,59,59,-53,-54,59,-3,-4,59,59,59,-116,-117,-118,-119,-120,-121,-122,-123,-124,59,-93,59,59,59,-125,-126,-127,59,59,59,59,-45,-46,-47,-48,-49,-50,59,59,59,59,59,59,-81,59,-89,-92,59,59,59,59,-45,59,59,-91,-82,-84,-85,59,-103,59,-97,-95,-96,-146,-128,59,59,59,59,-90,-83,-86,-88,-102,-94,-28,-145,59,-87,-27,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,61,62,79,137,139,140,190,191,192,196,199,200,201,205,238,239,240,242,243,246,247,264,265,],[60,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,-89,-92,-82,-84,-85,-103,-97,-95,-96,-146,-83,-86,-88,-102,-94,-28,-145,-87,-27,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,61,62,79,137,138,139,140,148,190,191,192,195,196,199,200,201,204,205,206,207,208,209,210,238,239,240,242,243,246,247,248,249,264,265,266,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-93,-81,196,-89,-92,205,-82,-84,-85,242,-103,-97,-95,-96,247,-146,-147,-149,-150,-151,-152,-83,-86,-88,-102,-94,-28,-145,-148,-153,-87,-27,-154,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,93,94,95,96,97,98,99,100,101,102,103,104,113,114,123,131,133,134,135,136,142,144,146,147,161,173,174,178,181,182,183,184,185,186,187,189,196,197,215,217,218,220,223,230,231,233,235,236,242,250,251,252,256,257,261,263,267,268,270,274,276,],[62,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-107,80,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,80,-110,-52,-55,-58,-59,-60,-61,-62,-110,-64,-65,-66,-67,-43,-44,-31,186,-112,-69,-70,-115,199,-113,-80,-114,-68,-42,-131,-33,-72,-73,-74,-75,236,-91,-98,-41,-103,199,-51,-56,-57,-63,-133,-36,-140,-32,-144,-90,-102,266,-140,-132,-30,-158,-141,-99,-29,-159,-142,-143,-37,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,80,81,89,90,93,94,95,96,97,98,99,100,101,102,103,104,113,114,122,123,133,134,135,136,141,143,144,145,146,147,150,151,152,153,154,155,161,164,165,167,168,169,172,173,174,177,178,180,181,182,183,184,189,196,202,215,217,218,220,222,223,226,228,230,231,233,235,242,244,251,252,253,254,256,257,258,261,267,268,270,271,272,273,274,276,277,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,142,-110,146,147,-52,-55,-58,-59,-60,-61,-62,-110,-64,-65,-66,-67,-43,-44,178,-31,-112,-69,-70,-115,197,-100,-113,203,-80,-114,215,216,146,-129,-130,-110,-68,-134,-136,-58,-77,227,230,-42,-131,233,-33,235,-72,-73,-74,-75,-41,-103,245,-51,-56,-57,-63,252,-133,255,257,-36,-140,-32,-144,-102,-101,-140,-132,-135,-137,-30,-158,268,-141,-29,-159,-142,274,276,-38,-143,-37,-39,]),'COMMA':([13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,81,90,93,94,95,96,97,98,99,100,101,102,103,104,113,114,123,133,134,135,136,141,143,144,146,147,150,152,155,161,163,164,165,167,168,171,173,174,177,178,181,182,183,184,185,187,189,196,202,215,217,218,220,222,223,226,230,231,233,235,242,244,251,252,253,254,256,257,258,259,261,263,267,268,270,272,273,274,276,277,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-110,-79,157,-55,-58,-59,-60,-61,-62,-110,-64,-65,-66,-67,-43,-44,157,-112,-69,-70,-115,198,-100,-113,-80,-114,157,-59,-110,-68,224,-134,-136,-58,-77,229,-42,-131,157,-33,-72,-73,-74,-75,237,-98,-41,-103,224,-51,-56,-57,-63,224,-133,224,-36,-140,-32,-144,-102,-101,-140,-132,-135,-137,-30,-158,157,269,-141,-99,-29,-159,-142,275,-38,-143,-37,-39,]),'PLUS':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[63,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,63,63,-79,63,-110,-79,-69,-70,63,-79,-80,-114,63,-110,-77,-72,-73,-74,-75,-41,]),'MINUS':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[64,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,64,64,-79,64,-110,-79,-69,-70,64,-79,-80,-114,64,-110,-77,-72,-73,-74,-75,-41,]),'EQUAL_TO':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[66,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,66,66,-79,66,-110,-79,-69,-70,66,-79,-80,-114,66,-110,-77,-72,-73,-74,-75,-41,]),'NOT_EQUAL_TO':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[67,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,67,67,-79,67,-110,-79,-69,-70,67,-79,-80,-114,67,-110,-77,-72,-73,-74,-75,-41,]),'LESS_THAN':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[68,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,68,68,-79,68,-110,-79,-69,-70,68,-79,-80,-114,68,-110,-77,-72,-73,-74,-75,-41,]),'GREATER_THAN':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[69,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,69,69,-79,69,-110,-79,-69,-70,69,-79,-80,-114,69,-110,-77,-72,-73,-74,-75,-41,]),'LESS_EQUAL':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[70,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,70,70,-79,70,-110,-79,-69,-70,70,-79,-80,-114,70,-110,-77,-72,-73,-74,-75,-41,]),'GREATER_EQUAL':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[71,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,71,71,-79,71,-110,-79,-69,-70,71,-79,-80,-114,71,-110,-77,-72,-73,-74,-75,-41,]),'IDENTICAL_TO':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[72,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,72,72,-79,72,-110,-79,-69,-70,72,-79,-80,-114,72,-110,-77,-72,-73,-74,-75,-41,]),'NOT_IDENTICAL_TO':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[73,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,73,73,-79,73,-110,-79,-69,-70,73,-79,-80,-114,73,-110,-77,-72,-73,-74,-75,-41,]),'DIFFERENT':([27,29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,83,89,90,96,100,133,134,135,136,144,146,147,152,155,168,181,182,183,184,189,],[74,-107,-79,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,74,74,-79,74,-110,-79,-69,-70,74,-79,-80,-114,74,-110,-77,-72,-73,-74,-75,-41,]),'LOGICAL_AND':([29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,90,100,133,134,135,136,144,146,147,155,181,182,183,184,189,],[-107,85,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,85,-110,85,-110,85,-69,-70,-115,85,-80,-114,-110,-72,-73,-74,-75,-41,]),'LOGICAL_OR':([29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,90,100,133,134,135,136,144,146,147,155,181,182,183,184,189,],[-107,86,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,86,-110,86,-110,86,-69,-70,-115,86,-80,-114,-110,-72,-73,-74,-75,-41,]),'LOGICAL_XOR':([29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,90,100,133,134,135,136,144,146,147,155,181,182,183,184,189,],[-107,87,-110,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,87,-110,87,-110,87,-69,-70,-115,87,-80,-114,-110,-72,-73,-74,-75,-41,]),'TIMES':([29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,90,100,133,134,135,136,144,146,147,155,168,181,182,183,184,189,],[-107,-79,-110,-77,127,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,-79,-110,-79,127,127,-115,-79,-80,-114,-110,-77,-72,-73,-74,-75,-41,]),'DIVIDE':([29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,90,100,133,134,135,136,144,146,147,155,168,181,182,183,184,189,],[-107,-79,-110,-77,128,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,-79,-110,-79,128,128,-115,-79,-80,-114,-110,-77,-72,-73,-74,-75,-41,]),'MOD':([29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,90,100,133,134,135,136,144,146,147,155,168,181,182,183,184,189,],[-107,-79,-110,-77,129,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,-79,-110,-79,129,129,-115,-79,-80,-114,-110,-77,-72,-73,-74,-75,-41,]),'POWER':([29,32,40,43,46,50,51,52,53,54,55,56,57,58,78,81,90,100,133,134,135,136,144,146,147,155,168,181,182,183,184,189,],[-107,-79,-110,-77,130,-40,-76,-78,-104,-105,-106,-108,-109,-111,-79,-110,-79,-110,-79,130,130,-115,-79,-80,-114,-110,-77,-72,-73,-74,-75,-41,]),'DOT':([29,32,43,46,50,51,52,53,54,55,56,57,58,81,90,93,94,95,96,97,98,99,100,101,102,103,104,113,114,123,133,134,135,136,144,146,147,150,152,155,161,173,177,178,181,182,183,184,189,196,217,218,220,223,230,233,242,251,252,256,257,258,267,268,],[-107,-79,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-110,-79,156,-55,-58,-59,-60,-61,-62,-110,-64,-65,-66,-67,-43,-44,156,-112,-69,-70,-115,-113,-80,-114,156,-59,-110,-68,-42,156,-33,-72,-73,-74,-75,-41,-103,-56,-57,-63,-133,-36,-32,-102,-140,-132,-30,-158,156,-29,-159,]),'RIGHT_BRACKET':([29,32,43,46,50,51,52,53,54,55,56,57,58,81,95,96,97,98,99,100,101,102,103,104,113,114,116,133,134,135,136,144,146,147,161,163,164,165,167,168,173,175,178,181,182,183,184,189,196,220,221,223,230,233,242,251,252,253,254,256,257,262,267,268,],[-107,-79,-77,-71,-40,-76,-78,-104,-105,-106,-108,-109,-111,-110,-58,-59,-60,-61,-62,-110,-64,-65,-66,-67,-43,-44,176,-112,-69,-70,-115,-113,-80,-114,-68,223,-134,-136,-58,-77,-42,231,-33,-72,-73,-74,-75,-41,-103,-63,251,-133,-36,-32,-102,-140,-132,-135,-137,-30,-158,271,-29,-159,]),'STRING':([37,42,48,49,92,105,107,112,115,117,118,119,120,121,122,145,156,157,160,162,169,216,224,225,228,229,232,260,],[95,95,-53,-54,95,95,167,95,-45,-46,-47,-48,-49,-50,95,167,95,95,-45,167,167,-128,167,95,95,259,95,95,]),'ARRAY':([37,42,48,49,92,105,107,112,115,117,118,119,120,121,122,145,156,157,160,162,169,216,224,225,228,232,260,],[106,106,-53,-54,106,106,106,106,106,-46,-47,-48,-49,-50,106,106,106,106,-45,106,106,-128,106,106,106,106,106,]),'LEFT_BRACKET':([37,40,42,48,49,50,92,100,105,107,112,115,117,118,119,120,121,122,145,155,156,157,160,162,169,179,189,216,224,225,228,232,260,],[107,116,107,-53,-54,-40,107,159,107,107,107,107,-46,-47,-48,-49,-50,107,107,159,107,107,-45,107,107,234,-41,-128,107,107,107,107,107,]),'NEW':([37,42,48,49,92,105,107,112,115,117,118,119,120,121,122,145,156,157,160,162,169,216,224,225,228,232,260,],[109,109,-53,-54,109,109,109,109,-45,-46,-47,-48,-49,-50,109,109,109,109,-45,109,109,-128,109,109,109,109,109,]),'PLUS_PLUS':([40,50,100,155,188,189,],[113,-40,113,113,113,-41,]),'MINUS_MINUS':([40,50,100,155,188,189,],[114,-40,114,114,114,-41,]),'EQUALS':([40,50,100,155,176,188,189,231,],[115,-40,160,160,232,160,-41,260,]),'PLUS_EQUALS':([40,50,100,155,188,189,],[117,-40,117,117,117,-41,]),'MINUS_EQUALS':([40,50,100,155,188,189,],[118,-40,118,118,118,-41,]),'TIMES_EQUALS':([40,50,100,155,188,189,],[119,-40,119,119,119,-41,]),'DIVIDE_EQUALS':([40,50,100,155,188,189,],[120,-40,120,120,120,-41,]),'MOD_EQUALS':([40,50,100,155,188,189,],[121,-40,121,121,121,-41,]),'CALL':([50,100,155,189,],[132,158,158,-41,]),'LEFT_BRACE':([75,77,91,142,147,193,197,203,227,241,245,255,],[138,138,148,138,-114,138,138,138,138,138,138,138,]),'INT_TYPE':([92,124,149,],[153,153,153,]),'FLOAT_TYPE':([92,124,149,],[154,154,154,]),'STDIN':([110,111,],[171,172,]),'ELSE':([137,190,192,196,239,242,264,],[193,193,-85,-103,-86,-102,-87,]),'ELSEIF':([137,190,192,196,239,242,264,],[194,194,-85,-103,-86,-102,-87,]),'PUBLIC':([148,196,204,206,207,208,209,210,242,246,248,249,265,266,],[212,-103,212,-147,-149,-150,-151,-152,-102,-28,-148,-153,-27,-154,]),'PRIVATE':([148,196,204,206,207,208,209,210,242,246,248,249,265,266,],[213,-103,213,-147,-149,-150,-151,-152,-102,-28,-148,-153,-27,-154,]),'PROTECTED':([148,196,204,206,207,208,209,210,242,246,248,249,265,266,],[214,-103,214,-147,-149,-150,-151,-152,-102,-28,-148,-153,-27,-154,]),'KEY_VALUE':([166,167,168,],[225,-138,-139,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,138,],[3,195,]),'statement2':([2,3,138,195,],[4,61,4,61,]),'statement':([2,3,80,138,195,198,],[5,5,143,5,5,244,]),'if_statement':([2,3,138,195,],[6,6,6,6,]),'while_statement':([2,3,138,195,],[7,7,7,7,]),'for_statement':([2,3,138,195,],[8,8,8,8,]),'function_statement':([2,3,138,195,211,],[9,9,9,9,249,]),'class_declaration':([2,3,138,195,],[12,12,12,12,]),'print_statement':([2,3,80,138,195,198,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,80,138,195,198,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,37,42,80,92,105,107,112,122,138,145,156,157,162,169,195,198,224,225,228,232,260,],[15,15,103,103,15,103,103,103,103,103,15,103,103,103,103,103,15,15,103,103,103,103,103,]),'assignment_statement':([2,3,37,42,80,92,105,107,112,122,131,138,145,156,157,162,169,195,198,224,225,228,232,237,260,],[16,16,102,102,16,102,102,102,102,102,187,16,102,102,102,102,102,16,16,102,102,102,102,263,102,]),'array_declaration_statement':([2,3,80,138,195,198,],[17,17,17,17,17,17,]),'function_call':([2,3,37,42,80,92,105,107,112,122,138,145,156,157,158,162,169,195,198,224,225,228,232,260,],[20,20,99,99,20,99,99,99,99,99,20,99,99,99,220,99,99,20,20,99,99,99,99,99,]),'return_statement':([2,3,80,138,195,198,],[21,21,21,21,21,21,]),'array_indexing':([2,3,37,42,80,92,105,107,112,122,138,145,156,157,162,169,195,198,224,225,228,232,260,],[22,22,98,98,22,98,98,98,98,98,22,98,98,98,98,98,22,22,98,98,98,98,98,]),'array_add_element':([2,3,80,138,195,198,],[23,23,23,23,23,23,]),'array_modify_element':([2,3,80,138,195,198,],[24,24,24,24,24,24,]),'array_remove_element':([2,3,80,138,195,198,],[25,25,25,25,25,25,]),'array_count_elements':([2,3,80,138,195,198,],[26,26,26,26,26,26,]),'expression':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[27,27,83,89,96,96,83,83,83,136,83,27,89,83,152,96,96,96,96,89,83,83,83,83,27,96,89,96,96,96,96,27,27,96,96,96,96,96,]),'parenthesized_condition':([2,3,28,30,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,194,195,198,224,225,228,232,260,],[29,29,75,77,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,241,29,29,29,29,29,29,29,]),'for_part1':([2,3,138,195,],[31,31,31,31,]),'condition':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[32,32,78,90,32,32,133,32,32,32,90,32,90,144,90,32,32,32,32,90,32,32,32,32,32,32,90,32,32,32,32,32,32,32,32,32,32,32,]),'print_function':([2,3,80,138,195,198,],[37,37,37,37,37,37,]),'variable':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,125,126,127,128,129,130,131,138,145,149,156,157,158,162,169,195,198,211,224,225,228,232,237,260,269,275,],[40,40,81,81,100,100,81,81,81,81,81,40,81,81,155,100,100,100,100,81,179,180,81,81,81,81,188,40,100,81,100,100,219,100,100,40,40,250,100,100,100,100,188,100,273,277,]),'function_name':([2,3,37,42,80,92,105,107,112,122,138,145,156,157,158,162,169,195,198,224,225,228,232,260,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'term':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[46,46,46,46,46,46,46,134,135,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'factor':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,181,182,183,184,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'simple_condition':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'negated_condition':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'complex_condition':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'relational_expression':([2,3,31,35,37,42,59,63,64,65,76,80,82,84,92,105,107,112,122,124,127,128,129,130,138,145,149,156,157,162,169,195,198,224,225,228,232,260,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'relational_operator':([27,83,89,96,136,152,],[65,65,65,65,65,65,]),'for_part3':([31,78,],[79,140,]),'logical_operator':([32,78,90,133,144,],[84,84,84,84,84,]),'arguments':([37,42,92,122,228,],[93,123,150,177,258,]),'argument':([37,42,92,105,107,112,122,145,156,157,162,169,224,225,228,232,260,],[94,94,94,161,165,173,94,165,217,218,165,165,165,254,94,261,270,]),'array':([37,42,92,105,107,112,115,122,145,156,157,162,169,224,225,228,232,260,],[97,97,97,97,97,97,174,97,97,97,97,97,97,97,97,97,97,97,]),'anonymous_function':([37,42,92,105,107,112,122,145,156,157,162,169,224,225,228,232,260,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'object_creation':([37,42,92,105,107,112,122,145,156,157,162,169,224,225,228,232,260,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'casting':([37,42,92,105,107,112,122,145,156,157,162,169,224,225,228,232,260,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'assignment_operator':([40,100,155,188,],[112,112,112,112,]),'block':([75,77,142,193,197,203,227,241,245,255,],[137,139,201,240,201,246,256,264,265,267,]),'statement_list':([80,],[141,]),'casting_type':([92,124,149,],[151,151,151,]),'array_elements':([107,145,162,169,],[163,202,222,226,]),'array_argument':([107,145,162,169,224,],[164,164,164,164,253,]),'clave':([107,145,162,169,224,],[166,166,166,166,166,]),'assignment_list':([131,],[185,]),'else_if_extended':([137,],[190,]),'if_part3':([137,190,],[191,238,]),'if_part2':([137,190,],[192,239,]),'for_part4':([142,197,],[200,243,]),'class_statements':([148,],[204,]),'class_statement':([148,204,],[206,248,]),'method_declaration':([148,204,],[207,207,]),'property_declaration':([148,204,],[208,208,]),'visibility_operator':([148,204,],[211,211,]),'variable_list':([269,],[272,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',20),
  ('statements -> statement2','statements',1,'p_statements','parser.py',24),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',25),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',33),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',34),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',35),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',36),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',37),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',38),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',39),
  ('statement2 -> class_declaration','statement2',1,'p_statement2','parser.py',40),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',45),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',46),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',47),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',48),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',49),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',50),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',51),
  ('statement -> function_call','statement',1,'p_statement','parser.py',52),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',53),
  ('statement -> array_indexing','statement',1,'p_statement','parser.py',54),
  ('statement -> array_add_element','statement',1,'p_statement','parser.py',55),
  ('statement -> array_modify_element','statement',1,'p_statement','parser.py',56),
  ('statement -> array_remove_element','statement',1,'p_statement','parser.py',57),
  ('statement -> array_count_elements','statement',1,'p_statement','parser.py',58),
  ('statement -> expression','statement',1,'p_statement','parser.py',59),
  ('function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',65),
  ('function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block','function_statement',5,'p_function_statement','parser.py',66),
  ('anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block','anonymous_function',5,'p_anonymous_function','parser.py',74),
  ('anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block','anonymous_function',4,'p_anonymous_function','parser.py',75),
  ('return_statement -> RETURN arguments','return_statement',2,'p_return_statement','parser.py',82),
  ('function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN','function_call',4,'p_function_call','parser.py',86),
  ('function_call -> function_name LEFT_PAREN RIGHT_PAREN','function_call',3,'p_function_call','parser.py',87),
  ('function_name -> NAME','function_name',1,'p_function_name','parser.py',94),
  ('function_name -> variable','function_name',1,'p_function_name','parser.py',95),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',101),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',106),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',110),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',111),
  ('variable -> ID','variable',1,'p_variable','parser.py',119),
  ('variable -> ID CALL NAME','variable',3,'p_variable','parser.py',120),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',128),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',129),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',130),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',138),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',139),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',140),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',141),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',142),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',143),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',148),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',149),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',156),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',157),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',161),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',162),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',163),
  ('argument -> STRING','argument',1,'p_argument','parser.py',171),
  ('argument -> expression','argument',1,'p_argument','parser.py',172),
  ('argument -> array','argument',1,'p_argument','parser.py',173),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',174),
  ('argument -> function_call','argument',1,'p_argument','parser.py',175),
  ('argument -> variable CALL function_call','argument',3,'p_argument','parser.py',176),
  ('argument -> anonymous_function','argument',1,'p_argument','parser.py',177),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',178),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',179),
  ('argument -> object_creation','argument',1,'p_argument','parser.py',180),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',181),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',191),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',192),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',193),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',201),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',202),
  ('term -> term MOD factor','term',3,'p_term','parser.py',203),
  ('term -> term POWER factor','term',3,'p_term','parser.py',204),
  ('term -> factor','term',1,'p_term','parser.py',205),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',213),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',214),
  ('factor -> condition','factor',1,'p_factor','parser.py',215),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',216),
  ('if_statement -> IF parenthesized_condition block','if_statement',3,'p_if_statement','parser.py',227),
  ('if_statement -> IF parenthesized_condition block else_if_extended','if_statement',4,'p_if_statement','parser.py',228),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',229),
  ('if_statement -> IF parenthesized_condition block if_part3','if_statement',4,'p_if_statement','parser.py',230),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',239),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',240),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',248),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',252),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',257),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',262),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',263),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',270),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',271),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',278),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',279),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',286),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',287),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',291),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',292),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',300),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',301),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',309),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',310),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',317),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',318),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',319),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',320),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',324),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',325),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',326),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',327),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',331),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',335),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',339),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',343),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',347),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',348),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',349),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',350),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',351),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',352),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',353),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',354),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',355),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',359),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',360),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',361),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',365),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',369),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',370),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',375),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',379),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',380),
  ('array_elements -> array_argument','array_elements',1,'p_array_elements','parser.py',387),
  ('array_elements -> array_elements COMMA array_argument','array_elements',3,'p_array_elements','parser.py',388),
  ('array_argument -> argument','array_argument',1,'p_array_argument','parser.py',397),
  ('array_argument -> clave KEY_VALUE argument','array_argument',3,'p_array_argument','parser.py',398),
  ('clave -> STRING','clave',1,'p_clave','parser.py',405),
  ('clave -> INTEGER','clave',1,'p_clave','parser.py',406),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',410),
  ('array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument','array_add_element',5,'p_array_add_element','parser.py',414),
  ('array_modify_element -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS argument','array_modify_element',6,'p_array_modify_element','parser.py',418),
  ('array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET INTEGER RIGHT_BRACKET RIGHT_PAREN','array_remove_element',7,'p_array_remove_element','parser.py',422),
  ('array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN','array_count_elements',4,'p_array_count_elements','parser.py',426),
  ('class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE','class_declaration',5,'p_class_declaration','parser.py',430),
  ('class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE','class_declaration',4,'p_class_declaration','parser.py',431),
  ('class_statements -> class_statement','class_statements',1,'p_class_statements','parser.py',438),
  ('class_statements -> class_statements class_statement','class_statements',2,'p_class_statements','parser.py',439),
  ('class_statement -> method_declaration','class_statement',1,'p_class_statement','parser.py',447),
  ('class_statement -> property_declaration','class_statement',1,'p_class_statement','parser.py',448),
  ('class_statement -> ONE_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',449),
  ('class_statement -> MULTI_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',450),
  ('method_declaration -> visibility_operator function_statement','method_declaration',2,'p_method_declaration','parser.py',454),
  ('property_declaration -> visibility_operator variable SEMICOLON','property_declaration',3,'p_property_declaration','parser.py',458),
  ('visibility_operator -> PUBLIC','visibility_operator',1,'p_visibility_operator','parser.py',462),
  ('visibility_operator -> PRIVATE','visibility_operator',1,'p_visibility_operator','parser.py',463),
  ('visibility_operator -> PROTECTED','visibility_operator',1,'p_visibility_operator','parser.py',464),
  ('object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN','object_creation',4,'p_object_creation','parser.py',468),
  ('object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN','object_creation',5,'p_object_creation','parser.py',469),
]
