
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NULL OBJECT ONE_LINE_COMMENT OPEN_TAG OR PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC RELATIONAL_OPERATOR REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE XOR YIELD YIELD_FROMstatement : print_statement\n                 | fscanf_statement\n                 | assignment_statement\n                 | if_statement\n                 | array_declaration_statement\n                 | errorprint_statement : ECHO LEFT_PAREN arguments RIGHT_PAREN SEMICOLON\n                       | ECHO arguments SEMICOLON\n                       | PRINT LEFT_PAREN argument RIGHT_PAREN SEMICOLON\n                       | PRINT argument SEMICOLONarguments : argument\n                 | arguments COMMA argumentargument : INTEGER\n                | STRING\n                | IDfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN SEMICOLONvariable_list : variable\n                     | variable_list COMMA variablevariable : IDexpression : INTEGER\n                  | STRINGexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | ID\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF LEFT_PAREN condition RIGHT_PAREN block\n                    | IF LEFT_PAREN condition RIGHT_PAREN block ELSE blockcondition : expression\n                 | condition LOGICAL_AND condition\n                 | condition LOGICAL_OR condition\n                 | condition RELATIONAL_OPERATOR condition\n                 block : LEFT_BRACE statements RIGHT_BRACEstatements : statement\n                  | statements statementassignment_statement : ID EQUALS expression SEMICOLONexpression_statement : expression SEMICOLONarray_declaration_statement : ID EQUALS array SEMICOLONarray : LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : array_element\n                      | array_elements COMMA array_elementarray_element : INTEGER\n                     | STRING\n                     | variable_accessvariable_access : ID'
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,25,28,45,48,62,63,73,74,81,82,86,87,88,92,],[7,-1,-2,-3,-4,-5,-6,-8,-10,-40,-42,-7,-9,-31,7,7,-38,-32,-37,-39,-16,]),'ECHO':([0,2,3,4,5,6,7,25,28,45,48,62,63,73,74,81,82,86,87,88,92,],[8,-1,-2,-3,-4,-5,-6,-8,-10,-40,-42,-7,-9,-31,8,8,-38,-32,-37,-39,-16,]),'PRINT':([0,2,3,4,5,6,7,25,28,45,48,62,63,73,74,81,82,86,87,88,92,],[9,-1,-2,-3,-4,-5,-6,-8,-10,-40,-42,-7,-9,-31,9,9,-38,-32,-37,-39,-16,]),'FSCANF':([0,2,3,4,5,6,7,25,28,45,48,62,63,73,74,81,82,86,87,88,92,],[10,-1,-2,-3,-4,-5,-6,-8,-10,-40,-42,-7,-9,-31,10,10,-38,-32,-37,-39,-16,]),'ID':([0,2,3,4,5,6,7,8,9,13,19,22,23,25,26,28,36,38,45,46,47,48,49,50,59,60,61,62,63,71,73,74,78,81,82,86,87,88,89,92,],[11,-1,-2,-3,-4,-5,-6,18,18,18,18,30,30,-8,18,-10,56,30,-40,30,30,-42,30,30,30,30,30,-7,-9,56,-31,11,85,11,-38,-32,-37,-39,85,-16,]),'IF':([0,2,3,4,5,6,7,25,28,45,48,62,63,73,74,81,82,86,87,88,92,],[12,-1,-2,-3,-4,-5,-6,-8,-10,-40,-42,-7,-9,-31,12,12,-38,-32,-37,-39,-16,]),'$end':([1,2,3,4,5,6,7,25,28,45,48,62,63,73,86,87,92,],[0,-1,-2,-3,-4,-5,-6,-8,-10,-40,-42,-7,-9,-31,-32,-37,-16,]),'RIGHT_BRACE':([2,3,4,5,6,7,25,28,45,48,62,63,73,81,82,86,87,88,92,],[-1,-2,-3,-4,-5,-6,-8,-10,-40,-42,-7,-9,-31,87,-38,-32,-37,-39,-16,]),'LEFT_PAREN':([8,9,10,12,22,23,38,46,47,49,50,59,60,61,],[13,19,21,23,38,38,38,38,38,38,38,38,38,38,]),'INTEGER':([8,9,13,19,22,23,26,36,38,46,47,49,50,59,60,61,71,],[16,16,16,16,33,33,16,53,33,66,66,66,66,33,33,33,53,]),'STRING':([8,9,13,19,22,23,26,36,38,44,59,60,61,71,],[17,17,17,17,34,34,17,54,34,64,34,34,34,54,]),'EQUALS':([11,],[22,]),'SEMICOLON':([14,15,16,17,18,20,30,31,32,33,34,35,37,41,42,43,65,66,67,68,69,70,72,90,],[25,-11,-13,-14,-15,28,-29,45,48,-20,-21,-24,-27,62,-12,63,-22,-28,-23,-25,-26,-43,-30,92,]),'COMMA':([14,15,16,17,18,24,29,42,51,52,53,54,55,56,64,79,83,84,85,91,],[26,-11,-13,-14,-15,26,44,-12,71,-44,-46,-47,-48,-49,78,-45,89,-17,-19,-18,]),'RIGHT_PAREN':([15,16,17,18,24,27,30,33,34,35,37,39,40,42,57,65,66,67,68,69,72,75,76,77,83,84,85,91,],[-11,-13,-14,-15,41,43,-29,-20,-21,-24,-27,58,-33,-12,72,-22,-28,-23,-25,-26,-30,-34,-35,-36,90,-17,-19,-18,]),'STDIN':([21,],[29,]),'LEFT_BRACKET':([22,],[36,]),'TIMES':([30,33,35,37,65,66,67,68,69,72,],[-29,-28,49,-27,49,-28,49,-25,-26,-30,]),'DIVIDE':([30,33,35,37,65,66,67,68,69,72,],[-29,-28,50,-27,50,-28,50,-25,-26,-30,]),'PLUS':([30,31,33,34,35,37,40,57,65,66,67,68,69,72,],[-29,46,-20,-21,-24,-27,46,46,-22,-28,-23,-25,-26,-30,]),'MINUS':([30,31,33,34,35,37,40,57,65,66,67,68,69,72,],[-29,47,-20,-21,-24,-27,47,47,-22,-28,-23,-25,-26,-30,]),'LOGICAL_AND':([30,33,34,35,37,39,40,65,66,67,68,69,72,75,76,77,],[-29,-20,-21,-24,-27,59,-33,-22,-28,-23,-25,-26,-30,59,59,59,]),'LOGICAL_OR':([30,33,34,35,37,39,40,65,66,67,68,69,72,75,76,77,],[-29,-20,-21,-24,-27,60,-33,-22,-28,-23,-25,-26,-30,60,60,60,]),'RELATIONAL_OPERATOR':([30,33,34,35,37,39,40,65,66,67,68,69,72,75,76,77,],[-29,-20,-21,-24,-27,61,-33,-22,-28,-23,-25,-26,-30,61,61,61,]),'RIGHT_BRACKET':([51,52,53,54,55,56,79,],[70,-44,-46,-47,-48,-49,-45,]),'LEFT_BRACE':([58,80,],[74,74,]),'ELSE':([73,87,],[80,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,74,81,],[1,82,88,]),'print_statement':([0,74,81,],[2,2,2,]),'fscanf_statement':([0,74,81,],[3,3,3,]),'assignment_statement':([0,74,81,],[4,4,4,]),'if_statement':([0,74,81,],[5,5,5,]),'array_declaration_statement':([0,74,81,],[6,6,6,]),'arguments':([8,13,],[14,24,]),'argument':([8,9,13,19,26,],[15,20,15,27,42,]),'expression':([22,23,38,59,60,61,],[31,40,57,40,40,40,]),'array':([22,],[32,]),'term':([22,23,38,46,47,59,60,61,],[35,35,35,65,67,35,35,35,]),'factor':([22,23,38,46,47,49,50,59,60,61,],[37,37,37,37,37,68,69,37,37,37,]),'condition':([23,59,60,61,],[39,75,76,77,]),'array_elements':([36,],[51,]),'array_element':([36,71,],[52,79,]),'variable_access':([36,71,],[55,55,]),'block':([58,80,],[73,86,]),'statements':([74,],[81,]),'variable_list':([78,],[83,]),'variable':([78,89,],[84,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',6),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',7),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',8),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',9),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',10),
  ('statement -> error','statement',1,'p_statement','parser.py',11),
  ('print_statement -> ECHO LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',19),
  ('print_statement -> ECHO arguments SEMICOLON','print_statement',3,'p_print_statement','parser.py',20),
  ('print_statement -> PRINT LEFT_PAREN argument RIGHT_PAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',21),
  ('print_statement -> PRINT argument SEMICOLON','print_statement',3,'p_print_statement','parser.py',22),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',32),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',33),
  ('argument -> INTEGER','argument',1,'p_argument','parser.py',41),
  ('argument -> STRING','argument',1,'p_argument','parser.py',42),
  ('argument -> ID','argument',1,'p_argument','parser.py',43),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN SEMICOLON','fscanf_statement',9,'p_fscanf_statement','parser.py',50),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',54),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',55),
  ('variable -> ID','variable',1,'p_variable','parser.py',63),
  ('expression -> INTEGER','expression',1,'p_expression','parser.py',72),
  ('expression -> STRING','expression',1,'p_expression','parser.py',73),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',78),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',79),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',80),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',87),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',88),
  ('term -> factor','term',1,'p_term','parser.py',89),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',96),
  ('factor -> ID','factor',1,'p_factor','parser.py',97),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',98),
  ('if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block','if_statement',5,'p_if_statement','parser.py',109),
  ('if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block','if_statement',7,'p_if_statement','parser.py',110),
  ('condition -> expression','condition',1,'p_condition','parser.py',117),
  ('condition -> condition LOGICAL_AND condition','condition',3,'p_condition','parser.py',118),
  ('condition -> condition LOGICAL_OR condition','condition',3,'p_condition','parser.py',119),
  ('condition -> condition RELATIONAL_OPERATOR condition','condition',3,'p_condition','parser.py',120),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',128),
  ('statements -> statement','statements',1,'p_statements','parser.py',132),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',133),
  ('assignment_statement -> ID EQUALS expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',141),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',145),
  ('array_declaration_statement -> ID EQUALS array SEMICOLON','array_declaration_statement',4,'p_array_declaration_statement','parser.py',159),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',163),
  ('array_elements -> array_element','array_elements',1,'p_array_elements','parser.py',167),
  ('array_elements -> array_elements COMMA array_element','array_elements',3,'p_array_elements','parser.py',168),
  ('array_element -> INTEGER','array_element',1,'p_array_element','parser.py',176),
  ('array_element -> STRING','array_element',1,'p_array_element','parser.py',177),
  ('array_element -> variable_access','array_element',1,'p_array_element','parser.py',178),
  ('variable_access -> ID','variable_access',1,'p_variable_access','parser.py',182),
]
