
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD_CHILD APPEND APPENDLEFT ARRAY ARROW AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DEQUEUE DICTIONARY DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENQUEUE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE ITERATOR KEY_VALUE LAMBDA LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POP POPLEFT POWER PRINT PRIVATE PROTECTED PUBLIC PUSH REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON SET STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROM object_declarationprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | statement_return\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENTstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_callfunction_statement : FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN blocklambda_function : LAMBDA arguments COLON expressionarrow_function : ARROW arguments ARROW expressionstatement_return : RETURN expression SEMICOLONfgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : IDassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | assignment_statement\n                | function_call\n                | fgets_statement\n                | array_indexing\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block else_if_extended if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition block\n                | if_part3 : ELSE block\n                |while_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEfunction_call : NAME LEFT_PAREN array_elements RIGHT_PARENarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : argument\n                      | array_elements COMMA argumentarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKETlist : LEFT_BRACKET elements RIGHT_BRACKETelements : argument\n                | elements COMMA argumentstack_operations : PUSH argument\n                        | POPqueue_operations : ENQUEUE argument\n                        | DEQUEUEdeque_operations : APPEND argument\n                        | APPENDLEFT argument\n                        | POP\n                        | POPLEFTset_declaration : SET LEFT_BRACE set_elements RIGHT_BRACEset_elements : argument\n                    | set_elements COMMA argumentdictionary_declaration : DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACEdictionary_elements : key_value_pair\n                           | dictionary_elements COMMA key_value_pairkey_value_pair : STRING COLON argumentiterator_declaration : ITERATOR LEFT_BRACKET elements RIGHT_BRACKETtree_operations : ADD_CHILD argument'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,35,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,11,-69,-72,-23,-66,-63,11,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[12,12,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,12,-69,-72,-23,-66,-63,12,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,36,37,42,47,87,88,90,91,115,142,143,145,146,150,151,152,153,174,175,178,179,188,189,190,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,18,-66,18,-69,-72,-23,-66,-63,18,-83,18,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,36,37,42,47,87,88,90,91,115,142,143,145,146,150,151,152,153,174,175,178,179,188,189,190,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,19,-66,19,-69,-72,-23,-66,-63,19,-83,19,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'IF':([2,3,4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[21,21,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,21,-69,-72,-23,-66,-63,21,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[22,22,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,22,-69,-72,-23,-66,-63,22,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[24,24,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,24,-69,-72,-23,-66,-63,24,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[25,25,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,25,-69,-72,-23,-66,-63,25,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,36,37,42,47,87,88,90,91,115,142,143,145,146,150,151,152,153,174,175,178,179,188,189,190,],[28,28,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,28,-66,28,-69,-72,-23,-66,-63,28,-83,28,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,27,32,33,36,37,42,47,63,64,73,77,80,81,82,83,84,85,87,88,90,91,115,116,127,128,131,137,142,143,145,146,150,151,152,153,162,164,170,174,175,178,179,188,189,190,],[29,29,-2,-5,-6,-7,-8,-9,-10,-11,29,-40,-41,-3,-4,-73,29,29,29,29,29,-32,-33,-34,-35,-36,-37,-66,29,-69,-72,-23,29,29,29,-32,29,-66,-63,29,-83,29,-77,-75,-76,29,-108,29,-62,-64,-82,-74,-67,-65,-20,]),'NAME':([2,3,4,6,7,8,9,10,11,12,25,27,32,33,36,37,42,47,63,64,73,77,80,81,82,83,84,85,87,88,90,91,115,116,127,128,131,137,142,143,145,146,150,151,152,153,162,164,170,174,175,178,179,188,189,190,],[26,26,-2,-5,-6,-7,-8,-9,-10,-11,62,26,-40,-41,-3,-4,-73,26,26,26,26,26,-32,-33,-34,-35,-36,-37,-66,26,-69,-72,-23,26,26,26,-32,26,-66,-63,26,-83,26,-77,-75,-76,26,-108,26,-62,-64,-82,-74,-67,-65,-20,]),'FOR':([2,3,4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[31,31,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,31,-69,-72,-23,-66,-63,31,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,36,37,42,47,87,88,90,91,115,142,143,145,146,150,151,152,153,174,175,178,179,188,189,190,],[32,32,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,32,-66,32,-69,-72,-23,-66,-63,32,-83,32,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,36,37,42,47,87,88,90,91,115,142,143,145,146,150,151,152,153,174,175,178,179,188,189,190,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,33,-66,33,-69,-72,-23,-66,-63,33,-83,33,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'ID':([2,3,4,6,7,8,9,10,11,12,23,24,27,32,33,36,37,39,42,47,52,53,61,63,64,73,77,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,128,131,137,139,142,143,145,146,150,151,152,153,162,164,170,172,173,174,175,178,179,188,189,190,191,195,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,34,34,34,-40,-41,-3,-4,34,-73,34,34,34,34,34,34,34,34,-32,-33,-34,-35,-36,-37,34,-66,34,-69,-72,34,-105,-106,-107,34,34,34,-96,-97,-98,-99,-100,-101,-102,-103,-104,34,34,-23,34,34,34,34,34,-32,34,-71,-66,-63,34,-83,34,-77,-75,-76,34,-108,34,-70,34,-62,-64,-82,-74,-67,-65,-20,34,34,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,36,37,42,87,90,91,115,142,143,146,151,152,153,174,175,178,179,188,189,190,],[35,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,-69,-72,-23,-66,-63,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,36,37,42,87,88,90,91,115,142,143,145,146,151,152,153,174,175,178,179,188,189,190,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-73,-66,146,-69,-72,-23,-66,-63,178,-83,-77,-75,-76,-62,-64,-82,-74,-67,-65,-20,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,23,34,41,43,44,45,46,48,49,50,51,55,56,57,58,59,60,65,66,67,68,69,70,71,72,74,78,79,86,97,99,129,134,135,138,139,140,147,148,149,154,155,156,157,158,159,161,163,165,166,169,172,183,186,187,192,196,],[37,-12,-13,-14,-15,-16,-17,-18,-19,47,-28,47,-84,-85,-86,-87,-88,-89,-90,-91,-54,-57,-58,-59,115,-60,-39,-42,-45,-46,-47,-48,-49,-50,-90,-30,-31,139,151,-92,-51,-29,-112,172,-71,-78,-94,-93,151,-61,-95,-52,-53,-55,-56,-111,-38,-43,-44,-24,-70,-117,-114,-79,-113,-25,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,34,43,44,45,46,47,48,49,50,51,55,56,57,58,60,65,66,67,68,69,70,71,72,74,78,79,89,96,98,99,100,118,119,121,122,123,124,125,126,129,133,134,135,147,148,154,155,156,157,158,159,160,161,163,165,166,169,180,182,183,185,186,192,193,194,196,197,],[-12,-13,-14,-15,-16,-17,-18,-19,-28,-84,-85,-86,-87,97,-88,-89,-90,-91,-54,-57,-58,-59,-60,-39,-42,-45,-46,-47,-48,-49,-50,-90,-30,-31,147,149,-80,-92,154,161,-115,163,164,154,-109,-110,-90,-51,169,-29,-112,-94,-93,-61,-95,-52,-53,-55,-56,181,-111,-38,-43,-44,-24,-81,-116,-117,192,-114,-113,196,-26,-25,-27,]),'COMMA':([13,14,15,16,17,18,19,20,34,43,44,45,46,48,49,50,51,55,56,57,58,60,65,66,67,68,69,70,71,72,74,78,79,89,96,98,99,118,119,121,123,126,129,132,134,135,138,140,147,148,154,155,156,157,158,159,160,161,163,165,166,169,171,180,182,183,184,185,186,187,192,193,194,196,197,],[-12,-13,-14,-15,-16,-17,-18,-19,-28,-84,-85,-86,-87,-88,-89,-90,-91,-54,-57,-58,-59,-60,128,-42,-45,-46,-47,-48,-49,-50,-90,-30,-31,-60,150,-80,-92,162,-115,128,-46,-90,-51,168,-29,-112,173,-78,-94,-93,-61,-95,-52,-53,-55,-56,128,-111,-38,-43,-44,-24,162,-81,-116,-117,191,162,-114,-79,-113,195,-26,-25,-27,]),'LEFT_PAREN':([21,22,23,24,26,27,28,29,31,32,33,39,52,53,61,62,63,64,73,77,80,81,82,83,84,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,120,127,128,131,136,137,139,144,162,164,170,172,],[39,39,53,61,63,64,75,76,86,-40,-41,53,53,53,53,116,117,120,117,117,-32,-33,-34,-35,-36,-37,53,-105,-106,-107,61,61,61,-96,-97,-98,-99,-100,-101,-102,-103,-104,61,61,117,53,53,117,117,-32,170,117,-71,39,117,-108,117,-70,]),'TRUE':([23,24,27,32,33,39,52,53,61,63,64,73,77,80,81,82,83,84,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,120,127,128,131,137,139,162,164,170,172,],[48,48,48,-40,-41,48,48,48,48,48,48,48,48,-32,-33,-34,-35,-36,-37,48,-105,-106,-107,48,48,48,-96,-97,-98,-99,-100,-101,-102,-103,-104,48,48,48,48,48,48,48,-32,48,-71,48,-108,48,-70,]),'FALSE':([23,24,27,32,33,39,52,53,61,63,64,73,77,80,81,82,83,84,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,120,127,128,131,137,139,162,164,170,172,],[49,49,49,-40,-41,49,49,49,49,49,49,49,49,-32,-33,-34,-35,-36,-37,49,-105,-106,-107,49,49,49,-96,-97,-98,-99,-100,-101,-102,-103,-104,49,49,49,49,49,49,49,-32,49,-71,49,-108,49,-70,]),'LOGICAL_NOT':([23,24,27,32,33,39,52,53,61,63,64,73,77,80,81,82,83,84,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,120,127,128,131,137,139,162,164,170,172,],[52,52,52,-40,-41,52,52,52,52,52,52,52,52,-32,-33,-34,-35,-36,-37,52,-105,-106,-107,52,52,52,-96,-97,-98,-99,-100,-101,-102,-103,-104,52,52,52,52,52,52,52,-32,52,-71,52,-108,52,-70,]),'INTEGER':([23,24,27,32,33,39,52,53,61,63,64,73,77,80,81,82,83,84,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,120,127,128,130,131,137,139,162,164,170,172,],[57,57,57,-40,-41,57,57,57,57,57,57,57,57,-32,-33,-34,-35,-36,-37,57,-105,-106,-107,57,57,57,-96,-97,-98,-99,-100,-101,-102,-103,-104,57,57,57,57,57,57,57,167,-32,57,-71,57,-108,57,-70,]),'FLOAT':([23,24,27,32,33,39,52,53,61,63,64,73,77,80,81,82,83,84,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,120,127,128,131,137,139,162,164,170,172,],[58,58,58,-40,-41,58,58,58,58,58,58,58,58,-32,-33,-34,-35,-36,-37,58,-105,-106,-107,58,58,58,-96,-97,-98,-99,-100,-101,-102,-103,-104,58,58,58,58,58,58,58,-32,58,-71,58,-108,58,-70,]),'STRING':([27,32,33,63,64,73,77,80,81,82,83,84,85,116,127,128,131,137,162,164,168,170,],[67,-40,-41,67,67,67,67,-32,-33,-34,-35,-36,-37,67,67,67,-32,67,67,-108,184,67,]),'PLUS_PLUS':([30,34,74,126,141,],[78,-28,78,78,78,]),'MINUS_MINUS':([30,34,74,126,141,],[79,-28,79,79,79,]),'EQUALS':([30,34,74,126,141,],[80,-28,131,131,131,]),'PLUS_EQUALS':([30,34,74,126,141,],[81,-28,81,81,81,]),'MINUS_EQUALS':([30,34,74,126,141,],[82,-28,82,82,82,]),'TIMES_EQUALS':([30,34,74,126,141,],[83,-28,83,83,83,]),'DIVIDE_EQUALS':([30,34,74,126,141,],[84,-28,84,84,84,]),'MOD_EQUALS':([30,34,74,126,141,],[85,-28,85,85,85,]),'LOGICAL_AND':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,60,74,89,99,126,147,148,154,155,156,157,158,159,],[-28,93,-84,-85,-86,-87,-88,-89,-90,-91,-54,-57,-58,-59,93,-90,93,93,-90,-94,93,-61,-95,-52,-53,-55,-56,]),'LOGICAL_OR':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,60,74,89,99,126,147,148,154,155,156,157,158,159,],[-28,94,-84,-85,-86,-87,-88,-89,-90,-91,-54,-57,-58,-59,94,-90,94,94,-90,-94,94,-61,-95,-52,-53,-55,-56,]),'LOGICAL_XOR':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,60,74,89,99,126,147,148,154,155,156,157,158,159,],[-28,95,-84,-85,-86,-87,-88,-89,-90,-91,-54,-57,-58,-59,95,-90,95,95,-90,-94,95,-61,-95,-52,-53,-55,-56,]),'TIMES':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,60,74,89,99,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,113,-57,-58,-59,-60,-90,-60,-60,-90,-94,-60,-61,-95,113,113,-55,-56,]),'DIVIDE':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,60,74,89,99,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,114,-57,-58,-59,-60,-90,-60,-60,-90,-94,-60,-61,-95,114,114,-55,-56,]),'PLUS':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,102,-54,-57,-58,-59,102,-60,102,-90,-60,-60,102,102,-90,-94,-60,-61,102,-52,-53,-55,-56,]),'MINUS':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,103,-54,-57,-58,-59,103,-60,103,-90,-60,-60,103,103,-90,-94,-60,-61,103,-52,-53,-55,-56,]),'EQUAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,104,-54,-57,-58,-59,104,-60,104,-90,-60,-60,104,104,-90,-94,-60,-61,104,-52,-53,-55,-56,]),'NOT_EQUAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,105,-54,-57,-58,-59,105,-60,105,-90,-60,-60,105,105,-90,-94,-60,-61,105,-52,-53,-55,-56,]),'LESS_THAN':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,106,-54,-57,-58,-59,106,-60,106,-90,-60,-60,106,106,-90,-94,-60,-61,106,-52,-53,-55,-56,]),'GREATER_THAN':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,107,-54,-57,-58,-59,107,-60,107,-90,-60,-60,107,107,-90,-94,-60,-61,107,-52,-53,-55,-56,]),'LESS_EQUAL':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,108,-54,-57,-58,-59,108,-60,108,-90,-60,-60,108,108,-90,-94,-60,-61,108,-52,-53,-55,-56,]),'GREATER_EQUAL':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,109,-54,-57,-58,-59,109,-60,109,-90,-60,-60,109,109,-90,-94,-60,-61,109,-52,-53,-55,-56,]),'IDENTICAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,110,-54,-57,-58,-59,110,-60,110,-90,-60,-60,110,110,-90,-94,-60,-61,110,-52,-53,-55,-56,]),'NOT_IDENTICAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,111,-54,-57,-58,-59,111,-60,111,-90,-60,-60,111,111,-90,-94,-60,-61,111,-52,-53,-55,-56,]),'DIFFERENT':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,68,74,89,99,100,123,126,147,148,154,155,156,157,158,159,],[-28,-60,-84,-85,-86,-87,-88,-89,-90,-91,112,-54,-57,-58,-59,112,-60,112,-90,-60,-60,112,112,-90,-94,-60,-61,112,-52,-53,-55,-56,]),'LEFT_BRACKET':([34,74,80,126,],[-28,130,137,130,]),'DOT':([34,43,44,45,46,48,49,50,51,55,56,57,58,60,65,66,67,68,69,70,71,72,74,78,79,89,99,121,123,126,129,134,147,148,154,155,156,157,158,159,160,161,165,166,169,183,],[-28,-84,-85,-86,-87,-88,-89,-90,-91,-54,-57,-58,-59,-60,127,-42,-45,-46,-47,-48,-49,-50,-90,-30,-31,-60,-92,127,-46,-90,-51,-29,-94,-93,-61,-95,-52,-53,-55,-56,127,-111,-43,-44,-24,-117,]),'RIGHT_BRACKET':([34,43,44,45,46,48,49,50,51,55,56,57,58,60,67,68,69,70,71,72,74,78,79,99,119,129,134,147,148,154,155,156,157,158,159,161,167,169,171,182,183,],[-28,-84,-85,-86,-87,-88,-89,-90,-91,-54,-57,-58,-59,-60,-45,-46,-47,-48,-49,-50,-90,-30,-31,-92,-115,-51,-29,-94,-93,-61,-95,-52,-53,-55,-56,-111,183,-24,186,-116,-117,]),'LEFT_BRACE':([38,40,97,147,149,176,177,181,],[88,88,88,-94,88,88,88,88,]),'INT_TYPE':([64,117,120,],[124,124,124,]),'FLOAT_TYPE':([64,117,120,],[125,125,125,]),'STDIN':([75,76,],[132,133,]),'ARRAY':([80,],[136,]),'ELSEIF':([87,142,143,146,175,178,189,],[144,144,-63,-83,-64,-82,-65,]),'ELSE':([87,142,143,146,175,178,189,],[-66,176,-63,-83,-64,-82,-65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,88,],[3,145,]),'statement2':([2,3,88,145,],[4,36,4,36,]),'statement':([2,3,47,88,145,150,],[5,5,98,5,5,180,]),'if_statement':([2,3,88,145,],[6,6,6,6,]),'while_statement':([2,3,88,145,],[7,7,7,7,]),'for_statement':([2,3,88,145,],[8,8,8,8,]),'statement_return':([2,3,88,145,],[9,9,9,9,]),'function_statement':([2,3,88,145,],[10,10,10,10,]),'print_statement':([2,3,47,88,145,150,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,47,88,145,150,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,27,47,63,64,73,77,88,116,127,128,137,145,150,162,170,],[15,15,71,15,71,71,71,71,15,71,71,71,71,15,15,71,71,]),'assignment_statement':([2,3,27,47,63,64,73,77,86,88,116,127,128,137,145,150,162,170,173,],[16,16,69,16,69,69,69,69,140,16,69,69,69,69,16,16,69,69,187,]),'array_declaration_statement':([2,3,47,88,145,150,],[17,17,17,17,17,17,]),'function_call':([2,3,27,47,63,64,73,77,88,116,127,128,137,145,150,162,170,],[20,20,70,20,70,70,70,70,20,70,70,70,70,20,20,70,70,]),'for_part1':([2,3,88,145,],[23,23,23,23,]),'print_function':([2,3,47,88,145,150,],[27,27,27,27,27,27,]),'variable':([2,3,23,24,27,39,47,52,53,61,63,64,73,77,86,88,92,101,102,103,113,114,116,117,120,127,128,137,145,150,162,170,173,191,195,],[30,30,50,50,74,50,30,50,50,50,74,126,74,74,141,30,50,50,50,50,50,50,74,50,50,74,74,74,30,30,74,74,141,194,197,]),'parenthesized_condition':([21,22,23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,144,162,170,],[38,40,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,177,46,46,]),'condition':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[41,60,60,89,99,89,89,60,89,60,60,148,60,60,60,60,60,60,89,89,60,60,60,60,60,]),'for_part3':([23,41,],[42,91,]),'simple_condition':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'negated_condition':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'complex_condition':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'relational_expression':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'expression':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[54,59,68,54,54,100,100,68,123,68,68,54,155,54,54,54,54,68,100,100,68,68,68,68,68,]),'term':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[55,55,55,55,55,55,55,55,55,55,55,55,55,156,157,55,55,55,55,55,55,55,55,55,55,]),'factor':([23,24,27,39,52,53,61,63,64,73,77,92,101,102,103,113,114,116,117,120,127,128,137,162,170,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,158,159,56,56,56,56,56,56,56,56,]),'arguments':([27,64,116,],[65,121,160,]),'argument':([27,63,64,73,77,116,127,128,137,162,170,],[66,119,66,129,134,66,165,166,119,182,119,]),'array_indexing':([27,63,64,73,77,116,127,128,137,162,170,],[72,72,72,72,72,72,72,72,72,72,72,]),'casting':([27,63,64,73,77,116,127,128,137,162,170,],[73,73,73,73,73,73,73,73,73,73,73,]),'assignment_operator':([30,74,126,141,],[77,77,77,77,]),'block':([38,40,97,149,176,177,181,],[87,90,153,153,188,189,190,]),'logical_operator':([41,60,89,99,148,],[92,92,92,92,92,]),'statement_list':([47,],[96,]),'relational_operator':([54,59,68,100,123,155,],[101,101,101,101,101,101,]),'array_elements':([63,137,170,],[118,171,185,]),'casting_type':([64,117,120,],[122,122,122,]),'array':([80,],[135,]),'assignment_list':([86,],[138,]),'else_if_extended':([87,],[142,]),'if_part2':([87,142,],[143,175,]),'for_part4':([97,149,],[152,179,]),'if_part3':([142,],[174,]),'variable_list':([191,],[193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',9),
  ('statements -> statement2','statements',1,'p_statements','parser.py',14),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',15),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',24),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',25),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',26),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',27),
  ('statement2 -> statement_return','statement2',1,'p_statement2','parser.py',28),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',29),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',30),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',31),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',42),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',43),
  ('statement -> function_call','statement',1,'p_statement','parser.py',44),
  ('function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',50),
  ('lambda_function -> LAMBDA arguments COLON expression','lambda_function',4,'p_lambda_function','parser.py',55),
  ('arrow_function -> ARROW arguments ARROW expression','arrow_function',4,'p_arrow_function','parser.py',61),
  ('statement_return -> RETURN expression SEMICOLON','statement_return',3,'p_statement_return','parser.py',66),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',73),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',78),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',82),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',83),
  ('variable -> ID','variable',1,'p_variable','parser.py',91),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',96),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',97),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',98),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',105),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',106),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',107),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',108),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',109),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',110),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',115),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',116),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',123),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',124),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',128),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',129),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',130),
  ('argument -> STRING','argument',1,'p_argument','parser.py',138),
  ('argument -> expression','argument',1,'p_argument','parser.py',139),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',140),
  ('argument -> function_call','argument',1,'p_argument','parser.py',141),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',142),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',143),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',144),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',152),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',153),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',154),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',161),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',162),
  ('term -> factor','term',1,'p_term','parser.py',163),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',170),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',171),
  ('factor -> condition','factor',1,'p_factor','parser.py',172),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',173),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',181),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',185),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',186),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',194),
  ('if_part2 -> <empty>','if_part2',0,'p_else_if_statement','parser.py',195),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',202),
  ('if_part3 -> <empty>','if_part3',0,'p_else_statement','parser.py',203),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',211),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',216),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',217),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',224),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',225),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',232),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',233),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',240),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',241),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',245),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',246),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',254),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',255),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',263),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',264),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',271),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',272),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',273),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',274),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',278),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',279),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',280),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',281),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',285),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',289),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',293),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',297),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',301),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',302),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',303),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',304),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',305),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',306),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',307),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',308),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',309),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',313),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',314),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',315),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',319),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',323),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',324),
  ('function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN','function_call',4,'p_function_call','parser.py',328),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',333),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',337),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',338),
  ('array_elements -> argument','array_elements',1,'p_array_elements','parser.py',345),
  ('array_elements -> array_elements COMMA argument','array_elements',3,'p_array_elements','parser.py',346),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',354),
  ('list -> LEFT_BRACKET elements RIGHT_BRACKET','list',3,'p_list','parser.py',367),
  ('elements -> argument','elements',1,'p_elements','parser.py',371),
  ('elements -> elements COMMA argument','elements',3,'p_elements','parser.py',372),
  ('stack_operations -> PUSH argument','stack_operations',2,'p_stack_operations','parser.py',395),
  ('stack_operations -> POP','stack_operations',1,'p_stack_operations','parser.py',396),
  ('queue_operations -> ENQUEUE argument','queue_operations',2,'p_queue_operations','parser.py',419),
  ('queue_operations -> DEQUEUE','queue_operations',1,'p_queue_operations','parser.py',420),
  ('deque_operations -> APPEND argument','deque_operations',2,'p_deque_operations','parser.py',447),
  ('deque_operations -> APPENDLEFT argument','deque_operations',2,'p_deque_operations','parser.py',448),
  ('deque_operations -> POP','deque_operations',1,'p_deque_operations','parser.py',449),
  ('deque_operations -> POPLEFT','deque_operations',1,'p_deque_operations','parser.py',450),
  ('set_declaration -> SET LEFT_BRACE set_elements RIGHT_BRACE','set_declaration',4,'p_set_declaration','parser.py',463),
  ('set_elements -> argument','set_elements',1,'p_set_elements','parser.py',467),
  ('set_elements -> set_elements COMMA argument','set_elements',3,'p_set_elements','parser.py',468),
  ('dictionary_declaration -> DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACE','dictionary_declaration',4,'p_dictionary_declaration','parser.py',478),
  ('dictionary_elements -> key_value_pair','dictionary_elements',1,'p_dictionary_elements','parser.py',482),
  ('dictionary_elements -> dictionary_elements COMMA key_value_pair','dictionary_elements',3,'p_dictionary_elements','parser.py',483),
  ('key_value_pair -> STRING COLON argument','key_value_pair',3,'p_key_value_pair','parser.py',491),
  ('iterator_declaration -> ITERATOR LEFT_BRACKET elements RIGHT_BRACKET','iterator_declaration',4,'p_iterator_declaration','parser.py',512),
  ('tree_operations -> ADD_CHILD argument','tree_operations',2,'p_tree_operations','parser.py',526),
]
