
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ARRAY ARROW AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE KEY_VALUE LAMBDA LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POP POWER PRINT PRIVATE PROTECTED PUBLIC PUSH REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROMprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENT\n                  | class_declarationstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | return_statementfunction_statement : FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION NAME LEFT_PAREN RIGHT_PAREN blocklambda_function : LAMBDA arguments COLON expressionarrow_function : ARROW arguments ARROW expressionreturn_statement : RETURN argumentsfgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : IDassignment_statement : variable CALL NAME assignment_operator argument\n                            | variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | assignment_statement\n                | variable CALL NAME\n                | variable CALL function_call\n                | array\n                | function_call\n                | fgets_statement\n                | array_indexing\n                | casting argument\n                | object_creationexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block\n                    | IF parenthesized_condition block else_if_extended\n                    | IF parenthesized_condition block else_if_extended if_part3\n                    | IF parenthesized_condition block if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition blockif_part3 : ELSE blockwhile_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEfunction_call : NAME LEFT_PAREN arguments RIGHT_PAREN\n                     | NAME LEFT_PAREN RIGHT_PARENarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : array_argument\n                      | array_elements COMMA array_argumentarray_argument : argument\n                      | clave KEY_VALUE argumentclave : STRING\n             | INTEGERarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKETclass_declaration : CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE\n                         | CLASS NAME LEFT_BRACE RIGHT_BRACEclass_statements : class_statement\n                        | class_statements class_statementclass_statement : method_declaration\n                       | property_declaration\n                       | ONE_LINE_COMMENT\n                       | MULTI_LINE_COMMENTmethod_declaration : visibility_operator function_statementproperty_declaration : visibility_operator variable SEMICOLONvisibility_operator : PUBLIC\n                           | PRIVATE\n                           | PROTECTEDobject_creation : NEW NAME LEFT_PAREN RIGHT_PAREN\n                       | NEW NAME LEFT_PAREN arguments RIGHT_PAREN'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,37,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,127,158,159,160,163,164,169,170,171,182,183,184,185,186,187,188,210,211,212,214,215,218,219,220,221,232,233,234,],[10,10,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,10,-77,-80,187,-70,-72,-73,10,-91,-85,-83,-84,187,-132,-133,-135,-136,-137,-138,-71,-74,-76,-90,-82,-22,-131,-134,-139,-75,-21,-140,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,127,158,159,160,163,164,169,170,171,182,183,184,185,186,187,188,210,211,212,214,215,218,219,220,221,232,233,234,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,11,-77,-80,188,-70,-72,-73,11,-91,-85,-83,-84,188,-132,-133,-135,-136,-137,-138,-71,-74,-76,-90,-82,-22,-131,-134,-139,-75,-21,-140,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,38,39,44,49,96,97,99,100,158,159,160,163,164,168,169,170,171,183,210,211,212,214,215,218,219,232,233,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,18,-69,18,-77,-80,-70,-72,-73,18,-91,18,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,38,39,44,49,96,97,99,100,158,159,160,163,164,168,169,170,171,183,210,211,212,214,215,218,219,232,233,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,19,-69,19,-77,-80,-70,-72,-73,19,-91,19,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'IF':([2,3,4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,158,159,160,163,164,169,170,171,183,210,211,212,214,215,218,219,232,233,],[22,22,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,22,-77,-80,-70,-72,-73,22,-91,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,158,159,160,163,164,169,170,171,183,210,211,212,214,215,218,219,232,233,],[23,23,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,23,-77,-80,-70,-72,-73,23,-91,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,158,159,160,163,164,169,170,171,183,189,190,191,192,210,211,212,214,215,218,219,232,233,],[25,25,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,25,-77,-80,-70,-72,-73,25,-91,-85,-83,-84,-132,25,-141,-142,-143,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'CLASS':([2,3,4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,158,159,160,163,164,169,170,171,183,210,211,212,214,215,218,219,232,233,],[27,27,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,27,-77,-80,-70,-72,-73,27,-91,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,38,39,44,49,96,97,99,100,158,159,160,163,164,168,169,170,171,183,210,211,212,214,215,218,219,232,233,],[29,29,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,29,-69,29,-77,-80,-70,-72,-73,29,-91,29,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,28,32,34,35,38,39,44,49,62,64,75,78,84,87,88,89,90,91,92,96,97,99,100,124,135,136,139,141,158,159,160,163,164,168,169,170,171,183,194,202,203,204,207,210,211,212,214,215,218,219,232,233,],[30,30,-2,-5,-6,-7,-8,-9,-10,-11,30,30,-43,-44,-3,-4,-81,30,30,30,30,30,30,-35,-36,-37,-38,-39,-40,-69,30,-77,-80,30,30,30,-35,30,-70,-72,-73,30,-91,30,-85,-83,-84,-132,-116,30,30,30,30,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'NAME':([2,3,4,6,7,8,9,10,11,12,25,27,28,32,34,35,38,39,44,49,62,64,75,78,79,83,84,87,88,89,90,91,92,96,97,99,100,124,135,136,137,139,141,158,159,160,163,164,168,169,170,171,183,194,202,203,204,207,210,211,212,214,215,218,219,232,233,],[26,26,-2,-5,-6,-7,-8,-9,-10,-11,61,63,26,26,-43,-44,-3,-4,-81,26,26,26,26,26,148,151,26,-35,-36,-37,-38,-39,-40,-69,26,-77,-80,26,26,26,197,-35,26,-70,-72,-73,26,-91,26,-85,-83,-84,-132,-116,26,26,26,26,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,38,39,44,49,96,97,99,100,158,159,160,163,164,168,169,170,171,183,210,211,212,214,215,218,219,232,233,],[32,32,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,32,-69,32,-77,-80,-70,-72,-73,32,-91,32,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'FOR':([2,3,4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,158,159,160,163,164,169,170,171,183,210,211,212,214,215,218,219,232,233,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,33,-77,-80,-70,-72,-73,33,-91,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,38,39,44,49,96,97,99,100,158,159,160,163,164,168,169,170,171,183,210,211,212,214,215,218,219,232,233,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,34,-69,34,-77,-80,-70,-72,-73,34,-91,34,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,38,39,44,49,96,97,99,100,158,159,160,163,164,168,169,170,171,183,210,211,212,214,215,218,219,232,233,],[35,35,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,35,-69,35,-77,-80,-70,-72,-73,35,-91,35,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'ID':([2,3,4,6,7,8,9,10,11,12,24,28,32,34,35,38,39,41,44,49,54,55,62,64,75,78,84,87,88,89,90,91,92,94,95,96,97,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,135,136,139,141,155,158,159,160,163,164,168,169,170,171,174,183,189,190,191,192,194,202,203,204,207,208,209,210,211,212,214,215,218,219,232,233,236,239,],[36,36,-2,-5,-6,-7,-8,-9,-10,-11,36,36,36,-43,-44,-3,-4,36,-81,36,36,36,36,36,36,36,36,-35,-36,-37,-38,-39,-40,36,36,-69,36,-77,-80,36,-113,-114,-115,36,36,36,-104,-105,-106,-107,-108,-109,-110,-111,-112,36,36,36,36,36,36,-35,36,-79,-70,-72,-73,36,-91,36,-85,-83,-84,36,-132,36,-141,-142,-143,-116,36,36,36,36,-78,36,-71,-74,-76,-90,-82,-22,-131,-75,-21,36,36,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,38,39,44,96,99,100,158,159,160,164,169,170,171,183,210,211,212,214,215,218,219,232,233,],[37,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,-77,-80,-70,-72,-73,-91,-85,-83,-84,-132,-71,-74,-76,-90,-82,-22,-131,-75,-21,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,38,39,44,96,97,99,100,127,158,159,160,163,164,169,170,171,182,183,184,185,186,187,188,210,211,212,214,215,218,219,220,221,232,233,234,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-81,-69,164,-77,-80,183,-70,-72,-73,214,-91,-85,-83,-84,219,-132,-133,-135,-136,-137,-138,-71,-74,-76,-90,-82,-22,-131,-134,-139,-75,-21,-140,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,21,24,36,43,45,46,47,48,50,51,52,53,57,58,59,60,65,66,67,68,69,70,71,72,73,74,76,80,85,86,93,95,106,108,126,140,152,153,154,155,156,165,166,167,172,173,175,176,177,178,181,193,195,196,197,198,201,206,208,222,223,224,227,230,231,235,240,],[39,-12,-13,-14,-15,-16,-17,-18,-19,-20,49,-30,49,-92,-93,-94,-95,-96,-97,-98,-99,-61,-64,-65,-66,-42,-45,-48,-49,-50,-98,-54,-53,-55,-56,-58,-67,-33,-34,-25,155,169,-100,-120,-57,-32,-121,208,-79,-86,-102,-101,169,-68,-103,-59,-60,-62,-63,-119,-41,-46,-47,-51,-52,-123,-26,-78,234,-130,-122,-144,-31,-87,-145,-27,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,21,36,45,46,47,48,49,50,51,52,53,57,58,59,60,62,65,66,67,68,69,70,71,72,73,74,76,80,85,86,93,98,105,107,108,109,124,125,126,129,130,131,132,133,134,140,143,144,146,147,150,152,153,165,166,172,173,175,176,177,178,179,181,193,195,196,197,198,200,201,204,206,216,223,224,225,226,227,228,230,235,237,238,240,241,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-30,-92,-93,-94,-95,106,-96,-97,-98,-99,-61,-64,-65,-66,126,-42,-45,-48,-49,-50,-98,-54,-53,-55,-56,-58,-67,-33,-34,-25,165,167,-88,-100,172,180,181,-120,193,194,172,-117,-118,-98,-57,-124,-126,-48,-65,206,-32,-121,-102,-101,-68,-103,-59,-60,-62,-63,217,-119,-41,-46,-47,-51,-52,224,-123,227,-26,-89,-130,-122,-125,-127,-144,235,-31,-145,240,-28,-27,-29,]),'COMMA':([13,14,15,16,17,18,19,20,21,36,45,46,47,48,50,51,52,53,57,58,59,60,65,66,67,68,69,70,71,72,73,74,76,80,85,86,93,98,105,107,108,125,126,129,131,134,140,142,143,144,146,147,149,152,153,154,156,165,166,172,173,175,176,177,178,179,181,193,195,196,197,198,200,201,206,216,223,224,225,226,227,228,229,230,231,235,237,238,240,241,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-30,-92,-93,-94,-95,-96,-97,-98,-99,-61,-64,-65,-66,136,-45,-48,-49,-50,-98,-54,-53,-55,-56,-58,-67,-33,-34,136,-67,168,-88,-100,136,-120,136,-49,-98,-57,202,-124,-126,-48,-65,205,-32,-121,209,-86,-102,-101,-68,-103,-59,-60,-62,-63,202,-119,-41,-46,-47,-51,-52,202,-123,-26,-89,-130,-122,-125,-127,-144,136,236,-31,-87,-145,239,-28,-27,-29,]),'LEFT_PAREN':([22,23,24,26,28,29,30,32,33,34,35,41,54,55,61,62,64,75,77,78,84,87,88,89,90,91,92,94,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,135,136,139,141,148,155,162,174,194,197,202,203,204,207,208,],[41,41,55,62,64,81,82,94,95,-43,-44,55,55,55,124,94,128,94,141,94,94,-35,-36,-37,-38,-39,-40,55,55,-113,-114,-115,174,174,174,-104,-105,-106,-107,-108,-109,-110,-111,-112,174,174,94,55,94,94,-35,94,204,-79,41,55,-116,62,94,94,94,94,-78,]),'TRUE':([24,28,32,34,35,41,54,55,62,64,75,78,84,87,88,89,90,91,92,94,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,135,136,139,141,155,174,194,202,203,204,207,208,],[50,50,50,-43,-44,50,50,50,50,50,50,50,50,-35,-36,-37,-38,-39,-40,50,50,-113,-114,-115,50,50,50,-104,-105,-106,-107,-108,-109,-110,-111,-112,50,50,50,50,50,50,-35,50,-79,50,-116,50,50,50,50,-78,]),'FALSE':([24,28,32,34,35,41,54,55,62,64,75,78,84,87,88,89,90,91,92,94,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,135,136,139,141,155,174,194,202,203,204,207,208,],[51,51,51,-43,-44,51,51,51,51,51,51,51,51,-35,-36,-37,-38,-39,-40,51,51,-113,-114,-115,51,51,51,-104,-105,-106,-107,-108,-109,-110,-111,-112,51,51,51,51,51,51,-35,51,-79,51,-116,51,51,51,51,-78,]),'LOGICAL_NOT':([24,28,32,34,35,41,54,55,62,64,75,78,84,87,88,89,90,91,92,94,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,135,136,139,141,155,174,194,202,203,204,207,208,],[54,54,54,-43,-44,54,54,54,54,54,54,54,54,-35,-36,-37,-38,-39,-40,54,54,-113,-114,-115,54,54,54,-104,-105,-106,-107,-108,-109,-110,-111,-112,54,54,54,54,54,54,-35,54,-79,54,-116,54,54,54,54,-78,]),'INTEGER':([24,28,32,34,35,41,54,55,62,64,75,78,84,87,88,89,90,91,92,94,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,135,136,138,139,141,155,174,194,202,203,204,207,208,],[59,59,59,-43,-44,59,59,59,59,59,59,147,59,-35,-36,-37,-38,-39,-40,59,59,-113,-114,-115,59,59,59,-104,-105,-106,-107,-108,-109,-110,-111,-112,59,59,147,59,59,59,199,-35,147,-79,59,-116,147,59,59,59,-78,]),'FLOAT':([24,28,32,34,35,41,54,55,62,64,75,78,84,87,88,89,90,91,92,94,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,135,136,139,141,155,174,194,202,203,204,207,208,],[60,60,60,-43,-44,60,60,60,60,60,60,60,60,-35,-36,-37,-38,-39,-40,60,60,-113,-114,-115,60,60,60,-104,-105,-106,-107,-108,-109,-110,-111,-112,60,60,60,60,60,60,-35,60,-79,60,-116,60,60,60,60,-78,]),'STRING':([28,32,34,35,62,64,75,78,84,87,88,89,90,91,92,124,135,136,139,141,194,202,203,204,205,207,],[67,67,-43,-44,67,67,67,146,67,-35,-36,-37,-38,-39,-40,146,67,67,-35,146,-116,146,67,67,229,67,]),'ARRAY':([28,32,34,35,62,64,75,78,84,87,88,89,90,91,92,124,135,136,139,141,194,202,203,204,207,],[77,77,-43,-44,77,77,77,77,77,77,-36,-37,-38,-39,-40,77,77,77,-35,77,-116,77,77,77,77,]),'LEFT_BRACKET':([28,32,34,35,36,62,64,70,75,78,84,87,88,89,90,91,92,124,134,135,136,139,141,194,202,203,204,207,],[78,78,-43,-44,-30,78,78,138,78,78,78,78,-36,-37,-38,-39,-40,78,138,78,78,-35,78,-116,78,78,78,78,]),'NEW':([28,32,34,35,62,64,75,78,84,87,88,89,90,91,92,124,135,136,139,141,194,202,203,204,207,],[79,79,-43,-44,79,79,79,79,79,-35,-36,-37,-38,-39,-40,79,79,79,-35,79,-116,79,79,79,79,]),'CALL':([31,36,70,134,157,],[83,-30,137,137,83,]),'PLUS_PLUS':([31,36,70,134,157,],[85,-30,85,85,85,]),'MINUS_MINUS':([31,36,70,134,157,],[86,-30,86,86,86,]),'EQUALS':([31,36,70,134,151,157,197,],[87,-30,139,139,139,139,139,]),'PLUS_EQUALS':([31,36,70,134,151,157,197,],[88,-30,88,88,88,88,88,]),'MINUS_EQUALS':([31,36,70,134,151,157,197,],[89,-30,89,89,89,89,89,]),'TIMES_EQUALS':([31,36,70,134,151,157,197,],[90,-30,90,90,90,90,90,]),'DIVIDE_EQUALS':([31,36,70,134,151,157,197,],[91,-30,91,91,91,91,91,]),'MOD_EQUALS':([31,36,70,134,151,157,197,],[92,-30,92,92,92,92,92,]),'LOGICAL_AND':([36,43,45,46,47,48,50,51,52,53,57,58,59,60,70,80,98,108,134,165,166,172,173,175,176,177,178,],[-30,102,-92,-93,-94,-95,-96,-97,-98,-99,-61,-64,-65,-66,-98,102,102,102,-98,-102,102,-68,-103,-59,-60,-62,-63,]),'LOGICAL_OR':([36,43,45,46,47,48,50,51,52,53,57,58,59,60,70,80,98,108,134,165,166,172,173,175,176,177,178,],[-30,103,-92,-93,-94,-95,-96,-97,-98,-99,-61,-64,-65,-66,-98,103,103,103,-98,-102,103,-68,-103,-59,-60,-62,-63,]),'LOGICAL_XOR':([36,43,45,46,47,48,50,51,52,53,57,58,59,60,70,80,98,108,134,165,166,172,173,175,176,177,178,],[-30,104,-92,-93,-94,-95,-96,-97,-98,-99,-61,-64,-65,-66,-98,104,104,104,-98,-102,104,-68,-103,-59,-60,-62,-63,]),'TIMES':([36,43,45,46,47,48,50,51,52,53,57,58,59,60,70,80,98,108,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,122,-64,-65,-66,-98,-67,-67,-67,-98,-65,-102,-67,-68,-103,122,122,-62,-63,]),'DIVIDE':([36,43,45,46,47,48,50,51,52,53,57,58,59,60,70,80,98,108,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,123,-64,-65,-66,-98,-67,-67,-67,-98,-65,-102,-67,-68,-103,123,123,-62,-63,]),'PLUS':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,111,-61,-64,-65,-66,111,-98,-67,-67,-67,111,111,-98,-65,-102,-67,-68,111,-59,-60,-62,-63,]),'MINUS':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,112,-61,-64,-65,-66,112,-98,-67,-67,-67,112,112,-98,-65,-102,-67,-68,112,-59,-60,-62,-63,]),'EQUAL_TO':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,113,-61,-64,-65,-66,113,-98,-67,-67,-67,113,113,-98,-65,-102,-67,-68,113,-59,-60,-62,-63,]),'NOT_EQUAL_TO':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,114,-61,-64,-65,-66,114,-98,-67,-67,-67,114,114,-98,-65,-102,-67,-68,114,-59,-60,-62,-63,]),'LESS_THAN':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,115,-61,-64,-65,-66,115,-98,-67,-67,-67,115,115,-98,-65,-102,-67,-68,115,-59,-60,-62,-63,]),'GREATER_THAN':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,116,-61,-64,-65,-66,116,-98,-67,-67,-67,116,116,-98,-65,-102,-67,-68,116,-59,-60,-62,-63,]),'LESS_EQUAL':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,117,-61,-64,-65,-66,117,-98,-67,-67,-67,117,117,-98,-65,-102,-67,-68,117,-59,-60,-62,-63,]),'GREATER_EQUAL':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,118,-61,-64,-65,-66,118,-98,-67,-67,-67,118,118,-98,-65,-102,-67,-68,118,-59,-60,-62,-63,]),'IDENTICAL_TO':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,119,-61,-64,-65,-66,119,-98,-67,-67,-67,119,119,-98,-65,-102,-67,-68,119,-59,-60,-62,-63,]),'NOT_IDENTICAL_TO':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,120,-61,-64,-65,-66,120,-98,-67,-67,-67,120,120,-98,-65,-102,-67,-68,120,-59,-60,-62,-63,]),'DIFFERENT':([36,43,45,46,47,48,50,51,52,53,56,57,58,59,60,68,70,80,98,108,109,131,134,147,165,166,172,173,175,176,177,178,],[-30,-67,-92,-93,-94,-95,-96,-97,-98,-99,121,-61,-64,-65,-66,121,-98,-67,-67,-67,121,121,-98,-65,-102,-67,-68,121,-59,-60,-62,-63,]),'DOT':([36,45,46,47,48,50,51,52,53,57,58,59,60,65,66,67,68,69,70,71,72,73,74,76,80,85,86,93,98,108,125,126,129,131,134,140,152,165,166,172,173,175,176,177,178,181,195,196,197,198,201,206,223,224,227,228,230,235,],[-30,-92,-93,-94,-95,-96,-97,-98,-99,-61,-64,-65,-66,135,-45,-48,-49,-50,-98,-54,-53,-55,-56,-58,-67,-33,-34,135,-67,-100,135,-120,135,-49,-98,-57,-32,-102,-101,-68,-103,-59,-60,-62,-63,-119,-46,-47,-51,-52,-123,-26,-130,-122,-144,135,-31,-145,]),'RIGHT_BRACKET':([36,45,46,47,48,50,51,52,53,57,58,59,60,67,68,69,70,71,72,73,74,76,80,85,86,108,126,140,142,143,144,146,147,152,165,166,172,173,175,176,177,178,181,197,198,199,201,206,223,224,225,226,227,230,235,],[-30,-92,-93,-94,-95,-96,-97,-98,-99,-61,-64,-65,-66,-48,-49,-50,-98,-54,-53,-55,-56,-58,-67,-33,-34,-100,-120,-57,201,-124,-126,-48,-65,-32,-102,-101,-68,-103,-59,-60,-62,-63,-119,-51,-52,223,-123,-26,-130,-122,-125,-127,-144,-31,-145,]),'LEFT_BRACE':([40,42,63,106,161,165,167,180,213,217,],[97,97,127,97,97,-102,97,97,97,97,]),'INT_TYPE':([64,94,128,],[132,132,132,]),'FLOAT_TYPE':([64,94,128,],[133,133,133,]),'STDIN':([81,82,],[149,150,]),'ELSE':([96,158,160,164,211,214,232,],[161,161,-73,-91,-74,-90,-75,]),'ELSEIF':([96,158,160,164,211,214,232,],[162,162,-73,-91,-74,-90,-75,]),'PUBLIC':([127,164,182,184,185,186,187,188,214,218,220,221,233,234,],[190,-91,190,-133,-135,-136,-137,-138,-90,-22,-134,-139,-21,-140,]),'PRIVATE':([127,164,182,184,185,186,187,188,214,218,220,221,233,234,],[191,-91,191,-133,-135,-136,-137,-138,-90,-22,-134,-139,-21,-140,]),'PROTECTED':([127,164,182,184,185,186,187,188,214,218,220,221,233,234,],[192,-91,192,-133,-135,-136,-137,-138,-90,-22,-134,-139,-21,-140,]),'KEY_VALUE':([145,146,147,],[203,-128,-129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,97,],[3,163,]),'statement2':([2,3,97,163,],[4,38,4,38,]),'statement':([2,3,49,97,163,168,],[5,5,107,5,5,216,]),'if_statement':([2,3,97,163,],[6,6,6,6,]),'while_statement':([2,3,97,163,],[7,7,7,7,]),'for_statement':([2,3,97,163,],[8,8,8,8,]),'function_statement':([2,3,97,163,189,],[9,9,9,9,221,]),'class_declaration':([2,3,97,163,],[12,12,12,12,]),'print_statement':([2,3,49,97,163,168,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,49,97,163,168,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,28,32,49,62,64,75,78,84,97,124,135,136,141,163,168,202,203,204,207,],[15,15,73,73,15,73,73,73,73,73,15,73,73,73,73,15,15,73,73,73,73,]),'assignment_statement':([2,3,28,32,49,62,64,75,78,84,95,97,124,135,136,141,163,168,202,203,204,207,209,],[16,16,69,69,16,69,69,69,69,69,156,16,69,69,69,69,16,16,69,69,69,69,231,]),'array_declaration_statement':([2,3,49,97,163,168,],[17,17,17,17,17,17,]),'function_call':([2,3,28,32,49,62,64,75,78,84,97,124,135,136,137,141,163,168,202,203,204,207,],[20,20,71,71,20,71,71,71,71,71,20,71,71,71,198,71,20,20,71,71,71,71,]),'return_statement':([2,3,49,97,163,168,],[21,21,21,21,21,21,]),'for_part1':([2,3,97,163,],[24,24,24,24,]),'print_function':([2,3,49,97,163,168,],[28,28,28,28,28,28,]),'variable':([2,3,24,28,32,41,49,54,55,62,64,75,78,84,94,95,97,101,110,111,112,122,123,124,128,135,136,141,163,168,174,189,202,203,204,207,209,236,239,],[31,31,52,70,70,52,31,52,52,70,134,70,70,70,52,157,31,52,52,52,52,52,52,70,52,70,70,70,31,31,52,222,70,70,70,70,157,238,241,]),'parenthesized_condition':([22,23,24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,162,174,202,203,204,207,],[40,42,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,213,48,48,48,48,48,]),'condition':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[43,80,80,98,108,98,80,98,80,80,80,98,166,80,80,80,80,80,80,98,80,80,80,98,80,80,80,80,]),'for_part3':([24,43,],[44,100,]),'simple_condition':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'negated_condition':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'complex_condition':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'relational_expression':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'expression':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[56,68,68,56,56,109,68,131,68,68,68,109,56,173,56,56,56,56,68,109,68,68,68,109,68,68,68,68,]),'term':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,175,176,57,57,57,57,57,57,57,57,57,57,57,57,]),'factor':([24,28,32,41,54,55,62,64,75,78,84,94,101,110,111,112,122,123,124,128,135,136,141,174,202,203,204,207,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,177,178,58,58,58,58,58,58,58,58,58,58,]),'arguments':([28,32,62,64,204,],[65,93,125,129,228,]),'argument':([28,32,62,64,75,78,84,124,135,136,141,202,203,204,207,],[66,66,66,66,140,144,152,144,195,196,144,144,226,66,230,]),'array':([28,32,62,64,75,78,84,87,124,135,136,141,202,203,204,207,],[72,72,72,72,72,72,72,153,72,72,72,72,72,72,72,72,]),'array_indexing':([28,32,62,64,75,78,84,124,135,136,141,202,203,204,207,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'casting':([28,32,62,64,75,78,84,124,135,136,141,202,203,204,207,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'object_creation':([28,32,62,64,75,78,84,124,135,136,141,202,203,204,207,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'assignment_operator':([31,70,134,151,157,197,],[84,84,84,207,84,207,]),'block':([40,42,106,161,167,180,213,217,],[96,99,171,212,171,218,232,233,]),'logical_operator':([43,80,98,108,166,],[101,101,101,101,101,]),'statement_list':([49,],[105,]),'relational_operator':([56,68,109,131,173,],[110,110,110,110,110,]),'casting_type':([64,94,128,],[130,130,130,]),'array_elements':([78,124,141,],[142,179,200,]),'array_argument':([78,124,141,202,],[143,143,143,225,]),'clave':([78,124,141,202,],[145,145,145,145,]),'assignment_list':([95,],[154,]),'else_if_extended':([96,],[158,]),'if_part3':([96,158,],[159,210,]),'if_part2':([96,158,],[160,211,]),'for_part4':([106,167,],[170,215,]),'class_statements':([127,],[182,]),'class_statement':([127,182,],[184,220,]),'method_declaration':([127,182,],[185,185,]),'property_declaration':([127,182,],[186,186,]),'visibility_operator':([127,182,],[189,189,]),'variable_list':([236,],[237,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',8),
  ('statements -> statement2','statements',1,'p_statements','parser.py',12),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',13),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',21),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',22),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',23),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',24),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',25),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',26),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',27),
  ('statement2 -> class_declaration','statement2',1,'p_statement2','parser.py',28),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',38),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',39),
  ('statement -> function_call','statement',1,'p_statement','parser.py',40),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',41),
  ('function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',46),
  ('function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block','function_statement',5,'p_function_statement','parser.py',47),
  ('lambda_function -> LAMBDA arguments COLON expression','lambda_function',4,'p_lambda_function','parser.py',55),
  ('arrow_function -> ARROW arguments ARROW expression','arrow_function',4,'p_arrow_function','parser.py',60),
  ('return_statement -> RETURN arguments','return_statement',2,'p_return_statement','parser.py',64),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',71),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',76),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',80),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',81),
  ('variable -> ID','variable',1,'p_variable','parser.py',89),
  ('assignment_statement -> variable CALL NAME assignment_operator argument','assignment_statement',5,'p_assignment_statement','parser.py',94),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',95),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',96),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',97),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',106),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',107),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',108),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',109),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',110),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',111),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',116),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',117),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',124),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',125),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',129),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',130),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',131),
  ('argument -> STRING','argument',1,'p_argument','parser.py',139),
  ('argument -> expression','argument',1,'p_argument','parser.py',140),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',141),
  ('argument -> variable CALL NAME','argument',3,'p_argument','parser.py',142),
  ('argument -> variable CALL function_call','argument',3,'p_argument','parser.py',143),
  ('argument -> array','argument',1,'p_argument','parser.py',144),
  ('argument -> function_call','argument',1,'p_argument','parser.py',145),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',146),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',147),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',148),
  ('argument -> object_creation','argument',1,'p_argument','parser.py',149),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',157),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',158),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',159),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',166),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',167),
  ('term -> factor','term',1,'p_term','parser.py',168),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',175),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',176),
  ('factor -> condition','factor',1,'p_factor','parser.py',177),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',178),
  ('if_statement -> IF parenthesized_condition block','if_statement',3,'p_if_statement','parser.py',186),
  ('if_statement -> IF parenthesized_condition block else_if_extended','if_statement',4,'p_if_statement','parser.py',187),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',188),
  ('if_statement -> IF parenthesized_condition block if_part3','if_statement',4,'p_if_statement','parser.py',189),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',198),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',199),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',207),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',211),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',216),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',221),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',222),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',229),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',230),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',237),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',238),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',245),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',246),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',250),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',251),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',259),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',260),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',268),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',269),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',276),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',277),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',278),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',279),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',283),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',284),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',285),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',286),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',290),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',294),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',298),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',302),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',306),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',307),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',308),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',309),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',310),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',311),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',312),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',313),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',314),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',318),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',319),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',320),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',324),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',328),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',329),
  ('function_call -> NAME LEFT_PAREN arguments RIGHT_PAREN','function_call',4,'p_function_call','parser.py',333),
  ('function_call -> NAME LEFT_PAREN RIGHT_PAREN','function_call',3,'p_function_call','parser.py',334),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',342),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',346),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',347),
  ('array_elements -> array_argument','array_elements',1,'p_array_elements','parser.py',354),
  ('array_elements -> array_elements COMMA array_argument','array_elements',3,'p_array_elements','parser.py',355),
  ('array_argument -> argument','array_argument',1,'p_array_argument','parser.py',364),
  ('array_argument -> clave KEY_VALUE argument','array_argument',3,'p_array_argument','parser.py',365),
  ('clave -> STRING','clave',1,'p_clave','parser.py',372),
  ('clave -> INTEGER','clave',1,'p_clave','parser.py',373),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',377),
  ('class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE','class_declaration',5,'p_class_declaration','parser.py',381),
  ('class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE','class_declaration',4,'p_class_declaration','parser.py',382),
  ('class_statements -> class_statement','class_statements',1,'p_class_statements','parser.py',389),
  ('class_statements -> class_statements class_statement','class_statements',2,'p_class_statements','parser.py',390),
  ('class_statement -> method_declaration','class_statement',1,'p_class_statement','parser.py',398),
  ('class_statement -> property_declaration','class_statement',1,'p_class_statement','parser.py',399),
  ('class_statement -> ONE_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',400),
  ('class_statement -> MULTI_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',401),
  ('method_declaration -> visibility_operator function_statement','method_declaration',2,'p_method_declaration','parser.py',405),
  ('property_declaration -> visibility_operator variable SEMICOLON','property_declaration',3,'p_property_declaration','parser.py',409),
  ('visibility_operator -> PUBLIC','visibility_operator',1,'p_visibility_operator','parser.py',413),
  ('visibility_operator -> PRIVATE','visibility_operator',1,'p_visibility_operator','parser.py',414),
  ('visibility_operator -> PROTECTED','visibility_operator',1,'p_visibility_operator','parser.py',415),
  ('object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN','object_creation',4,'p_object_creation','parser.py',419),
  ('object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN','object_creation',5,'p_object_creation','parser.py',420),
]
