
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

<<<<<<< HEAD
_lr_signature = 'ABSTRACT ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROMprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENTstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_callfgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : IDassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argumentargument : STRING                \n                | expression\n                | assignment_statement\n                | function_call\n                | fgets_statement\n                | array_indexing\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block else_if_extended if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition block\n                | if_part3 : ELSE block\n                |while_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEfunction_call : NAME LEFT_PAREN array_elements RIGHT_PARENarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : argument\n                      | array_elements COMMA argumentarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKET'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,31,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,32,33,38,80,81,83,84,132,133,135,136,141,142,143,163,164,167,168,176,177,],[9,9,-2,-5,-6,-7,-8,-9,-3,-4,-66,-59,9,-62,-65,-59,-56,9,-76,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,32,33,38,80,81,83,84,132,133,135,136,141,142,143,163,164,167,168,176,177,],[10,10,-2,-5,-6,-7,-8,-9,-3,-4,-66,-59,10,-62,-65,-59,-56,10,-76,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'BREAK':([2,3,4,6,7,8,9,10,32,33,38,43,80,81,83,84,132,133,135,136,140,141,142,143,163,164,167,168,176,177,],[16,16,-2,-5,-6,-7,-8,-9,-3,-4,-66,16,-59,16,-62,-65,-59,-56,16,-76,16,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'CONTINUE':([2,3,4,6,7,8,9,10,32,33,38,43,80,81,83,84,132,133,135,136,140,141,142,143,163,164,167,168,176,177,],[17,17,-2,-5,-6,-7,-8,-9,-3,-4,-66,17,-59,17,-62,-65,-59,-56,17,-76,17,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'IF':([2,3,4,6,7,8,9,10,32,33,38,80,81,83,84,132,133,135,136,141,142,143,163,164,167,168,176,177,],[19,19,-2,-5,-6,-7,-8,-9,-3,-4,-66,-59,19,-62,-65,-59,-56,19,-76,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'WHILE':([2,3,4,6,7,8,9,10,32,33,38,80,81,83,84,132,133,135,136,141,142,143,163,164,167,168,176,177,],[20,20,-2,-5,-6,-7,-8,-9,-3,-4,-66,-59,20,-62,-65,-59,-56,20,-76,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'FSCANF':([2,3,4,6,7,8,9,10,32,33,38,43,80,81,83,84,132,133,135,136,140,141,142,143,163,164,167,168,176,177,],[23,23,-2,-5,-6,-7,-8,-9,-3,-4,-66,23,-59,23,-62,-65,-59,-56,23,-76,23,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'FGETS':([2,3,4,6,7,8,9,10,22,28,29,32,33,38,43,55,64,69,72,73,74,75,76,77,78,80,81,83,84,115,119,125,132,133,135,136,140,141,142,143,152,157,160,163,164,167,168,176,177,],[24,24,-2,-5,-6,-7,-8,-9,24,-34,-35,-3,-4,-66,24,24,24,24,-26,-27,-28,-29,-30,-31,24,-59,24,-62,-65,24,-26,24,-59,-56,24,-76,24,-70,-68,-69,-101,24,24,-55,-57,-75,-67,-60,-58,]),'NAME':([2,3,4,6,7,8,9,10,22,28,29,32,33,38,43,55,64,69,72,73,74,75,76,77,78,80,81,83,84,115,119,125,132,133,135,136,140,141,142,143,152,157,160,163,164,167,168,176,177,],[26,26,-2,-5,-6,-7,-8,-9,26,-34,-35,-3,-4,-66,26,26,26,26,-26,-27,-28,-29,-30,-31,26,-59,26,-62,-65,26,-26,26,-59,-56,26,-76,26,-70,-68,-69,-101,26,26,-55,-57,-75,-67,-60,-58,]),'FOR':([2,3,4,6,7,8,9,10,32,33,38,80,81,83,84,132,133,135,136,141,142,143,163,164,167,168,176,177,],[27,27,-2,-5,-6,-7,-8,-9,-3,-4,-66,-59,27,-62,-65,-59,-56,27,-76,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'PRINT':([2,3,4,6,7,8,9,10,32,33,38,43,80,81,83,84,132,133,135,136,140,141,142,143,163,164,167,168,176,177,],[28,28,-2,-5,-6,-7,-8,-9,-3,-4,-66,28,-59,28,-62,-65,-59,-56,28,-76,28,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'ECHO':([2,3,4,6,7,8,9,10,32,33,38,43,80,81,83,84,132,133,135,136,140,141,142,143,163,164,167,168,176,177,],[29,29,-2,-5,-6,-7,-8,-9,-3,-4,-66,29,-59,29,-62,-65,-59,-56,29,-76,29,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'ID':([2,3,4,6,7,8,9,10,21,22,28,29,32,33,35,38,43,48,49,55,64,69,72,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,125,129,132,133,135,136,140,141,142,143,146,152,157,160,161,162,163,164,167,168,176,177,178,182,],[30,30,-2,-5,-6,-7,-8,-9,30,30,-34,-35,-3,-4,30,-66,30,30,30,30,30,30,-26,-27,-28,-29,-30,-31,30,30,-59,30,-62,-65,30,-98,-99,-100,30,30,30,-89,-90,-91,-92,-93,-94,-95,-96,-97,30,30,30,30,30,-26,30,-64,-59,-56,30,-76,30,-70,-68,-69,30,-101,30,30,-63,30,-55,-57,-75,-67,-60,-58,30,30,]),'CLOSE_TAG':([3,4,6,7,8,9,10,32,33,38,80,83,84,132,133,136,141,142,143,163,164,167,168,176,177,],[31,-2,-5,-6,-7,-8,-9,-3,-4,-66,-59,-62,-65,-59,-56,-76,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'RIGHT_BRACE':([4,6,7,8,9,10,32,33,38,80,81,83,84,132,133,135,136,141,142,143,163,164,167,168,176,177,],[-2,-5,-6,-7,-8,-9,-3,-4,-66,-59,136,-62,-65,-59,-56,167,-76,-70,-68,-69,-55,-57,-75,-67,-60,-58,]),'SEMICOLON':([5,11,12,13,14,15,16,17,18,21,30,37,39,40,41,42,44,45,46,47,51,52,53,54,56,57,58,59,60,61,62,63,65,66,70,71,79,90,92,116,122,123,128,129,130,137,138,139,144,145,147,148,149,150,151,153,156,159,161,170,173,175,179,183,],[33,-10,-11,-12,-13,-14,-15,-16,-17,43,-22,43,-77,-78,-79,-80,-81,-82,-83,-84,-47,-50,-51,-52,-33,-36,-38,-39,-40,-41,-42,-43,-83,-53,-24,-25,129,141,-85,-44,-23,-105,161,-64,-71,-87,-86,141,-54,-88,-45,-46,-48,-49,-32,-37,-18,-104,-63,-110,-107,-72,-106,-19,]),'RIGHT_PAREN':([11,12,13,14,15,16,17,18,30,39,40,41,42,43,44,45,46,47,51,52,53,54,56,57,58,59,60,61,62,63,65,66,70,71,82,89,91,92,93,109,110,111,112,113,114,116,121,122,123,126,127,137,138,144,145,147,148,149,150,151,153,156,159,169,170,172,173,174,179,180,181,183,184,],[-10,-11,-12,-13,-14,-15,-16,-17,-22,-77,-78,-79,-80,90,-81,-82,-83,-84,-47,-50,-51,-52,-33,-36,-38,-39,-40,-41,-42,-43,-83,-53,-24,-25,137,139,-73,-85,144,151,152,144,-102,-103,-83,-44,156,-23,-105,159,-108,-87,-86,-54,-88,-45,-46,-48,-49,-32,-37,-18,-104,-74,-110,179,-107,-109,-106,183,-20,-19,-21,]),'COMMA':([11,12,13,14,15,16,17,18,30,39,40,41,42,44,45,46,47,51,52,53,54,56,57,58,59,60,61,62,63,65,66,70,71,89,91,92,116,120,122,123,126,127,128,130,137,138,144,145,147,148,149,150,151,153,156,158,159,169,170,171,172,173,174,175,179,180,181,183,184,],[-10,-11,-12,-13,-14,-15,-16,-17,-22,-77,-78,-79,-80,-81,-82,-83,-84,-47,-50,-51,-52,-33,-36,-38,-39,-40,-41,-42,-43,-83,-53,-24,-25,140,-73,-85,-44,155,-23,-105,160,-108,162,-71,-87,-86,-54,-88,-45,-46,-48,-49,-32,-37,-18,160,-104,-74,-110,178,160,-107,-109,-72,-106,182,-20,-19,-21,]),'LEFT_PAREN':([19,20,21,22,23,24,26,27,28,29,35,48,49,55,64,69,72,73,74,75,76,77,78,85,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,124,125,129,134,146,152,157,160,161,],[35,35,49,55,67,68,78,79,-34,-35,49,49,49,108,117,117,-26,-27,-28,-29,-30,-31,117,49,-98,-99,-100,146,146,146,-89,-90,-91,-92,-93,-94,-95,-96,-97,146,146,49,117,49,-26,157,117,-64,35,49,-101,117,117,-63,]),'TRUE':([21,22,28,29,35,48,49,55,64,69,72,73,74,75,76,77,78,85,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,125,129,146,152,157,160,161,],[44,44,-34,-35,44,44,44,44,44,44,-26,-27,-28,-29,-30,-31,44,44,-98,-99,-100,44,44,44,-89,-90,-91,-92,-93,-94,-95,-96,-97,44,44,44,44,44,-26,44,-64,44,-101,44,44,-63,]),'FALSE':([21,22,28,29,35,48,49,55,64,69,72,73,74,75,76,77,78,85,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,125,129,146,152,157,160,161,],[45,45,-34,-35,45,45,45,45,45,45,-26,-27,-28,-29,-30,-31,45,45,-98,-99,-100,45,45,45,-89,-90,-91,-92,-93,-94,-95,-96,-97,45,45,45,45,45,-26,45,-64,45,-101,45,45,-63,]),'LOGICAL_NOT':([21,22,28,29,35,48,49,55,64,69,72,73,74,75,76,77,78,85,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,125,129,146,152,157,160,161,],[48,48,-34,-35,48,48,48,48,48,48,-26,-27,-28,-29,-30,-31,48,48,-98,-99,-100,48,48,48,-89,-90,-91,-92,-93,-94,-95,-96,-97,48,48,48,48,48,-26,48,-64,48,-101,48,48,-63,]),'INTEGER':([21,22,28,29,35,48,49,55,64,69,72,73,74,75,76,77,78,85,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,117,118,119,125,129,146,152,157,160,161,],[53,53,-34,-35,53,53,53,53,53,53,-26,-27,-28,-29,-30,-31,53,53,-98,-99,-100,53,53,53,-89,-90,-91,-92,-93,-94,-95,-96,-97,53,53,53,53,53,154,-26,53,-64,53,-101,53,53,-63,]),'FLOAT':([21,22,28,29,35,48,49,55,64,69,72,73,74,75,76,77,78,85,86,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,117,119,125,129,146,152,157,160,161,],[54,54,-34,-35,54,54,54,54,54,54,-26,-27,-28,-29,-30,-31,54,54,-98,-99,-100,54,54,54,-89,-90,-91,-92,-93,-94,-95,-96,-97,54,54,54,54,54,-26,54,-64,54,-101,54,54,-63,]),'STRING':([22,28,29,55,64,69,72,73,74,75,76,77,78,115,119,125,152,155,157,160,],[58,-34,-35,58,58,58,-26,-27,-28,-29,-30,-31,58,58,-26,58,-101,171,58,58,]),'PLUS_PLUS':([25,30,65,114,131,],[70,-22,70,70,70,]),'MINUS_MINUS':([25,30,65,114,131,],[71,-22,71,71,71,]),'EQUALS':([25,30,65,114,131,],[72,-22,119,119,119,]),'PLUS_EQUALS':([25,30,65,114,131,],[73,-22,73,73,73,]),'MINUS_EQUALS':([25,30,65,114,131,],[74,-22,74,74,74,]),'TIMES_EQUALS':([25,30,65,114,131,],[75,-22,75,75,75,]),'DIVIDE_EQUALS':([25,30,65,114,131,],[76,-22,76,76,76,]),'MOD_EQUALS':([25,30,65,114,131,],[77,-22,77,77,77,]),'LOGICAL_AND':([30,37,39,40,41,42,44,45,46,47,51,52,53,54,65,66,82,92,114,137,138,144,145,147,148,149,150,],[-22,86,-77,-78,-79,-80,-81,-82,-83,-84,-47,-50,-51,-52,-83,86,86,86,-83,-87,86,-54,-88,-45,-46,-48,-49,]),'LOGICAL_OR':([30,37,39,40,41,42,44,45,46,47,51,52,53,54,65,66,82,92,114,137,138,144,145,147,148,149,150,],[-22,87,-77,-78,-79,-80,-81,-82,-83,-84,-47,-50,-51,-52,-83,87,87,87,-83,-87,87,-54,-88,-45,-46,-48,-49,]),'LOGICAL_XOR':([30,37,39,40,41,42,44,45,46,47,51,52,53,54,65,66,82,92,114,137,138,144,145,147,148,149,150,],[-22,88,-77,-78,-79,-80,-81,-82,-83,-84,-47,-50,-51,-52,-83,88,88,88,-83,-87,88,-54,-88,-45,-46,-48,-49,]),'TIMES':([30,37,39,40,41,42,44,45,46,47,51,52,53,54,65,66,82,92,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,106,-50,-51,-52,-83,-53,-53,-53,-83,-87,-53,-54,-88,106,106,-48,-49,]),'DIVIDE':([30,37,39,40,41,42,44,45,46,47,51,52,53,54,65,66,82,92,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,107,-50,-51,-52,-83,-53,-53,-53,-83,-87,-53,-54,-88,107,107,-48,-49,]),'PLUS':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,95,-47,-50,-51,-52,95,-83,-53,-53,-53,95,95,-83,-87,-53,-54,95,-45,-46,-48,-49,]),'MINUS':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,96,-47,-50,-51,-52,96,-83,-53,-53,-53,96,96,-83,-87,-53,-54,96,-45,-46,-48,-49,]),'EQUAL_TO':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,97,-47,-50,-51,-52,97,-83,-53,-53,-53,97,97,-83,-87,-53,-54,97,-45,-46,-48,-49,]),'NOT_EQUAL_TO':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,98,-47,-50,-51,-52,98,-83,-53,-53,-53,98,98,-83,-87,-53,-54,98,-45,-46,-48,-49,]),'LESS_THAN':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,99,-47,-50,-51,-52,99,-83,-53,-53,-53,99,99,-83,-87,-53,-54,99,-45,-46,-48,-49,]),'GREATER_THAN':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,100,-47,-50,-51,-52,100,-83,-53,-53,-53,100,100,-83,-87,-53,-54,100,-45,-46,-48,-49,]),'LESS_EQUAL':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,101,-47,-50,-51,-52,101,-83,-53,-53,-53,101,101,-83,-87,-53,-54,101,-45,-46,-48,-49,]),'GREATER_EQUAL':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,102,-47,-50,-51,-52,102,-83,-53,-53,-53,102,102,-83,-87,-53,-54,102,-45,-46,-48,-49,]),'IDENTICAL_TO':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,103,-47,-50,-51,-52,103,-83,-53,-53,-53,103,103,-83,-87,-53,-54,103,-45,-46,-48,-49,]),'NOT_IDENTICAL_TO':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,104,-47,-50,-51,-52,104,-83,-53,-53,-53,104,104,-83,-87,-53,-54,104,-45,-46,-48,-49,]),'DIFFERENT':([30,37,39,40,41,42,44,45,46,47,50,51,52,53,54,59,65,66,82,92,93,111,114,137,138,144,145,147,148,149,150,],[-22,-53,-77,-78,-79,-80,-81,-82,-83,-84,105,-47,-50,-51,-52,105,-83,-53,-53,-53,105,105,-83,-87,-53,-54,105,-45,-46,-48,-49,]),'LEFT_BRACKET':([30,65,72,114,],[-22,118,125,118,]),'DOT':([30,39,40,41,42,44,45,46,47,51,52,53,54,56,57,58,59,60,61,62,63,65,66,70,71,82,92,109,111,114,116,122,137,138,144,145,147,148,149,150,153,156,159,170,],[-22,-77,-78,-79,-80,-81,-82,-83,-84,-47,-50,-51,-52,115,-36,-38,-39,-40,-41,-42,-43,-83,-53,-24,-25,-53,-85,115,-39,-83,-44,-23,-87,-86,-54,-88,-45,-46,-48,-49,-37,-18,-104,-110,]),'RIGHT_BRACKET':([30,39,40,41,42,44,45,46,47,51,52,53,54,58,59,60,61,62,63,65,66,70,71,92,116,122,127,137,138,144,145,147,148,149,150,154,156,158,159,170,174,],[-22,-77,-78,-79,-80,-81,-82,-83,-84,-47,-50,-51,-52,-38,-39,-40,-41,-42,-43,-83,-53,-24,-25,-85,-44,-23,-108,-87,-86,-54,-88,-45,-46,-48,-49,170,-18,173,-104,-110,-109,]),'LEFT_BRACE':([34,36,90,137,139,165,166,],[81,81,81,-87,81,81,81,]),'INT_TYPE':([55,108,117,],[112,112,112,]),'FLOAT_TYPE':([55,108,117,],[113,113,113,]),'STDIN':([67,68,],[120,121,]),'ARRAY':([72,],[124,]),'ELSEIF':([80,132,133,136,164,167,177,],[134,134,-56,-76,-57,-75,-58,]),'ELSE':([80,132,133,136,164,167,177,],[-59,165,-56,-76,-57,-75,-58,]),}
=======
_lr_signature = 'ABSTRACT ADD_CHILD AND APPEND APPENDLEFT ARRAY ARROW AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DEQUEUE DICTIONARY DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENQUEUE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE ISSET ITERABLE ITERATOR KEY_VALUE LAMBDA LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG OR PLUS PLUS_EQUALS PLUS_PLUS POP POPLEFT POWER PRINT PRIVATE PROTECTED PUBLIC PUSH REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON SET STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE XOR YIELD YIELD_FROM object_declarationprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | statement_return\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENTstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUEfunction_statement : FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN blocklambda_function : LAMBDA arguments COLON expressionarrow_function : ARROW arguments ARROW expressionstatement_return : RETURN expression SEMICOLONfgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : IDassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSassignment_statement : variable assignment_operator argument\n                             | variable PLUS_PLUS\n                             | variable MINUS_MINUSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : INTEGER\n                | FLOAT\n                | STRING\n                | variable                \n                | expression\n                | condition\n                | assignment_statementexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | variable\n              | STRING\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF LEFT_PAREN condition RIGHT_PAREN block\n                    | IF LEFT_PAREN condition RIGHT_PAREN block ELSE blockwhile_statement : WHILE LEFT_PAREN condition RIGHT_PAREN blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : TRUE\n                 | FALSE\n                 | expression relational_operator expression\n                 | condition logical_operator condition\n                 | LOGICAL_NOT condition\n                 | LEFT_PAREN condition RIGHT_PARENrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : argument\n                      | array_elements COMMA argumentlist : LEFT_BRACKET elements RIGHT_BRACKETelements : argument\n                | elements COMMA argumentstack_operations : PUSH argument\n                        | POPqueue_operations : ENQUEUE argument\n                        | DEQUEUEdeque_operations : APPEND argument\n                        | APPENDLEFT argument\n                        | POP\n                        | POPLEFTset_declaration : SET LEFT_BRACE set_elements RIGHT_BRACEset_elements : argument\n                    | set_elements COMMA argumentdictionary_declaration : DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACEdictionary_elements : key_value_pair\n                           | dictionary_elements COMMA key_value_pairkey_value_pair : STRING COLON argumentiterator_declaration : ITERATOR LEFT_BRACKET elements RIGHT_BRACKETtree_operations : ADD_CHILD argument'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,11,-62,-64,-69,11,-78,-77,-19,-63,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[12,12,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,12,-62,-64,-69,12,-78,-77,-19,-63,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,34,35,39,45,79,104,132,133,134,135,136,150,151,152,154,155,163,164,168,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,18,-67,-22,18,-72,-70,-71,18,-62,-64,-69,18,-78,-77,-19,-63,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,34,35,39,45,79,104,132,133,134,135,136,150,151,152,154,155,163,164,168,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,19,-67,-22,19,-72,-70,-71,19,-62,-64,-69,19,-78,-77,-19,-63,]),'IF':([2,3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[20,20,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,20,-62,-64,-69,20,-78,-77,-19,-63,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[21,21,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,21,-62,-64,-69,21,-78,-77,-19,-63,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[23,23,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,23,-62,-64,-69,23,-78,-77,-19,-63,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[24,24,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,24,-62,-64,-69,24,-78,-77,-19,-63,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,34,35,39,45,79,104,132,133,134,135,136,150,151,152,154,155,163,164,168,],[26,26,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,26,-67,-22,26,-72,-70,-71,26,-62,-64,-69,26,-78,-77,-19,-63,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,34,35,39,45,79,104,132,133,134,135,136,150,151,152,154,155,163,164,168,],[27,27,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,27,-67,-22,27,-72,-70,-71,27,-62,-64,-69,27,-78,-77,-19,-63,]),'FOR':([2,3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[29,29,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,29,-62,-64,-69,29,-78,-77,-19,-63,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,34,35,39,45,79,104,132,133,134,135,136,150,151,152,154,155,163,164,168,],[30,30,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,30,-67,-22,30,-72,-70,-71,30,-62,-64,-69,30,-78,-77,-19,-63,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,34,35,39,45,79,104,132,133,134,135,136,150,151,152,154,155,163,164,168,],[31,31,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,31,-67,-22,31,-72,-70,-71,31,-62,-64,-69,31,-78,-77,-19,-63,]),'ID':([2,3,4,6,7,8,9,10,11,12,22,23,25,30,31,34,35,36,37,39,43,44,45,53,55,67,70,71,72,73,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,103,104,106,110,111,112,118,120,132,133,134,135,136,145,148,149,150,151,152,154,155,160,163,164,165,168,171,],[32,32,-2,-5,-6,-7,-8,-9,-10,-11,32,32,32,-39,-40,-3,-4,32,32,-68,32,32,32,32,32,32,-28,-29,-30,-31,-32,-33,32,-67,32,-94,-95,-96,32,32,32,-85,-86,-87,-88,-89,-90,-91,-92,-93,32,32,-22,32,32,32,-28,32,-66,32,-72,-70,-71,32,32,-65,32,-62,-64,-69,32,-78,32,-77,-19,32,-63,32,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,150,151,152,155,163,164,168,],[33,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,-62,-64,-69,-78,-77,-19,-63,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,34,35,39,79,104,133,134,135,136,150,151,152,154,155,163,164,168,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-68,-67,-22,-72,-70,-71,155,-62,-64,-69,163,-78,-77,-19,-63,]),'SEMICOLON':([5,13,14,15,16,17,18,19,22,32,38,40,41,46,47,48,49,50,51,52,56,57,58,59,60,61,62,63,64,68,69,76,96,100,115,116,119,120,121,125,126,127,128,129,130,131,137,138,140,141,142,144,148,159,161,166,172,],[35,-12,-13,-14,-15,-16,-17,-18,45,-27,45,-79,-80,-53,-56,-57,-58,-59,-60,104,-38,-41,-44,-45,-46,-47,-48,-49,-50,-35,-36,120,-83,133,-34,-97,148,-66,-73,-82,-81,-51,-52,-84,-61,133,-54,-55,-37,-42,-43,-23,-65,-99,-74,-98,-24,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,32,40,41,45,46,47,48,49,50,51,56,57,58,59,60,61,62,63,64,68,69,77,78,96,97,98,99,101,105,107,108,109,114,115,116,125,126,127,128,129,130,137,138,139,140,141,142,144,147,153,158,159,166,167,169,170,172,173,],[-12,-13,-14,-15,-16,-17,-18,-27,-79,-80,100,-53,-56,-57,-58,-59,-60,-38,-41,-44,-45,-46,-47,-48,-49,-50,-35,-36,123,124,-83,129,130,131,-75,130,140,129,130,144,-34,-97,-82,-81,-51,-52,-84,-61,-54,-55,156,-37,-42,-43,-23,-100,-76,166,-99,-98,-101,172,-25,-24,-26,]),'COMMA':([13,14,15,16,17,18,19,32,40,41,46,47,48,49,50,51,56,57,58,59,60,61,62,63,64,68,69,96,99,101,107,108,109,113,115,116,119,121,125,126,127,128,129,130,137,138,139,140,141,142,144,146,147,153,157,158,159,161,166,167,169,170,172,173,],[-12,-13,-14,-15,-16,-17,-18,-27,-79,-80,-53,-56,-57,-58,-59,-60,111,-41,-44,-45,-46,-47,-48,-49,-50,-35,-36,-83,132,-75,111,-49,-48,143,-34,-97,149,-73,-82,-81,-51,-52,-84,-61,-54,-55,111,-37,-42,-43,-23,160,-100,-76,165,160,-99,-74,-98,-101,171,-25,-24,-26,]),'LEFT_PAREN':([20,21,22,23,25,26,27,29,30,31,36,37,43,44,53,54,55,67,70,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,103,106,110,111,112,117,118,120,145,148,160,],[36,37,44,53,55,65,66,76,-39,-40,44,44,44,44,53,106,44,44,-28,-29,-30,-31,-32,-33,44,-94,-95,-96,53,53,53,-85,-86,-87,-88,-89,-90,-91,-92,-93,53,53,44,44,44,-28,145,44,-66,44,-65,44,]),'TRUE':([22,25,30,31,36,37,43,44,55,67,70,71,72,73,74,75,80,81,82,83,106,110,111,112,118,120,145,148,160,],[40,40,-39,-40,40,40,40,40,40,40,-28,-29,-30,-31,-32,-33,40,-94,-95,-96,40,40,40,-28,40,-66,40,-65,40,]),'FALSE':([22,25,30,31,36,37,43,44,55,67,70,71,72,73,74,75,80,81,82,83,106,110,111,112,118,120,145,148,160,],[41,41,-39,-40,41,41,41,41,41,41,-28,-29,-30,-31,-32,-33,41,-94,-95,-96,41,41,41,-28,41,-66,41,-65,41,]),'LOGICAL_NOT':([22,25,30,31,36,37,43,44,55,67,70,71,72,73,74,75,80,81,82,83,106,110,111,112,118,120,145,148,160,],[43,43,-39,-40,43,43,43,43,43,43,-28,-29,-30,-31,-32,-33,43,-94,-95,-96,43,43,43,-28,43,-66,43,-65,43,]),'INTEGER':([22,23,25,30,31,36,37,43,44,53,55,67,70,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,103,106,110,111,112,118,120,145,148,160,],[48,48,58,-39,-40,48,48,48,48,48,58,58,-28,-29,-30,-31,-32,-33,48,-94,-95,-96,48,48,48,-85,-86,-87,-88,-89,-90,-91,-92,-93,48,48,58,58,58,-28,58,-66,58,-65,58,]),'FLOAT':([22,23,25,30,31,36,37,43,44,53,55,67,70,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,103,106,110,111,112,118,120,145,148,160,],[49,49,59,-39,-40,49,49,49,49,49,59,59,-28,-29,-30,-31,-32,-33,49,-94,-95,-96,49,49,49,-85,-86,-87,-88,-89,-90,-91,-92,-93,49,49,59,59,59,-28,59,-66,59,-65,59,]),'STRING':([22,23,25,30,31,36,37,43,44,53,55,67,70,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,103,106,110,111,112,118,120,143,145,148,160,],[51,51,60,-39,-40,51,51,51,51,51,60,60,-28,-29,-30,-31,-32,-33,51,-94,-95,-96,51,51,51,-85,-86,-87,-88,-89,-90,-91,-92,-93,51,51,60,60,60,-28,60,-66,157,60,-65,60,]),'NAME':([24,],[54,]),'PLUS_PLUS':([28,32,61,122,],[68,-27,68,68,]),'MINUS_MINUS':([28,32,61,122,],[69,-27,69,69,]),'EQUALS':([28,32,61,122,],[70,-27,112,112,]),'PLUS_EQUALS':([28,32,61,122,],[71,-27,71,71,]),'MINUS_EQUALS':([28,32,61,122,],[72,-27,72,72,]),'TIMES_EQUALS':([28,32,61,122,],[73,-27,73,73,]),'DIVIDE_EQUALS':([28,32,61,122,],[74,-27,74,74,]),'MOD_EQUALS':([28,32,61,122,],[75,-27,75,75,]),'TIMES':([32,46,47,48,49,50,51,58,59,60,61,127,128,130,137,138,],[-27,102,-56,-57,-58,-59,-60,-57,-58,-60,-59,102,102,-61,-54,-55,]),'DIVIDE':([32,46,47,48,49,50,51,58,59,60,61,127,128,130,137,138,],[-27,103,-56,-57,-58,-59,-60,-57,-58,-60,-59,103,103,-61,-54,-55,]),'PLUS':([32,42,46,47,48,49,50,51,52,58,59,60,61,62,98,105,109,126,127,128,130,137,138,],[-27,85,-53,-56,-57,-58,-59,-60,85,-57,-58,-60,-59,85,85,85,85,85,-51,-52,-61,-54,-55,]),'MINUS':([32,42,46,47,48,49,50,51,52,58,59,60,61,62,98,105,109,126,127,128,130,137,138,],[-27,86,-53,-56,-57,-58,-59,-60,86,-57,-58,-60,-59,86,86,86,86,86,-51,-52,-61,-54,-55,]),'EQUAL_TO':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,87,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,87,87,87,-51,-52,-61,-54,-55,]),'NOT_EQUAL_TO':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,88,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,88,88,88,-51,-52,-61,-54,-55,]),'LESS_THAN':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,89,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,89,89,89,-51,-52,-61,-54,-55,]),'GREATER_THAN':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,90,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,90,90,90,-51,-52,-61,-54,-55,]),'LESS_EQUAL':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,91,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,91,91,91,-51,-52,-61,-54,-55,]),'GREATER_EQUAL':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,92,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,92,92,92,-51,-52,-61,-54,-55,]),'IDENTICAL_TO':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,93,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,93,93,93,-51,-52,-61,-54,-55,]),'NOT_IDENTICAL_TO':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,94,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,94,94,94,-51,-52,-61,-54,-55,]),'DIFFERENT':([32,42,46,47,48,49,50,51,58,59,60,61,62,98,109,127,128,130,137,138,],[-27,95,-53,-56,-57,-58,-59,-60,-57,-58,-60,-59,95,95,95,-51,-52,-61,-54,-55,]),'DOT':([32,40,41,46,47,48,49,50,51,56,57,58,59,60,61,62,63,64,68,69,96,107,108,109,115,125,126,127,128,129,130,137,138,139,141,142,],[-27,-79,-80,-53,-56,-57,-58,-59,-60,110,-41,-44,-45,-46,-47,-48,-49,-50,-35,-36,-83,110,-49,-48,-34,-82,-81,-51,-52,-84,-61,-54,-55,110,-42,-43,]),'RIGHT_BRACKET':([32,40,41,46,47,48,49,50,51,58,59,60,61,62,63,64,68,69,96,115,125,126,127,128,129,130,137,138,146,147,167,],[-27,-79,-80,-53,-56,-57,-58,-59,-60,-44,-45,-46,-47,-48,-49,-50,-35,-36,-83,-34,-82,-81,-51,-52,-84,-61,-54,-55,159,-100,-101,]),'LOGICAL_AND':([32,38,40,41,46,47,48,49,50,51,63,77,78,96,97,108,125,126,127,128,129,130,137,138,],[-27,81,-79,-80,-53,-56,-57,-58,-59,-60,81,81,81,81,81,81,81,-81,-51,-52,-84,-61,-54,-55,]),'LOGICAL_OR':([32,38,40,41,46,47,48,49,50,51,63,77,78,96,97,108,125,126,127,128,129,130,137,138,],[-27,82,-79,-80,-53,-56,-57,-58,-59,-60,82,82,82,82,82,82,82,-81,-51,-52,-84,-61,-54,-55,]),'LOGICAL_XOR':([32,38,40,41,46,47,48,49,50,51,63,77,78,96,97,108,125,126,127,128,129,130,137,138,],[-27,83,-79,-80,-53,-56,-57,-58,-59,-60,83,83,83,83,83,83,83,-81,-51,-52,-84,-61,-54,-55,]),'STDIN':([65,66,],[113,114,]),'ARRAY':([70,],[117,]),'LEFT_BRACKET':([70,],[118,]),'LEFT_BRACE':([100,123,124,131,156,162,],[136,136,136,136,136,136,]),'ELSE':([150,155,163,],[162,-78,-77,]),}
>>>>>>> 415af9ebad94e8e318d4a22725ef05b17ff7ed62

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

<<<<<<< HEAD
_lr_goto_items = {'program':([0,],[1,]),'statements':([2,81,],[3,135,]),'statement2':([2,3,81,135,],[4,32,4,32,]),'statement':([2,3,43,81,135,140,],[5,5,91,5,5,169,]),'if_statement':([2,3,81,135,],[6,6,6,6,]),'while_statement':([2,3,81,135,],[7,7,7,7,]),'for_statement':([2,3,81,135,],[8,8,8,8,]),'print_statement':([2,3,43,81,135,140,],[11,11,11,11,11,11,]),'fscanf_statement':([2,3,43,81,135,140,],[12,12,12,12,12,12,]),'fgets_statement':([2,3,22,43,55,64,69,78,81,115,125,135,140,157,160,],[13,13,62,13,62,62,62,62,13,62,62,13,13,62,62,]),'assignment_statement':([2,3,22,43,55,64,69,78,79,81,115,125,135,140,157,160,162,],[14,14,60,14,60,60,60,60,130,14,60,60,14,14,60,60,175,]),'array_declaration_statement':([2,3,43,81,135,140,],[15,15,15,15,15,15,]),'function_call':([2,3,22,43,55,64,69,78,81,115,125,135,140,157,160,],[18,18,61,18,61,61,61,61,18,61,61,18,18,61,61,]),'for_part1':([2,3,81,135,],[21,21,21,21,]),'print_function':([2,3,43,81,135,140,],[22,22,22,22,22,22,]),'variable':([2,3,21,22,35,43,48,49,55,64,69,78,79,81,85,94,95,96,106,107,108,115,117,125,135,140,146,157,160,162,178,182,],[25,25,46,65,46,25,46,46,114,65,65,65,131,25,46,46,46,46,46,46,46,65,46,65,25,25,46,65,65,131,181,184,]),'parenthesized_condition':([19,20,21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,134,146,157,160,],[34,36,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,166,42,42,42,]),'condition':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[37,66,82,92,82,82,66,66,66,138,66,66,66,66,66,82,66,82,66,82,66,66,]),'for_part3':([21,37,],[38,84,]),'simple_condition':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'negated_condition':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'complex_condition':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'relational_expression':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'expression':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[50,59,50,50,93,111,59,59,59,50,145,50,50,50,50,93,59,93,59,93,59,59,]),'term':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[51,51,51,51,51,51,51,51,51,51,51,147,148,51,51,51,51,51,51,51,51,51,]),'factor':([21,22,35,48,49,55,64,69,78,85,94,95,96,106,107,108,115,117,125,146,157,160,],[52,52,52,52,52,52,52,52,52,52,52,52,52,149,150,52,52,52,52,52,52,52,]),'arguments':([22,55,],[56,109,]),'argument':([22,55,64,69,78,115,125,157,160,],[57,57,116,122,127,153,127,127,174,]),'array_indexing':([22,55,64,69,78,115,125,157,160,],[63,63,63,63,63,63,63,63,63,]),'casting':([22,55,64,69,78,115,125,157,160,],[64,64,64,64,64,64,64,64,64,]),'assignment_operator':([25,65,114,131,],[69,69,69,69,]),'block':([34,36,90,139,165,166,],[80,83,143,143,176,177,]),'logical_operator':([37,66,82,92,138,],[85,85,85,85,85,]),'statement_list':([43,],[89,]),'relational_operator':([50,59,93,111,145,],[94,94,94,94,94,]),'casting_type':([55,108,117,],[110,110,110,]),'array':([72,],[123,]),'array_elements':([78,125,157,],[126,158,172,]),'assignment_list':([79,],[128,]),'else_if_extended':([80,],[132,]),'if_part2':([80,132,],[133,164,]),'for_part4':([90,139,],[142,168,]),'if_part3':([132,],[163,]),'variable_list':([178,],[180,]),}
=======
_lr_goto_items = {'program':([0,],[1,]),'statements':([2,136,],[3,154,]),'statement2':([2,3,136,154,],[4,34,4,34,]),'statement':([2,3,45,132,136,154,],[5,5,101,153,5,5,]),'if_statement':([2,3,136,154,],[6,6,6,6,]),'while_statement':([2,3,136,154,],[7,7,7,7,]),'for_statement':([2,3,136,154,],[8,8,8,8,]),'statement_return':([2,3,136,154,],[9,9,9,9,]),'function_statement':([2,3,136,154,],[10,10,10,10,]),'print_statement':([2,3,45,132,136,154,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,45,132,136,154,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,45,132,136,154,],[15,15,15,15,15,15,]),'assignment_statement':([2,3,25,45,55,67,76,106,110,111,118,132,136,145,149,154,160,],[16,16,64,16,64,64,121,64,64,64,64,16,16,64,161,16,64,]),'array_declaration_statement':([2,3,45,132,136,154,],[17,17,17,17,17,17,]),'for_part1':([2,3,136,154,],[22,22,22,22,]),'print_function':([2,3,45,132,136,154,],[25,25,25,25,25,25,]),'variable':([2,3,22,23,25,36,37,43,44,45,53,55,67,76,80,84,85,86,102,103,106,110,111,118,132,136,145,149,154,160,165,171,],[28,28,50,50,61,50,50,50,50,28,50,61,61,122,50,50,50,50,50,50,61,61,61,61,28,28,61,122,28,61,170,173,]),'condition':([22,25,36,37,43,44,55,67,80,106,110,111,118,145,160,],[38,63,77,78,96,97,108,63,125,63,63,63,63,63,63,]),'for_part3':([22,38,],[39,79,]),'expression':([22,23,25,36,37,43,44,53,55,67,80,84,106,110,111,118,145,160,],[42,52,62,42,42,42,98,105,109,62,42,126,62,62,62,62,62,62,]),'term':([22,23,25,36,37,43,44,53,55,67,80,84,85,86,106,110,111,118,145,160,],[46,46,46,46,46,46,46,46,46,46,46,46,127,128,46,46,46,46,46,46,]),'factor':([22,23,25,36,37,43,44,53,55,67,80,84,85,86,102,103,106,110,111,118,145,160,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,137,138,47,47,47,47,47,47,]),'arguments':([25,55,106,],[56,107,139,]),'argument':([25,55,67,106,110,111,118,145,160,],[57,57,115,57,141,142,147,147,167,]),'assignment_operator':([28,61,122,],[67,67,67,]),'logical_operator':([38,63,77,78,96,97,108,125,],[80,80,80,80,80,80,80,80,]),'relational_operator':([42,62,98,109,],[84,84,84,84,]),'statement_list':([45,],[99,]),'array':([70,],[116,]),'assignment_list':([76,],[119,]),'for_part4':([100,131,],[134,152,]),'block':([100,123,124,131,156,162,],[135,150,151,135,164,168,]),'array_elements':([118,145,],[146,158,]),'variable_list':([165,],[169,]),}
>>>>>>> 415af9ebad94e8e318d4a22725ef05b17ff7ed62

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
<<<<<<< HEAD
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',8),
  ('statements -> statement2','statements',1,'p_statements','parser.py',12),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',13),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',21),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',22),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',23),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',24),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',25),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',26),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',31),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',36),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',37),
  ('statement -> function_call','statement',1,'p_statement','parser.py',38),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',44),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',49),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',53),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',54),
  ('variable -> ID','variable',1,'p_variable','parser.py',62),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',67),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',68),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',69),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',76),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',77),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',78),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',79),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',80),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',81),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',86),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',87),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',94),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',95),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',99),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',100),
  ('argument -> STRING','argument',1,'p_argument','parser.py',108),
  ('argument -> expression','argument',1,'p_argument','parser.py',109),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',110),
  ('argument -> function_call','argument',1,'p_argument','parser.py',111),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',112),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',113),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',114),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',122),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',123),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',124),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',131),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',132),
  ('term -> factor','term',1,'p_term','parser.py',133),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',140),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',141),
  ('factor -> condition','factor',1,'p_factor','parser.py',142),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',143),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',151),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',155),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',156),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',164),
  ('if_part2 -> <empty>','if_part2',0,'p_else_if_statement','parser.py',165),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',172),
  ('if_part3 -> <empty>','if_part3',0,'p_else_statement','parser.py',173),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',181),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',186),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',187),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',194),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',195),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',202),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',203),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',210),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',211),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',215),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',216),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',224),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',225),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',233),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',234),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',241),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',242),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',243),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',244),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',248),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',249),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',250),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',251),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',255),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',259),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',263),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',267),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',271),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',272),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',273),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',274),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',275),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',276),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',277),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',278),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',279),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',283),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',284),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',285),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',289),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',293),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',294),
  ('function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN','function_call',4,'p_function_call','parser.py',298),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',303),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',307),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',308),
  ('array_elements -> argument','array_elements',1,'p_array_elements','parser.py',315),
  ('array_elements -> array_elements COMMA argument','array_elements',3,'p_array_elements','parser.py',316),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',324),
=======
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',9),
  ('statements -> statement2','statements',1,'p_statements','parser.py',14),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',15),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',24),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',25),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',26),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',27),
  ('statement2 -> statement_return','statement2',1,'p_statement2','parser.py',28),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',29),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',30),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',31),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',42),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',43),
  ('function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',49),
  ('lambda_function -> LAMBDA arguments COLON expression','lambda_function',4,'p_lambda_function','parser.py',53),
  ('arrow_function -> ARROW arguments ARROW expression','arrow_function',4,'p_arrow_function','parser.py',59),
  ('statement_return -> RETURN expression SEMICOLON','statement_return',3,'p_statement_return','parser.py',64),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',71),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',76),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',80),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',81),
  ('variable -> ID','variable',1,'p_variable','parser.py',89),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',93),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',94),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',95),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',96),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',97),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',98),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',103),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',104),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',105),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',113),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',114),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',121),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',122),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',126),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',127),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',128),
  ('argument -> INTEGER','argument',1,'p_argument','parser.py',136),
  ('argument -> FLOAT','argument',1,'p_argument','parser.py',137),
  ('argument -> STRING','argument',1,'p_argument','parser.py',138),
  ('argument -> variable','argument',1,'p_argument','parser.py',139),
  ('argument -> expression','argument',1,'p_argument','parser.py',140),
  ('argument -> condition','argument',1,'p_argument','parser.py',141),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',142),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',147),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',148),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',149),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',156),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',157),
  ('term -> factor','term',1,'p_term','parser.py',158),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',165),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',166),
  ('factor -> variable','factor',1,'p_factor','parser.py',167),
  ('factor -> STRING','factor',1,'p_factor','parser.py',168),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',169),
  ('if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block','if_statement',5,'p_if_statement','parser.py',181),
  ('if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block','if_statement',7,'p_if_statement','parser.py',182),
  ('while_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN block','while_statement',5,'p_while_statement','parser.py',190),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',195),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',196),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',203),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',204),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',211),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',212),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',219),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',220),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',224),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',225),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',233),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',234),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',242),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',243),
  ('condition -> TRUE','condition',1,'p_condition','parser.py',250),
  ('condition -> FALSE','condition',1,'p_condition','parser.py',251),
  ('condition -> expression relational_operator expression','condition',3,'p_condition','parser.py',252),
  ('condition -> condition logical_operator condition','condition',3,'p_condition','parser.py',253),
  ('condition -> LOGICAL_NOT condition','condition',2,'p_condition','parser.py',254),
  ('condition -> LEFT_PAREN condition RIGHT_PAREN','condition',3,'p_condition','parser.py',255),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',264),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',265),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',266),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',267),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',268),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',269),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',270),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',271),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',272),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',276),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',277),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',278),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',294),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',298),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',299),
  ('array_elements -> argument','array_elements',1,'p_array_elements','parser.py',303),
  ('array_elements -> array_elements COMMA argument','array_elements',3,'p_array_elements','parser.py',304),
  ('list -> LEFT_BRACKET elements RIGHT_BRACKET','list',3,'p_list','parser.py',314),
  ('elements -> argument','elements',1,'p_elements','parser.py',318),
  ('elements -> elements COMMA argument','elements',3,'p_elements','parser.py',319),
  ('stack_operations -> PUSH argument','stack_operations',2,'p_stack_operations','parser.py',342),
  ('stack_operations -> POP','stack_operations',1,'p_stack_operations','parser.py',343),
  ('queue_operations -> ENQUEUE argument','queue_operations',2,'p_queue_operations','parser.py',366),
  ('queue_operations -> DEQUEUE','queue_operations',1,'p_queue_operations','parser.py',367),
  ('deque_operations -> APPEND argument','deque_operations',2,'p_deque_operations','parser.py',394),
  ('deque_operations -> APPENDLEFT argument','deque_operations',2,'p_deque_operations','parser.py',395),
  ('deque_operations -> POP','deque_operations',1,'p_deque_operations','parser.py',396),
  ('deque_operations -> POPLEFT','deque_operations',1,'p_deque_operations','parser.py',397),
  ('set_declaration -> SET LEFT_BRACE set_elements RIGHT_BRACE','set_declaration',4,'p_set_declaration','parser.py',410),
  ('set_elements -> argument','set_elements',1,'p_set_elements','parser.py',414),
  ('set_elements -> set_elements COMMA argument','set_elements',3,'p_set_elements','parser.py',415),
  ('dictionary_declaration -> DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACE','dictionary_declaration',4,'p_dictionary_declaration','parser.py',425),
  ('dictionary_elements -> key_value_pair','dictionary_elements',1,'p_dictionary_elements','parser.py',429),
  ('dictionary_elements -> dictionary_elements COMMA key_value_pair','dictionary_elements',3,'p_dictionary_elements','parser.py',430),
  ('key_value_pair -> STRING COLON argument','key_value_pair',3,'p_key_value_pair','parser.py',438),
  ('iterator_declaration -> ITERATOR LEFT_BRACKET elements RIGHT_BRACKET','iterator_declaration',4,'p_iterator_declaration','parser.py',459),
  ('tree_operations -> ADD_CHILD argument','tree_operations',2,'p_tree_operations','parser.py',473),
>>>>>>> 415af9ebad94e8e318d4a22725ef05b17ff7ed62
]
