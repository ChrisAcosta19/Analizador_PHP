
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD_CHILD APPEND APPENDLEFT ARRAY ARROW AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DEQUEUE DICTIONARY DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENQUEUE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE ITERATOR KEY_VALUE LAMBDA LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POP POPLEFT POWER PRINT PRIVATE PROTECTED PUBLIC PUSH REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON SET STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROM object_declarationprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENTstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | return_statementfunction_statement : FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN blocklambda_function : LAMBDA arguments COLON expressionarrow_function : ARROW arguments ARROW expressionreturn_statement : RETURN expressionfgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : IDassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | assignment_statement\n                | function_call\n                | fgets_statement\n                | array_indexing\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block\n                    | IF parenthesized_condition block else_if_extended\n                    | IF parenthesized_condition block else_if_extended if_part3\n                    | IF parenthesized_condition block if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition blockif_part3 : ELSE blockwhile_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEfunction_call : NAME LEFT_PAREN array_elements RIGHT_PARENarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : argument\n                      | array_elements COMMA argumentarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKETlist : LEFT_BRACKET elements RIGHT_BRACKETelements : argument\n                | elements COMMA argumentstack_operations : PUSH argument\n                        | POPqueue_operations : ENQUEUE argument\n                        | DEQUEUEdeque_operations : APPEND argument\n                        | APPENDLEFT argument\n                        | POP\n                        | POPLEFTset_declaration : SET LEFT_BRACE set_elements RIGHT_BRACEset_elements : argument\n                    | set_elements COMMA argumentdictionary_declaration : DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACEdictionary_elements : key_value_pair\n                           | dictionary_elements COMMA key_value_pairkey_value_pair : STRING COLON argumentiterator_declaration : ITERATOR LEFT_BRACKET elements RIGHT_BRACKETtree_operations : ADD_CHILD argument'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,35,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,36,37,42,87,88,90,91,141,142,143,146,147,152,153,154,175,176,177,179,180,189,190,],[10,10,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,10,-70,-73,-63,-65,-66,10,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,36,37,42,87,88,90,91,141,142,143,146,147,152,153,154,175,176,177,179,180,189,190,],[11,11,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,11,-70,-73,-63,-65,-66,11,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'BREAK':([2,3,4,6,7,8,9,10,11,36,37,42,47,87,88,90,91,141,142,143,146,147,151,152,153,154,175,176,177,179,180,189,190,],[17,17,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,17,-62,17,-70,-73,-63,-65,-66,17,-84,17,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,36,37,42,47,87,88,90,91,141,142,143,146,147,151,152,153,154,175,176,177,179,180,189,190,],[18,18,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,18,-62,18,-70,-73,-63,-65,-66,18,-84,18,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'IF':([2,3,4,6,7,8,9,10,11,36,37,42,87,88,90,91,141,142,143,146,147,152,153,154,175,176,177,179,180,189,190,],[21,21,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,21,-70,-73,-63,-65,-66,21,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'WHILE':([2,3,4,6,7,8,9,10,11,36,37,42,87,88,90,91,141,142,143,146,147,152,153,154,175,176,177,179,180,189,190,],[22,22,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,22,-70,-73,-63,-65,-66,22,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,36,37,42,87,88,90,91,141,142,143,146,147,152,153,154,175,176,177,179,180,189,190,],[24,24,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,24,-70,-73,-63,-65,-66,24,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'FSCANF':([2,3,4,6,7,8,9,10,11,36,37,42,47,87,88,90,91,141,142,143,146,147,151,152,153,154,175,176,177,179,180,189,190,],[27,27,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,27,-62,27,-70,-73,-63,-65,-66,27,-84,27,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'FGETS':([2,3,4,6,7,8,9,10,11,26,32,33,36,37,42,47,60,61,70,75,78,79,80,81,82,83,87,88,90,91,115,126,127,130,136,141,142,143,146,147,151,152,153,154,163,165,171,175,176,177,179,180,189,190,],[28,28,-2,-5,-6,-7,-8,-9,-10,28,-40,-41,-3,-4,-74,28,28,28,28,28,-32,-33,-34,-35,-36,-37,-62,28,-70,-73,28,28,28,-32,28,-63,-65,-66,28,-84,28,-78,-76,-77,28,-109,28,-64,-67,-69,-83,-75,-68,-20,]),'NAME':([2,3,4,6,7,8,9,10,11,24,26,32,33,36,37,42,47,60,61,70,75,78,79,80,81,82,83,87,88,90,91,115,126,127,130,136,141,142,143,146,147,151,152,153,154,163,165,171,175,176,177,179,180,189,190,],[25,25,-2,-5,-6,-7,-8,-9,-10,59,25,-40,-41,-3,-4,-74,25,25,25,25,25,-32,-33,-34,-35,-36,-37,-62,25,-70,-73,25,25,25,-32,25,-63,-65,-66,25,-84,25,-78,-76,-77,25,-109,25,-64,-67,-69,-83,-75,-68,-20,]),'RETURN':([2,3,4,6,7,8,9,10,11,36,37,42,47,87,88,90,91,141,142,143,146,147,151,152,153,154,175,176,177,179,180,189,190,],[30,30,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,30,-62,30,-70,-73,-63,-65,-66,30,-84,30,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'FOR':([2,3,4,6,7,8,9,10,11,36,37,42,87,88,90,91,141,142,143,146,147,152,153,154,175,176,177,179,180,189,190,],[31,31,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,31,-70,-73,-63,-65,-66,31,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'PRINT':([2,3,4,6,7,8,9,10,11,36,37,42,47,87,88,90,91,141,142,143,146,147,151,152,153,154,175,176,177,179,180,189,190,],[32,32,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,32,-62,32,-70,-73,-63,-65,-66,32,-84,32,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'ECHO':([2,3,4,6,7,8,9,10,11,36,37,42,47,87,88,90,91,141,142,143,146,147,151,152,153,154,175,176,177,179,180,189,190,],[33,33,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,33,-62,33,-70,-73,-63,-65,-66,33,-84,33,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'ID':([2,3,4,6,7,8,9,10,11,23,26,30,32,33,36,37,39,42,47,52,53,60,61,70,75,78,79,80,81,82,83,85,86,87,88,90,91,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,126,127,130,136,138,141,142,143,146,147,151,152,153,154,163,165,171,173,174,175,176,177,179,180,189,190,191,195,],[34,34,-2,-5,-6,-7,-8,-9,-10,34,34,34,-40,-41,-3,-4,34,-74,34,34,34,34,34,34,34,-32,-33,-34,-35,-36,-37,34,34,-62,34,-70,-73,34,-106,-107,-108,34,34,34,-97,-98,-99,-100,-101,-102,-103,-104,-105,34,34,34,34,34,34,34,-32,34,-72,-63,-65,-66,34,-84,34,-78,-76,-77,34,-109,34,-71,34,-64,-67,-69,-83,-75,-68,-20,34,34,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,36,37,42,87,90,91,141,142,143,147,152,153,154,175,176,177,179,180,189,190,],[35,-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,-70,-73,-63,-65,-66,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,36,37,42,87,88,90,91,141,142,143,146,147,152,153,154,175,176,177,179,180,189,190,],[-2,-5,-6,-7,-8,-9,-10,-3,-4,-74,-62,147,-70,-73,-63,-65,-66,179,-84,-78,-76,-77,-64,-67,-69,-83,-75,-68,-20,]),'SEMICOLON':([5,12,13,14,15,16,17,18,19,20,23,34,41,43,44,45,46,48,49,50,51,55,56,57,58,62,63,64,65,66,67,68,69,71,72,76,77,84,86,97,99,128,133,134,137,138,139,148,149,150,155,156,157,158,159,160,162,164,166,167,170,173,184,187,188,192,196,],[37,-11,-12,-13,-14,-15,-16,-17,-18,-19,47,-28,47,-85,-86,-87,-88,-89,-90,-91,-92,-54,-57,-58,-59,-39,-42,-45,-46,-47,-48,-49,-50,-91,-60,-30,-31,-23,138,152,-93,-51,-29,-113,173,-72,-79,-95,-94,152,-61,-96,-52,-53,-55,-56,-112,-38,-43,-44,-24,-71,-118,-115,-80,-114,-25,]),'RIGHT_PAREN':([12,13,14,15,16,17,18,19,20,34,43,44,45,46,47,48,49,50,51,55,56,57,58,62,63,64,65,66,67,68,69,71,72,76,77,84,89,96,98,99,100,117,118,120,121,122,123,124,125,128,132,133,134,148,149,155,156,157,158,159,160,161,162,164,166,167,170,181,183,184,186,187,192,193,194,196,197,],[-11,-12,-13,-14,-15,-16,-17,-18,-19,-28,-85,-86,-87,-88,97,-89,-90,-91,-92,-54,-57,-58,-59,-39,-42,-45,-46,-47,-48,-49,-50,-91,-60,-30,-31,-23,148,150,-81,-93,155,162,-116,164,165,155,-110,-111,-91,-51,170,-29,-113,-95,-94,-61,-96,-52,-53,-55,-56,182,-112,-38,-43,-44,-24,-82,-117,-118,192,-115,-114,196,-26,-25,-27,]),'COMMA':([12,13,14,15,16,17,18,19,20,34,43,44,45,46,48,49,50,51,55,56,57,58,62,63,64,65,66,67,68,69,71,72,76,77,84,89,96,98,99,117,118,120,122,125,128,131,133,134,137,139,148,149,155,156,157,158,159,160,161,162,164,166,167,170,172,181,183,184,185,186,187,188,192,193,194,196,197,],[-11,-12,-13,-14,-15,-16,-17,-18,-19,-28,-85,-86,-87,-88,-89,-90,-91,-92,-54,-57,-58,-59,127,-42,-45,-46,-47,-48,-49,-50,-91,-60,-30,-31,-23,-60,151,-81,-93,163,-116,127,-46,-91,-51,169,-29,-113,174,-79,-95,-94,-61,-96,-52,-53,-55,-56,127,-112,-38,-43,-44,-24,163,-82,-117,-118,191,163,-115,-80,-114,195,-26,-25,-27,]),'LEFT_PAREN':([21,22,23,25,26,27,28,30,31,32,33,39,52,53,59,60,61,70,75,78,79,80,81,82,83,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,126,127,130,135,136,138,145,163,165,171,173,],[39,39,53,60,61,73,74,85,86,-40,-41,53,53,53,115,116,119,116,116,-32,-33,-34,-35,-36,-37,53,53,-106,-107,-108,85,85,85,-97,-98,-99,-100,-101,-102,-103,-104,-105,85,85,116,53,53,116,116,-32,171,116,-72,39,116,-109,116,-71,]),'TRUE':([23,26,30,32,33,39,52,53,60,61,70,75,78,79,80,81,82,83,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,126,127,130,136,138,163,165,171,173,],[48,48,48,-40,-41,48,48,48,48,48,48,48,-32,-33,-34,-35,-36,-37,48,48,-106,-107,-108,48,48,48,-97,-98,-99,-100,-101,-102,-103,-104,-105,48,48,48,48,48,48,48,-32,48,-72,48,-109,48,-71,]),'FALSE':([23,26,30,32,33,39,52,53,60,61,70,75,78,79,80,81,82,83,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,126,127,130,136,138,163,165,171,173,],[49,49,49,-40,-41,49,49,49,49,49,49,49,-32,-33,-34,-35,-36,-37,49,49,-106,-107,-108,49,49,49,-97,-98,-99,-100,-101,-102,-103,-104,-105,49,49,49,49,49,49,49,-32,49,-72,49,-109,49,-71,]),'LOGICAL_NOT':([23,26,30,32,33,39,52,53,60,61,70,75,78,79,80,81,82,83,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,126,127,130,136,138,163,165,171,173,],[52,52,52,-40,-41,52,52,52,52,52,52,52,-32,-33,-34,-35,-36,-37,52,52,-106,-107,-108,52,52,52,-97,-98,-99,-100,-101,-102,-103,-104,-105,52,52,52,52,52,52,52,-32,52,-72,52,-109,52,-71,]),'INTEGER':([23,26,30,32,33,39,52,53,60,61,70,75,78,79,80,81,82,83,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,126,127,129,130,136,138,163,165,171,173,],[57,57,57,-40,-41,57,57,57,57,57,57,57,-32,-33,-34,-35,-36,-37,57,57,-106,-107,-108,57,57,57,-97,-98,-99,-100,-101,-102,-103,-104,-105,57,57,57,57,57,57,57,168,-32,57,-72,57,-109,57,-71,]),'FLOAT':([23,26,30,32,33,39,52,53,60,61,70,75,78,79,80,81,82,83,85,92,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,126,127,130,136,138,163,165,171,173,],[58,58,58,-40,-41,58,58,58,58,58,58,58,-32,-33,-34,-35,-36,-37,58,58,-106,-107,-108,58,58,58,-97,-98,-99,-100,-101,-102,-103,-104,-105,58,58,58,58,58,58,58,-32,58,-72,58,-109,58,-71,]),'STRING':([26,32,33,60,61,70,75,78,79,80,81,82,83,115,126,127,130,136,163,165,169,171,],[64,-40,-41,64,64,64,64,-32,-33,-34,-35,-36,-37,64,64,64,-32,64,64,-109,185,64,]),'PLUS_PLUS':([29,34,71,125,140,],[76,-28,76,76,76,]),'MINUS_MINUS':([29,34,71,125,140,],[77,-28,77,77,77,]),'EQUALS':([29,34,71,125,140,],[78,-28,130,130,130,]),'PLUS_EQUALS':([29,34,71,125,140,],[79,-28,79,79,79,]),'MINUS_EQUALS':([29,34,71,125,140,],[80,-28,80,80,80,]),'TIMES_EQUALS':([29,34,71,125,140,],[81,-28,81,81,81,]),'DIVIDE_EQUALS':([29,34,71,125,140,],[82,-28,82,82,82,]),'MOD_EQUALS':([29,34,71,125,140,],[83,-28,83,83,83,]),'LOGICAL_AND':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,71,72,89,99,125,148,149,155,156,157,158,159,160,],[-28,93,-85,-86,-87,-88,-89,-90,-91,-92,-54,-57,-58,-59,-91,93,93,93,-91,-95,93,-61,-96,-52,-53,-55,-56,]),'LOGICAL_OR':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,71,72,89,99,125,148,149,155,156,157,158,159,160,],[-28,94,-85,-86,-87,-88,-89,-90,-91,-92,-54,-57,-58,-59,-91,94,94,94,-91,-95,94,-61,-96,-52,-53,-55,-56,]),'LOGICAL_XOR':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,71,72,89,99,125,148,149,155,156,157,158,159,160,],[-28,95,-85,-86,-87,-88,-89,-90,-91,-92,-54,-57,-58,-59,-91,95,95,95,-91,-95,95,-61,-96,-52,-53,-55,-56,]),'TIMES':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,71,72,89,99,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,113,-57,-58,-59,-91,-60,-60,-60,-91,-95,-60,-61,-96,113,113,-55,-56,]),'DIVIDE':([34,41,43,44,45,46,48,49,50,51,55,56,57,58,71,72,89,99,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,114,-57,-58,-59,-91,-60,-60,-60,-91,-95,-60,-61,-96,114,114,-55,-56,]),'PLUS':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,102,-54,-57,-58,-59,102,-91,-60,102,-60,-60,102,102,-91,-95,-60,-61,102,-52,-53,-55,-56,]),'MINUS':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,103,-54,-57,-58,-59,103,-91,-60,103,-60,-60,103,103,-91,-95,-60,-61,103,-52,-53,-55,-56,]),'EQUAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,104,-54,-57,-58,-59,104,-91,-60,104,-60,-60,104,104,-91,-95,-60,-61,104,-52,-53,-55,-56,]),'NOT_EQUAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,105,-54,-57,-58,-59,105,-91,-60,105,-60,-60,105,105,-91,-95,-60,-61,105,-52,-53,-55,-56,]),'LESS_THAN':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,106,-54,-57,-58,-59,106,-91,-60,106,-60,-60,106,106,-91,-95,-60,-61,106,-52,-53,-55,-56,]),'GREATER_THAN':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,107,-54,-57,-58,-59,107,-91,-60,107,-60,-60,107,107,-91,-95,-60,-61,107,-52,-53,-55,-56,]),'LESS_EQUAL':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,108,-54,-57,-58,-59,108,-91,-60,108,-60,-60,108,108,-91,-95,-60,-61,108,-52,-53,-55,-56,]),'GREATER_EQUAL':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,109,-54,-57,-58,-59,109,-91,-60,109,-60,-60,109,109,-91,-95,-60,-61,109,-52,-53,-55,-56,]),'IDENTICAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,110,-54,-57,-58,-59,110,-91,-60,110,-60,-60,110,110,-91,-95,-60,-61,110,-52,-53,-55,-56,]),'NOT_IDENTICAL_TO':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,111,-54,-57,-58,-59,111,-91,-60,111,-60,-60,111,111,-91,-95,-60,-61,111,-52,-53,-55,-56,]),'DIFFERENT':([34,41,43,44,45,46,48,49,50,51,54,55,56,57,58,65,71,72,84,89,99,100,122,125,148,149,155,156,157,158,159,160,],[-28,-60,-85,-86,-87,-88,-89,-90,-91,-92,112,-54,-57,-58,-59,112,-91,-60,112,-60,-60,112,112,-91,-95,-60,-61,112,-52,-53,-55,-56,]),'LEFT_BRACKET':([34,71,78,125,],[-28,129,136,129,]),'DOT':([34,43,44,45,46,48,49,50,51,55,56,57,58,62,63,64,65,66,67,68,69,71,72,76,77,89,99,120,122,125,128,133,148,149,155,156,157,158,159,160,161,162,166,167,170,184,],[-28,-85,-86,-87,-88,-89,-90,-91,-92,-54,-57,-58,-59,126,-42,-45,-46,-47,-48,-49,-50,-91,-60,-30,-31,-60,-93,126,-46,-91,-51,-29,-95,-94,-61,-96,-52,-53,-55,-56,126,-112,-43,-44,-24,-118,]),'RIGHT_BRACKET':([34,43,44,45,46,48,49,50,51,55,56,57,58,64,65,66,67,68,69,71,72,76,77,99,118,128,133,148,149,155,156,157,158,159,160,162,168,170,172,183,184,],[-28,-85,-86,-87,-88,-89,-90,-91,-92,-54,-57,-58,-59,-45,-46,-47,-48,-49,-50,-91,-60,-30,-31,-93,-116,-51,-29,-95,-94,-61,-96,-52,-53,-55,-56,-112,184,-24,187,-117,-118,]),'LEFT_BRACE':([38,40,97,144,148,150,178,182,],[88,88,88,88,-95,88,88,88,]),'INT_TYPE':([61,116,119,],[123,123,123,]),'FLOAT_TYPE':([61,116,119,],[124,124,124,]),'STDIN':([73,74,],[131,132,]),'ARRAY':([78,],[135,]),'ELSE':([87,141,143,147,176,179,189,],[144,144,-66,-84,-67,-83,-68,]),'ELSEIF':([87,141,143,147,176,179,189,],[145,145,-66,-84,-67,-83,-68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,88,],[3,146,]),'statement2':([2,3,88,146,],[4,36,4,36,]),'statement':([2,3,47,88,146,151,],[5,5,98,5,5,181,]),'if_statement':([2,3,88,146,],[6,6,6,6,]),'while_statement':([2,3,88,146,],[7,7,7,7,]),'for_statement':([2,3,88,146,],[8,8,8,8,]),'function_statement':([2,3,88,146,],[9,9,9,9,]),'print_statement':([2,3,47,88,146,151,],[12,12,12,12,12,12,]),'fscanf_statement':([2,3,47,88,146,151,],[13,13,13,13,13,13,]),'fgets_statement':([2,3,26,47,60,61,70,75,88,115,126,127,136,146,151,163,171,],[14,14,68,14,68,68,68,68,14,68,68,68,68,14,14,68,68,]),'assignment_statement':([2,3,26,47,60,61,70,75,86,88,115,126,127,136,146,151,163,171,174,],[15,15,66,15,66,66,66,66,139,15,66,66,66,66,15,15,66,66,188,]),'array_declaration_statement':([2,3,47,88,146,151,],[16,16,16,16,16,16,]),'function_call':([2,3,26,47,60,61,70,75,88,115,126,127,136,146,151,163,171,],[19,19,67,19,67,67,67,67,19,67,67,67,67,19,19,67,67,]),'return_statement':([2,3,47,88,146,151,],[20,20,20,20,20,20,]),'for_part1':([2,3,88,146,],[23,23,23,23,]),'print_function':([2,3,47,88,146,151,],[26,26,26,26,26,26,]),'variable':([2,3,23,26,30,39,47,52,53,60,61,70,75,85,86,88,92,101,102,103,113,114,115,116,119,126,127,136,146,151,163,171,174,191,195,],[29,29,50,71,50,50,29,50,50,71,125,71,71,50,140,29,50,50,50,50,50,50,71,50,50,71,71,71,29,29,71,71,140,194,197,]),'parenthesized_condition':([21,22,23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,145,163,171,],[38,40,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,178,46,46,]),'condition':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[41,72,72,89,99,89,72,89,72,72,89,149,72,72,72,72,72,72,89,89,72,72,72,72,72,]),'for_part3':([23,41,],[42,91,]),'simple_condition':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'negated_condition':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'complex_condition':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'relational_expression':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'expression':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[54,65,84,54,54,100,65,122,65,65,100,54,156,54,54,54,54,65,100,100,65,65,65,65,65,]),'term':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[55,55,55,55,55,55,55,55,55,55,55,55,55,157,158,55,55,55,55,55,55,55,55,55,55,]),'factor':([23,26,30,39,52,53,60,61,70,75,85,92,101,102,103,113,114,115,116,119,126,127,136,163,171,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,159,160,56,56,56,56,56,56,56,56,]),'arguments':([26,61,115,],[62,120,161,]),'argument':([26,60,61,70,75,115,126,127,136,163,171,],[63,118,63,128,133,63,166,167,118,183,118,]),'array_indexing':([26,60,61,70,75,115,126,127,136,163,171,],[69,69,69,69,69,69,69,69,69,69,69,]),'casting':([26,60,61,70,75,115,126,127,136,163,171,],[70,70,70,70,70,70,70,70,70,70,70,]),'assignment_operator':([29,71,125,140,],[75,75,75,75,]),'block':([38,40,97,144,150,178,182,],[87,90,154,177,154,189,190,]),'logical_operator':([41,72,89,99,149,],[92,92,92,92,92,]),'statement_list':([47,],[96,]),'relational_operator':([54,65,84,100,122,156,],[101,101,101,101,101,101,]),'array_elements':([60,136,171,],[117,172,186,]),'casting_type':([61,116,119,],[121,121,121,]),'array':([78,],[134,]),'assignment_list':([86,],[137,]),'else_if_extended':([87,],[141,]),'if_part3':([87,141,],[142,175,]),'if_part2':([87,141,],[143,176,]),'for_part4':([97,150,],[153,180,]),'variable_list':([191,],[193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',8),
  ('statements -> statement2','statements',1,'p_statements','parser.py',12),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',13),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',21),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',22),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',23),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',24),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',25),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',26),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',27),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',37),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',38),
  ('statement -> function_call','statement',1,'p_statement','parser.py',39),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',40),
  ('function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',46),
  ('lambda_function -> LAMBDA arguments COLON expression','lambda_function',4,'p_lambda_function','parser.py',51),
  ('arrow_function -> ARROW arguments ARROW expression','arrow_function',4,'p_arrow_function','parser.py',57),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',62),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',69),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',74),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',78),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',79),
  ('variable -> ID','variable',1,'p_variable','parser.py',87),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',92),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',93),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',94),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',101),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',102),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',103),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',104),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',105),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',106),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',111),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',112),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',119),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',120),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',124),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',125),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',126),
  ('argument -> STRING','argument',1,'p_argument','parser.py',134),
  ('argument -> expression','argument',1,'p_argument','parser.py',135),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',136),
  ('argument -> function_call','argument',1,'p_argument','parser.py',137),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',138),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',139),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',140),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',148),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',149),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',150),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',157),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',158),
  ('term -> factor','term',1,'p_term','parser.py',159),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',166),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',167),
  ('factor -> condition','factor',1,'p_factor','parser.py',168),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',169),
  ('if_statement -> IF parenthesized_condition block','if_statement',3,'p_if_statement','parser.py',177),
  ('if_statement -> IF parenthesized_condition block else_if_extended','if_statement',4,'p_if_statement','parser.py',178),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',179),
  ('if_statement -> IF parenthesized_condition block if_part3','if_statement',4,'p_if_statement','parser.py',180),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',189),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',190),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',198),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',202),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',207),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',212),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',213),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',220),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',221),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',228),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',229),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',236),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',237),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',241),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',242),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',250),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',251),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',259),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',260),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',267),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',268),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',269),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',270),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',274),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',275),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',276),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',277),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',281),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',285),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',289),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',293),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',297),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',298),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',299),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',300),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',301),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',302),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',303),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',304),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',305),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',309),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',310),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',311),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',315),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',319),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',320),
  ('function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN','function_call',4,'p_function_call','parser.py',324),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',329),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',333),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',334),
  ('array_elements -> argument','array_elements',1,'p_array_elements','parser.py',341),
  ('array_elements -> array_elements COMMA argument','array_elements',3,'p_array_elements','parser.py',342),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',350),
  ('list -> LEFT_BRACKET elements RIGHT_BRACKET','list',3,'p_list','parser.py',364),
  ('elements -> argument','elements',1,'p_elements','parser.py',368),
  ('elements -> elements COMMA argument','elements',3,'p_elements','parser.py',369),
  ('stack_operations -> PUSH argument','stack_operations',2,'p_stack_operations','parser.py',392),
  ('stack_operations -> POP','stack_operations',1,'p_stack_operations','parser.py',393),
  ('queue_operations -> ENQUEUE argument','queue_operations',2,'p_queue_operations','parser.py',416),
  ('queue_operations -> DEQUEUE','queue_operations',1,'p_queue_operations','parser.py',417),
  ('deque_operations -> APPEND argument','deque_operations',2,'p_deque_operations','parser.py',444),
  ('deque_operations -> APPENDLEFT argument','deque_operations',2,'p_deque_operations','parser.py',445),
  ('deque_operations -> POP','deque_operations',1,'p_deque_operations','parser.py',446),
  ('deque_operations -> POPLEFT','deque_operations',1,'p_deque_operations','parser.py',447),
  ('set_declaration -> SET LEFT_BRACE set_elements RIGHT_BRACE','set_declaration',4,'p_set_declaration','parser.py',460),
  ('set_elements -> argument','set_elements',1,'p_set_elements','parser.py',464),
  ('set_elements -> set_elements COMMA argument','set_elements',3,'p_set_elements','parser.py',465),
  ('dictionary_declaration -> DICTIONARY LEFT_BRACE dictionary_elements RIGHT_BRACE','dictionary_declaration',4,'p_dictionary_declaration','parser.py',475),
  ('dictionary_elements -> key_value_pair','dictionary_elements',1,'p_dictionary_elements','parser.py',479),
  ('dictionary_elements -> dictionary_elements COMMA key_value_pair','dictionary_elements',3,'p_dictionary_elements','parser.py',480),
  ('key_value_pair -> STRING COLON argument','key_value_pair',3,'p_key_value_pair','parser.py',488),
  ('iterator_declaration -> ITERATOR LEFT_BRACKET elements RIGHT_BRACKET','iterator_declaration',4,'p_iterator_declaration','parser.py',509),
  ('tree_operations -> ADD_CHILD argument','tree_operations',2,'p_tree_operations','parser.py',523),
]
