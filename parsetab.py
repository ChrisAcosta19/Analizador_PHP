
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE COUNT DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROMprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENT\n                  | class_declarationstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | return_statement\n                 | array_indexing\n                 | array_add_element\n                 | array_modify_element\n                 | array_remove_element\n                 | array_count_elements\n                 | expressionfunction_statement : FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION NAME LEFT_PAREN RIGHT_PAREN blockanonymous_function : FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION LEFT_PAREN RIGHT_PAREN blockreturn_statement : RETURN argumentsfunction_call : function_name LEFT_PAREN arguments RIGHT_PAREN\n                     | function_name LEFT_PAREN RIGHT_PARENfunction_name : NAME\n                     | variablefgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : ID\n                | ID CALL NAMEassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | array\n                | array_indexing\n                | function_call\n                | variable CALL function_call\n                | anonymous_function\n                | assignment_statement\n                | fgets_statement\n                | object_creation\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | term MOD factor\n            | term POWER factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | STRING\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block\n                    | IF parenthesized_condition block else_if_extended\n                    | IF parenthesized_condition block else_if_extended if_part3\n                    | IF parenthesized_condition block if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition blockif_part3 : ELSE blockwhile_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : array_argument\n                      | array_elements COMMA array_argumentarray_argument : argument\n                      | clave KEY_VALUE argumentclave : STRING\n             | INTEGERarray_indexing : variable LEFT_BRACKET clave RIGHT_BRACKETarray_add_element : variable LEFT_BRACKET RIGHT_BRACKET EQUALS argumentarray_modify_element : variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argumentarray_remove_element : UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PARENarray_count_elements : COUNT LEFT_PAREN variable RIGHT_PARENclass_declaration : CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE\n                         | CLASS NAME LEFT_BRACE RIGHT_BRACEclass_statements : class_statement\n                        | class_statements class_statementclass_statement : method_declaration\n                       | property_declaration\n                       | ONE_LINE_COMMENT\n                       | MULTI_LINE_COMMENTmethod_declaration : visibility_operator function_statementproperty_declaration : visibility_operator variable SEMICOLONvisibility_operator : PUBLIC\n                           | PRIVATE\n                           | PROTECTEDobject_creation : NEW NAME LEFT_PAREN RIGHT_PAREN\n                       | NEW NAME LEFT_PAREN arguments RIGHT_PAREN'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,61,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,149,193,194,195,198,199,202,203,204,207,208,209,210,211,212,213,241,242,243,245,246,249,250,251,252,267,268,269,],[10,10,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,10,-90,-93,212,-83,-85,-86,10,-104,-98,-96,-97,212,-147,-148,-150,-151,-152,-153,-84,-87,-89,-103,-95,-28,-146,-149,-154,-88,-27,-155,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,149,193,194,195,198,199,202,203,204,207,208,209,210,211,212,213,241,242,243,245,246,249,250,251,252,267,268,269,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,11,-90,-93,213,-83,-85,-86,11,-104,-98,-96,-97,213,-147,-148,-150,-151,-152,-153,-84,-87,-89,-103,-95,-28,-146,-149,-154,-88,-27,-155,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,18,-82,18,-90,-93,-83,-85,-86,18,-104,18,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,19,-82,19,-90,-93,-83,-85,-86,19,-104,19,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'IF':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,208,241,242,243,245,246,249,250,267,268,],[28,28,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,28,-90,-93,-83,-85,-86,28,-104,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,208,241,242,243,245,246,249,250,267,268,],[30,30,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,30,-90,-93,-83,-85,-86,30,-104,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,37,43,48,49,62,63,80,93,106,108,113,116,118,119,120,121,122,123,138,139,140,141,146,157,158,161,163,170,193,194,195,198,199,202,203,204,208,214,215,216,217,219,227,228,231,235,241,242,243,245,246,249,250,263,267,268,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,109,109,-53,-54,-3,-4,-94,109,109,109,109,-45,-46,-47,-48,-49,-50,109,-82,33,-90,-93,109,109,109,-45,109,109,-83,-85,-86,33,-104,-98,-96,-97,-147,33,-156,-157,-158,-129,109,109,109,109,-84,-87,-89,-103,-95,-28,-146,109,-88,-27,]),'CLASS':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,208,241,242,243,245,246,249,250,267,268,],[36,36,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,36,-90,-93,-83,-85,-86,36,-104,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[38,38,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,38,-82,38,-90,-93,-83,-85,-86,38,-104,38,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,37,43,48,49,62,63,80,81,93,106,108,113,116,118,119,120,121,122,123,138,139,140,141,146,157,158,161,163,170,193,194,195,198,199,201,202,203,204,208,219,227,228,231,235,241,242,243,245,246,249,250,263,267,268,],[40,40,-2,-5,-6,-7,-8,-9,-10,-11,40,40,-53,-54,-3,-4,-94,40,40,40,40,40,-45,-46,-47,-48,-49,-50,40,-82,40,-90,-93,40,40,40,-45,40,40,-83,-85,-86,40,-104,40,-98,-96,-97,-147,-129,40,40,40,40,-84,-87,-89,-103,-95,-28,-146,40,-88,-27,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[43,43,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,43,-82,43,-90,-93,-83,-85,-86,43,-104,43,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'UNSET':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[44,44,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,44,-82,44,-90,-93,-83,-85,-86,44,-104,44,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'COUNT':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[45,45,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,45,-82,45,-90,-93,-83,-85,-86,45,-104,45,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'FOR':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,208,241,242,243,245,246,249,250,267,268,],[47,47,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,47,-90,-93,-83,-85,-86,47,-104,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[48,48,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,48,-82,48,-90,-93,-83,-85,-86,48,-104,48,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,208,241,242,243,245,246,249,250,267,268,],[49,49,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,49,-82,49,-90,-93,-83,-85,-86,49,-104,49,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'ID':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,126,127,128,129,130,131,132,138,139,140,141,146,150,157,158,159,161,163,170,189,193,194,195,198,199,201,202,203,204,208,214,215,216,217,219,227,228,231,235,239,240,241,242,243,245,246,249,250,263,267,268,272,278,],[50,50,-2,-5,-6,-7,-8,-9,-10,-11,50,50,50,50,-53,-54,50,-3,-4,50,50,50,-117,-118,-119,-120,-121,-122,-123,-124,-125,50,-94,50,50,50,-126,-127,-128,50,50,50,50,-45,-46,-47,-48,-49,-50,50,50,50,50,50,50,50,50,50,-82,50,-90,-93,50,50,50,50,50,-45,50,50,-92,-83,-85,-86,50,-104,50,-98,-96,-97,-147,50,-156,-157,-158,-129,50,50,50,50,-91,50,-84,-87,-89,-103,-95,-28,-146,50,-88,-27,50,50,]),'NAME':([2,3,4,6,7,8,9,10,11,12,33,36,37,43,48,49,62,63,80,81,93,106,108,110,113,116,118,119,120,121,122,123,133,138,139,140,141,146,157,158,159,161,163,170,193,194,195,198,199,201,202,203,204,208,219,227,228,231,235,241,242,243,245,246,249,250,263,267,268,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,89,92,34,34,-53,-54,-3,-4,-94,34,34,34,34,171,34,-45,-46,-47,-48,-49,-50,34,192,-82,34,-90,-93,34,34,34,34,-45,34,34,-83,-85,-86,34,-104,34,-98,-96,-97,-147,-129,34,34,34,34,-84,-87,-89,-103,-95,-28,-146,34,-88,-27,]),'INTEGER':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,117,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,146,150,157,158,160,161,163,170,189,193,194,195,198,199,201,202,203,204,208,219,227,228,231,235,237,239,241,242,243,245,246,249,250,263,267,268,],[52,52,-2,-5,-6,-7,-8,-9,-10,-11,52,52,52,52,-53,-54,52,-3,-4,52,52,52,-117,-118,-119,-120,-121,-122,-123,-124,-125,52,-94,52,52,52,-126,-127,-128,52,52,169,52,-45,179,-46,-47,-48,-49,-50,52,52,52,52,52,52,-82,52,-90,-93,169,52,52,52,179,-45,169,169,-92,-83,-85,-86,52,-104,52,-98,-96,-97,-147,-129,169,52,52,52,179,-91,-84,-87,-89,-103,-95,-28,-146,52,-88,-27,]),'FLOAT':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,146,150,157,158,161,163,170,189,193,194,195,198,199,201,202,203,204,208,219,227,228,231,235,239,241,242,243,245,246,249,250,263,267,268,],[53,53,-2,-5,-6,-7,-8,-9,-10,-11,53,53,53,53,-53,-54,53,-3,-4,53,53,53,-117,-118,-119,-120,-121,-122,-123,-124,-125,53,-94,53,53,53,-126,-127,-128,53,53,53,53,-45,-46,-47,-48,-49,-50,53,53,53,53,53,53,-82,53,-90,-93,53,53,53,53,-45,53,53,-92,-83,-85,-86,53,-104,53,-98,-96,-97,-147,-129,53,53,53,53,-91,-84,-87,-89,-103,-95,-28,-146,53,-88,-27,]),'STRING':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,117,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,146,150,157,158,160,161,163,170,189,193,194,195,198,199,201,202,203,204,208,219,227,228,231,232,235,237,239,241,242,243,245,246,249,250,263,267,268,],[39,39,-2,-5,-6,-7,-8,-9,-10,-11,39,39,96,96,-53,-54,39,-3,-4,39,39,39,-117,-118,-119,-120,-121,-122,-123,-124,-125,39,-94,39,39,39,-126,-127,-128,96,96,168,96,-45,178,-46,-47,-48,-49,-50,96,39,39,39,39,39,-82,39,-90,-93,168,39,96,96,178,-45,168,168,-92,-83,-85,-86,39,-104,39,-98,-96,-97,-147,-129,168,96,96,262,96,178,-91,-84,-87,-89,-103,-95,-28,-146,96,-88,-27,]),'LEFT_PAREN':([2,3,4,6,7,8,9,10,11,12,28,30,31,34,35,37,38,40,41,42,43,44,45,47,48,49,50,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,89,93,101,106,107,108,109,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,146,150,156,157,158,161,163,170,171,189,192,193,194,195,197,198,199,201,202,203,204,208,219,222,227,228,231,235,239,241,242,243,245,246,249,250,263,267,268,],[35,35,-2,-5,-6,-7,-8,-9,-10,-11,77,77,83,-34,83,93,111,112,-35,123,125,126,127,132,-53,-54,-40,83,-3,-4,35,35,35,-117,-118,-119,-120,-121,-122,-123,-124,-125,83,-94,35,83,83,-126,-127,-128,146,150,-35,125,163,125,170,125,-45,-46,-47,-48,-49,-50,125,83,35,35,35,35,-82,35,-90,-93,125,83,-35,125,125,-45,125,125,231,-92,-41,-83,-85,-86,77,35,-104,35,-98,-96,-97,-147,-129,-35,125,125,125,125,-91,-84,-87,-89,-103,-95,-28,-146,125,-88,-27,]),'TRUE':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,146,150,157,158,161,163,170,189,193,194,195,198,199,201,202,203,204,208,219,227,228,231,235,239,241,242,243,245,246,249,250,263,267,268,],[57,57,-2,-5,-6,-7,-8,-9,-10,-11,57,57,57,57,-53,-54,57,-3,-4,57,57,57,-117,-118,-119,-120,-121,-122,-123,-124,-125,57,-94,57,57,57,-126,-127,-128,57,57,57,57,-45,-46,-47,-48,-49,-50,57,57,57,57,57,57,-82,57,-90,-93,57,57,57,57,-45,57,57,-92,-83,-85,-86,57,-104,57,-98,-96,-97,-147,-129,57,57,57,57,-91,-84,-87,-89,-103,-95,-28,-146,57,-88,-27,]),'FALSE':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,146,150,157,158,161,163,170,189,193,194,195,198,199,201,202,203,204,208,219,227,228,231,235,239,241,242,243,245,246,249,250,263,267,268,],[58,58,-2,-5,-6,-7,-8,-9,-10,-11,58,58,58,58,-53,-54,58,-3,-4,58,58,58,-117,-118,-119,-120,-121,-122,-123,-124,-125,58,-94,58,58,58,-126,-127,-128,58,58,58,58,-45,-46,-47,-48,-49,-50,58,58,58,58,58,58,-82,58,-90,-93,58,58,58,58,-45,58,58,-92,-83,-85,-86,58,-104,58,-98,-96,-97,-147,-129,58,58,58,58,-91,-84,-87,-89,-103,-95,-28,-146,58,-88,-27,]),'LOGICAL_NOT':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,146,150,157,158,161,163,170,189,193,194,195,198,199,201,202,203,204,208,219,227,228,231,235,239,241,242,243,245,246,249,250,263,267,268,],[60,60,-2,-5,-6,-7,-8,-9,-10,-11,60,60,60,60,-53,-54,60,-3,-4,60,60,60,-117,-118,-119,-120,-121,-122,-123,-124,-125,60,-94,60,60,60,-126,-127,-128,60,60,60,60,-45,-46,-47,-48,-49,-50,60,60,60,60,60,60,-82,60,-90,-93,60,60,60,60,-45,60,60,-92,-83,-85,-86,60,-104,60,-98,-96,-97,-147,-129,60,60,60,60,-91,-84,-87,-89,-103,-95,-28,-146,60,-88,-27,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,62,63,80,138,140,141,193,194,195,199,202,203,204,208,241,242,243,245,246,249,250,267,268,],[61,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,-90,-93,-83,-85,-86,-104,-98,-96,-97,-147,-84,-87,-89,-103,-95,-28,-146,-88,-27,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,149,193,194,195,198,199,202,203,204,207,208,209,210,211,212,213,241,242,243,245,246,249,250,251,252,267,268,269,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-94,-82,199,-90,-93,208,-83,-85,-86,245,-104,-98,-96,-97,250,-147,-148,-150,-151,-152,-153,-84,-87,-89,-103,-95,-28,-146,-149,-154,-88,-27,-155,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,94,95,96,97,98,99,100,101,102,103,104,105,114,115,124,132,134,135,136,137,143,145,147,148,162,174,175,181,184,185,186,187,188,189,190,192,199,200,218,220,221,223,226,233,234,236,238,239,245,253,254,255,259,260,264,266,270,271,273,277,279,],[63,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-108,81,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,81,-111,-52,-55,-58,-59,-60,-61,-62,-111,-64,-65,-66,-67,-43,-44,-31,189,-113,-69,-70,-116,202,-114,-81,-115,-68,-42,-132,-33,-72,-73,-74,-75,239,-92,-99,-41,-104,202,-51,-56,-57,-63,-134,-36,-141,-32,-145,-91,-103,269,-141,-133,-30,-159,-142,-100,-29,-160,-143,-144,-37,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,81,82,90,91,94,95,96,97,98,99,100,101,102,103,104,105,114,115,123,124,134,135,136,137,142,144,145,146,147,148,151,152,153,154,155,156,162,165,166,168,169,170,173,174,175,180,181,183,184,185,186,187,192,199,205,218,220,221,223,225,226,229,231,233,234,236,238,245,247,254,255,256,257,259,260,261,264,270,271,273,274,275,276,277,279,280,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,143,-111,147,148,-52,-55,-58,-59,-60,-61,-62,-111,-64,-65,-66,-67,-43,-44,181,-31,-113,-69,-70,-116,200,-101,-114,206,-81,-115,218,219,147,-130,-131,-111,-68,-135,-137,-58,-77,230,233,-42,-132,236,-33,238,-72,-73,-74,-75,-41,-104,248,-51,-56,-57,-63,255,-134,258,260,-36,-141,-32,-145,-103,-102,-141,-133,-136,-138,-30,-159,271,-142,-29,-160,-143,277,279,-38,-144,-37,-39,]),'COMMA':([13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,82,91,94,95,96,97,98,99,100,101,102,103,104,105,114,115,124,134,135,136,137,142,144,145,147,148,151,153,156,162,164,165,166,168,169,172,174,175,180,181,184,185,186,187,188,190,192,199,205,218,220,221,223,225,226,229,233,234,236,238,245,247,254,255,256,257,259,260,261,262,264,266,270,271,273,275,276,277,279,280,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-111,-79,158,-55,-58,-59,-60,-61,-62,-111,-64,-65,-66,-67,-43,-44,158,-113,-69,-70,-116,201,-101,-114,-81,-115,158,-59,-111,-68,227,-135,-137,-58,-77,232,-42,-132,158,-33,-72,-73,-74,-75,240,-99,-41,-104,227,-51,-56,-57,-63,227,-134,227,-36,-141,-32,-145,-103,-102,-141,-133,-136,-138,-30,-159,158,272,-142,-100,-29,-160,-143,278,-38,-144,-37,-39,]),'PLUS':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[64,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,64,64,-79,-80,64,-111,-79,-69,-70,64,-79,-81,-115,64,-111,-80,-77,-72,-73,-74,-75,-41,]),'MINUS':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[65,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,65,65,-79,-80,65,-111,-79,-69,-70,65,-79,-81,-115,65,-111,-80,-77,-72,-73,-74,-75,-41,]),'EQUAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[67,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,67,67,-79,-80,67,-111,-79,-69,-70,67,-79,-81,-115,67,-111,-80,-77,-72,-73,-74,-75,-41,]),'NOT_EQUAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[68,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,68,68,-79,-80,68,-111,-79,-69,-70,68,-79,-81,-115,68,-111,-80,-77,-72,-73,-74,-75,-41,]),'LESS_THAN':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[69,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,69,69,-79,-80,69,-111,-79,-69,-70,69,-79,-81,-115,69,-111,-80,-77,-72,-73,-74,-75,-41,]),'GREATER_THAN':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[70,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,70,70,-79,-80,70,-111,-79,-69,-70,70,-79,-81,-115,70,-111,-80,-77,-72,-73,-74,-75,-41,]),'LESS_EQUAL':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[71,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,71,71,-79,-80,71,-111,-79,-69,-70,71,-79,-81,-115,71,-111,-80,-77,-72,-73,-74,-75,-41,]),'GREATER_EQUAL':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[72,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,72,72,-79,-80,72,-111,-79,-69,-70,72,-79,-81,-115,72,-111,-80,-77,-72,-73,-74,-75,-41,]),'IDENTICAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[73,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,73,73,-79,-80,73,-111,-79,-69,-70,73,-79,-81,-115,73,-111,-80,-77,-72,-73,-74,-75,-41,]),'NOT_IDENTICAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[74,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,74,74,-79,-80,74,-111,-79,-69,-70,74,-79,-81,-115,74,-111,-80,-77,-72,-73,-74,-75,-41,]),'DIFFERENT':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[75,-108,-79,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,75,75,-79,-80,75,-111,-79,-69,-70,75,-79,-81,-115,75,-111,-80,-77,-72,-73,-74,-75,-41,]),'LOGICAL_AND':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,101,134,135,136,137,145,147,148,156,184,185,186,187,192,],[-108,86,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,86,-111,86,-111,86,-69,-70,-116,86,-81,-115,-111,-72,-73,-74,-75,-41,]),'LOGICAL_OR':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,101,134,135,136,137,145,147,148,156,184,185,186,187,192,],[-108,87,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,87,-111,87,-111,87,-69,-70,-116,87,-81,-115,-111,-72,-73,-74,-75,-41,]),'LOGICAL_XOR':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,101,134,135,136,137,145,147,148,156,184,185,186,187,192,],[-108,88,-80,-111,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,88,-111,88,-111,88,-69,-70,-116,88,-81,-115,-111,-72,-73,-74,-75,-41,]),'TIMES':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-108,-79,-80,-111,128,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,-79,-80,-111,-79,128,128,-116,-79,-81,-115,-111,-80,-77,-72,-73,-74,-75,-41,]),'DIVIDE':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-108,-79,-80,-111,129,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,-79,-80,-111,-79,129,129,-116,-79,-81,-115,-111,-80,-77,-72,-73,-74,-75,-41,]),'MOD':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-108,-79,-80,-111,130,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,-79,-80,-111,-79,130,130,-116,-79,-81,-115,-111,-80,-77,-72,-73,-74,-75,-41,]),'POWER':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-108,-79,-80,-111,131,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-79,-111,-79,-80,-111,-79,131,131,-116,-79,-81,-115,-111,-80,-77,-72,-73,-74,-75,-41,]),'DOT':([29,32,39,46,50,51,52,53,54,55,56,57,58,59,82,91,94,95,96,97,98,99,100,101,102,103,104,105,114,115,124,134,135,136,137,145,147,148,151,153,156,162,174,180,181,184,185,186,187,192,199,220,221,223,226,233,236,245,254,255,259,260,261,270,271,],[-108,-79,-80,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-111,-79,157,-55,-58,-59,-60,-61,-62,-111,-64,-65,-66,-67,-43,-44,157,-113,-69,-70,-116,-114,-81,-115,157,-59,-111,-68,-42,157,-33,-72,-73,-74,-75,-41,-104,-56,-57,-63,-134,-36,-32,-103,-141,-133,-30,-159,157,-29,-160,]),'RIGHT_BRACKET':([29,32,39,46,50,51,52,53,54,55,56,57,58,59,82,96,97,98,99,100,101,102,103,104,105,114,115,117,134,135,136,137,145,147,148,162,164,165,166,168,169,174,176,178,179,181,184,185,186,187,192,199,223,224,226,233,236,245,254,255,256,257,259,260,265,270,271,],[-108,-79,-80,-71,-40,-76,-77,-78,-105,-106,-107,-109,-110,-112,-111,-58,-59,-60,-61,-62,-111,-64,-65,-66,-67,-43,-44,177,-113,-69,-70,-116,-114,-81,-115,-68,226,-135,-137,-58,-77,-42,234,-139,-140,-33,-72,-73,-74,-75,-41,-104,-63,254,-134,-36,-32,-103,-141,-133,-136,-138,-30,-159,274,-29,-160,]),'ARRAY':([37,43,48,49,93,106,108,113,116,118,119,120,121,122,123,146,157,158,161,163,170,219,227,228,231,235,263,],[107,107,-53,-54,107,107,107,107,107,-46,-47,-48,-49,-50,107,107,107,107,-45,107,107,-129,107,107,107,107,107,]),'LEFT_BRACKET':([37,41,43,48,49,50,93,101,106,108,113,116,118,119,120,121,122,123,146,156,157,158,161,163,170,182,192,219,227,228,231,235,263,],[108,117,108,-53,-54,-40,108,160,108,108,108,108,-46,-47,-48,-49,-50,108,108,160,108,108,-45,108,108,237,-41,-129,108,108,108,108,108,]),'NEW':([37,43,48,49,93,106,108,113,116,118,119,120,121,122,123,146,157,158,161,163,170,219,227,228,231,235,263,],[110,110,-53,-54,110,110,110,110,-45,-46,-47,-48,-49,-50,110,110,110,110,-45,110,110,-129,110,110,110,110,110,]),'PLUS_PLUS':([41,50,101,156,191,192,],[114,-40,114,114,114,-41,]),'MINUS_MINUS':([41,50,101,156,191,192,],[115,-40,115,115,115,-41,]),'EQUALS':([41,50,101,156,177,191,192,234,],[116,-40,161,161,235,161,-41,263,]),'PLUS_EQUALS':([41,50,101,156,191,192,],[118,-40,118,118,118,-41,]),'MINUS_EQUALS':([41,50,101,156,191,192,],[119,-40,119,119,119,-41,]),'TIMES_EQUALS':([41,50,101,156,191,192,],[120,-40,120,120,120,-41,]),'DIVIDE_EQUALS':([41,50,101,156,191,192,],[121,-40,121,121,121,-41,]),'MOD_EQUALS':([41,50,101,156,191,192,],[122,-40,122,122,122,-41,]),'CALL':([50,101,156,192,],[133,159,159,-41,]),'LEFT_BRACE':([76,78,92,143,148,196,200,206,230,244,248,258,],[139,139,149,139,-115,139,139,139,139,139,139,139,]),'INT_TYPE':([93,125,150,],[154,154,154,]),'FLOAT_TYPE':([93,125,150,],[155,155,155,]),'STDIN':([111,112,],[172,173,]),'ELSE':([138,193,195,199,242,245,267,],[196,196,-86,-104,-87,-103,-88,]),'ELSEIF':([138,193,195,199,242,245,267,],[197,197,-86,-104,-87,-103,-88,]),'PUBLIC':([149,199,207,209,210,211,212,213,245,249,251,252,268,269,],[215,-104,215,-148,-150,-151,-152,-153,-103,-28,-149,-154,-27,-155,]),'PRIVATE':([149,199,207,209,210,211,212,213,245,249,251,252,268,269,],[216,-104,216,-148,-150,-151,-152,-153,-103,-28,-149,-154,-27,-155,]),'PROTECTED':([149,199,207,209,210,211,212,213,245,249,251,252,268,269,],[217,-104,217,-148,-150,-151,-152,-153,-103,-28,-149,-154,-27,-155,]),'KEY_VALUE':([167,168,169,],[228,-139,-140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,139,],[3,198,]),'statement2':([2,3,139,198,],[4,62,4,62,]),'statement':([2,3,81,139,198,201,],[5,5,144,5,5,247,]),'if_statement':([2,3,139,198,],[6,6,6,6,]),'while_statement':([2,3,139,198,],[7,7,7,7,]),'for_statement':([2,3,139,198,],[8,8,8,8,]),'function_statement':([2,3,139,198,214,],[9,9,9,9,252,]),'class_declaration':([2,3,139,198,],[12,12,12,12,]),'print_statement':([2,3,81,139,198,201,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,81,139,198,201,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,37,43,81,93,106,108,113,123,139,146,157,158,163,170,198,201,227,228,231,235,263,],[15,15,104,104,15,104,104,104,104,104,15,104,104,104,104,104,15,15,104,104,104,104,104,]),'assignment_statement':([2,3,37,43,81,93,106,108,113,123,132,139,146,157,158,163,170,198,201,227,228,231,235,240,263,],[16,16,103,103,16,103,103,103,103,103,190,16,103,103,103,103,103,16,16,103,103,103,103,266,103,]),'array_declaration_statement':([2,3,81,139,198,201,],[17,17,17,17,17,17,]),'function_call':([2,3,37,43,81,93,106,108,113,123,139,146,157,158,159,163,170,198,201,227,228,231,235,263,],[20,20,100,100,20,100,100,100,100,100,20,100,100,100,223,100,100,20,20,100,100,100,100,100,]),'return_statement':([2,3,81,139,198,201,],[21,21,21,21,21,21,]),'array_indexing':([2,3,37,43,81,93,106,108,113,123,139,146,157,158,163,170,198,201,227,228,231,235,263,],[22,22,99,99,22,99,99,99,99,99,22,99,99,99,99,99,22,22,99,99,99,99,99,]),'array_add_element':([2,3,81,139,198,201,],[23,23,23,23,23,23,]),'array_modify_element':([2,3,81,139,198,201,],[24,24,24,24,24,24,]),'array_remove_element':([2,3,81,139,198,201,],[25,25,25,25,25,25,]),'array_count_elements':([2,3,81,139,198,201,],[26,26,26,26,26,26,]),'expression':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[27,27,84,90,97,97,84,84,84,137,84,27,90,84,153,97,97,97,97,90,84,84,84,84,27,97,90,97,97,97,97,27,27,97,97,97,97,97,]),'parenthesized_condition':([2,3,28,30,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,197,198,201,227,228,231,235,263,],[29,29,76,78,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,244,29,29,29,29,29,29,29,]),'for_part1':([2,3,139,198,],[31,31,31,31,]),'condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[32,32,79,91,32,32,134,32,32,32,91,32,91,145,91,32,32,32,32,91,32,32,32,32,32,32,91,32,32,32,32,32,32,32,32,32,32,32,]),'print_function':([2,3,81,139,198,201,],[37,37,37,37,37,37,]),'variable':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,126,127,128,129,130,131,132,139,146,150,157,158,159,163,170,198,201,214,227,228,231,235,240,263,272,278,],[41,41,82,82,101,101,82,82,82,82,82,41,82,82,156,101,101,101,101,82,182,183,82,82,82,82,191,41,101,82,101,101,222,101,101,41,41,253,101,101,101,101,191,101,276,280,]),'function_name':([2,3,37,43,81,93,106,108,113,123,139,146,157,158,159,163,170,198,201,227,228,231,235,263,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'term':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[46,46,46,46,46,46,46,135,136,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'factor':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,184,185,186,187,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'simple_condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'negated_condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'complex_condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'relational_expression':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,146,150,157,158,163,170,198,201,227,228,231,235,263,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'relational_operator':([27,84,90,97,137,153,],[66,66,66,66,66,66,]),'for_part3':([31,79,],[80,141,]),'logical_operator':([32,79,91,134,145,],[85,85,85,85,85,]),'arguments':([37,43,93,123,231,],[94,124,151,180,261,]),'argument':([37,43,93,106,108,113,123,146,157,158,163,170,227,228,231,235,263,],[95,95,95,162,166,174,95,166,220,221,166,166,166,257,95,264,273,]),'array':([37,43,93,106,108,113,116,123,146,157,158,163,170,227,228,231,235,263,],[98,98,98,98,98,98,175,98,98,98,98,98,98,98,98,98,98,98,]),'anonymous_function':([37,43,93,106,108,113,123,146,157,158,163,170,227,228,231,235,263,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'object_creation':([37,43,93,106,108,113,123,146,157,158,163,170,227,228,231,235,263,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'casting':([37,43,93,106,108,113,123,146,157,158,163,170,227,228,231,235,263,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'assignment_operator':([41,101,156,191,],[113,113,113,113,]),'block':([76,78,143,196,200,206,230,244,248,258,],[138,140,204,243,204,249,259,267,268,270,]),'statement_list':([81,],[142,]),'casting_type':([93,125,150,],[152,152,152,]),'array_elements':([108,146,163,170,],[164,205,225,229,]),'array_argument':([108,146,163,170,227,],[165,165,165,165,256,]),'clave':([108,117,146,160,163,170,227,237,],[167,176,167,224,167,167,167,265,]),'assignment_list':([132,],[188,]),'else_if_extended':([138,],[193,]),'if_part3':([138,193,],[194,241,]),'if_part2':([138,193,],[195,242,]),'for_part4':([143,200,],[203,246,]),'class_statements':([149,],[207,]),'class_statement':([149,207,],[209,251,]),'method_declaration':([149,207,],[210,210,]),'property_declaration':([149,207,],[211,211,]),'visibility_operator':([149,207,],[214,214,]),'variable_list':([272,],[275,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',21),
  ('statements -> statement2','statements',1,'p_statements','parser.py',26),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',27),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',35),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',36),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',37),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',38),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',39),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',40),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',41),
  ('statement2 -> class_declaration','statement2',1,'p_statement2','parser.py',42),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',46),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',47),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',48),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',49),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',50),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',51),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',52),
  ('statement -> function_call','statement',1,'p_statement','parser.py',53),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',54),
  ('statement -> array_indexing','statement',1,'p_statement','parser.py',55),
  ('statement -> array_add_element','statement',1,'p_statement','parser.py',56),
  ('statement -> array_modify_element','statement',1,'p_statement','parser.py',57),
  ('statement -> array_remove_element','statement',1,'p_statement','parser.py',58),
  ('statement -> array_count_elements','statement',1,'p_statement','parser.py',59),
  ('statement -> expression','statement',1,'p_statement','parser.py',60),
  ('function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',66),
  ('function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block','function_statement',5,'p_function_statement','parser.py',67),
  ('anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block','anonymous_function',5,'p_anonymous_function','parser.py',75),
  ('anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block','anonymous_function',4,'p_anonymous_function','parser.py',76),
  ('return_statement -> RETURN arguments','return_statement',2,'p_return_statement','parser.py',83),
  ('function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN','function_call',4,'p_function_call','parser.py',88),
  ('function_call -> function_name LEFT_PAREN RIGHT_PAREN','function_call',3,'p_function_call','parser.py',89),
  ('function_name -> NAME','function_name',1,'p_function_name','parser.py',96),
  ('function_name -> variable','function_name',1,'p_function_name','parser.py',97),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',103),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',108),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',112),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',113),
  ('variable -> ID','variable',1,'p_variable','parser.py',122),
  ('variable -> ID CALL NAME','variable',3,'p_variable','parser.py',123),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',131),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',132),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',133),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',141),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',142),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',143),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',144),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',145),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',146),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',151),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',152),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',159),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',160),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',164),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',165),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',166),
  ('argument -> STRING','argument',1,'p_argument','parser.py',174),
  ('argument -> expression','argument',1,'p_argument','parser.py',175),
  ('argument -> array','argument',1,'p_argument','parser.py',176),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',177),
  ('argument -> function_call','argument',1,'p_argument','parser.py',178),
  ('argument -> variable CALL function_call','argument',3,'p_argument','parser.py',179),
  ('argument -> anonymous_function','argument',1,'p_argument','parser.py',180),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',181),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',182),
  ('argument -> object_creation','argument',1,'p_argument','parser.py',183),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',184),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',194),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',195),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',196),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',205),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',206),
  ('term -> term MOD factor','term',3,'p_term','parser.py',207),
  ('term -> term POWER factor','term',3,'p_term','parser.py',208),
  ('term -> factor','term',1,'p_term','parser.py',209),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',217),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',218),
  ('factor -> condition','factor',1,'p_factor','parser.py',219),
  ('factor -> STRING','factor',1,'p_factor','parser.py',220),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',221),
  ('if_statement -> IF parenthesized_condition block','if_statement',3,'p_if_statement','parser.py',238),
  ('if_statement -> IF parenthesized_condition block else_if_extended','if_statement',4,'p_if_statement','parser.py',239),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',240),
  ('if_statement -> IF parenthesized_condition block if_part3','if_statement',4,'p_if_statement','parser.py',241),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',250),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',251),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',259),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',263),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',268),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',273),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',274),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',281),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',282),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',289),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',290),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',297),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',298),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',302),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',303),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',311),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',312),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',321),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',322),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',330),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',331),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',332),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',333),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',337),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',338),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',339),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',340),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',344),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',348),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',352),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',356),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',360),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',361),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',362),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',363),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',364),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',365),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',366),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',367),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',368),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',372),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',373),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',374),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',379),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',383),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',384),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',389),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',393),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',394),
  ('array_elements -> array_argument','array_elements',1,'p_array_elements','parser.py',401),
  ('array_elements -> array_elements COMMA array_argument','array_elements',3,'p_array_elements','parser.py',402),
  ('array_argument -> argument','array_argument',1,'p_array_argument','parser.py',411),
  ('array_argument -> clave KEY_VALUE argument','array_argument',3,'p_array_argument','parser.py',412),
  ('clave -> STRING','clave',1,'p_clave','parser.py',419),
  ('clave -> INTEGER','clave',1,'p_clave','parser.py',420),
  ('array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',425),
  ('array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument','array_add_element',5,'p_array_add_element','parser.py',429),
  ('array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument','array_modify_element',6,'p_array_modify_element','parser.py',433),
  ('array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN','array_remove_element',7,'p_array_remove_element','parser.py',437),
  ('array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN','array_count_elements',4,'p_array_count_elements','parser.py',441),
  ('class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE','class_declaration',5,'p_class_declaration','parser.py',446),
  ('class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE','class_declaration',4,'p_class_declaration','parser.py',447),
  ('class_statements -> class_statement','class_statements',1,'p_class_statements','parser.py',454),
  ('class_statements -> class_statements class_statement','class_statements',2,'p_class_statements','parser.py',455),
  ('class_statement -> method_declaration','class_statement',1,'p_class_statement','parser.py',463),
  ('class_statement -> property_declaration','class_statement',1,'p_class_statement','parser.py',464),
  ('class_statement -> ONE_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',465),
  ('class_statement -> MULTI_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',466),
  ('method_declaration -> visibility_operator function_statement','method_declaration',2,'p_method_declaration','parser.py',470),
  ('property_declaration -> visibility_operator variable SEMICOLON','property_declaration',3,'p_property_declaration','parser.py',474),
  ('visibility_operator -> PUBLIC','visibility_operator',1,'p_visibility_operator','parser.py',478),
  ('visibility_operator -> PRIVATE','visibility_operator',1,'p_visibility_operator','parser.py',479),
  ('visibility_operator -> PROTECTED','visibility_operator',1,'p_visibility_operator','parser.py',480),
  ('object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN','object_creation',4,'p_object_creation','parser.py',484),
  ('object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN','object_creation',5,'p_object_creation','parser.py',485),
]
