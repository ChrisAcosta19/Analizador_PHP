
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROMprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENT\n                  | class_declarationstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | return_statementfunction_statement : FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION NAME LEFT_PAREN RIGHT_PAREN blockanonymous_function : FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION LEFT_PAREN RIGHT_PAREN blockreturn_statement : RETURN argumentsfunction_call : function_name LEFT_PAREN arguments RIGHT_PAREN\n                     | function_name LEFT_PAREN RIGHT_PARENfunction_name : NAME\n                     | variablefgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : ID\n                | ID CALL NAMEassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | assignment_statement\n                | variable CALL function_call\n                | array\n                | function_call\n                | anonymous_function\n                | fgets_statement\n                | array_indexing\n                | casting argument\n                | object_creationexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block\n                    | IF parenthesized_condition block else_if_extended\n                    | IF parenthesized_condition block else_if_extended if_part3\n                    | IF parenthesized_condition block if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition blockif_part3 : ELSE blockwhile_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : array_argument\n                      | array_elements COMMA array_argumentarray_argument : argument\n                      | clave KEY_VALUE argumentclave : STRING\n             | INTEGERarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKETclass_declaration : CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE\n                         | CLASS NAME LEFT_BRACE RIGHT_BRACEclass_statements : class_statement\n                        | class_statements class_statementclass_statement : method_declaration\n                       | property_declaration\n                       | ONE_LINE_COMMENT\n                       | MULTI_LINE_COMMENTmethod_declaration : visibility_operator function_statementproperty_declaration : visibility_operator variable SEMICOLONvisibility_operator : PUBLIC\n                           | PRIVATE\n                           | PROTECTEDobject_creation : NEW NAME LEFT_PAREN RIGHT_PAREN\n                       | NEW NAME LEFT_PAREN arguments RIGHT_PAREN'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,38,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,39,40,45,99,100,102,103,128,162,163,164,167,168,173,174,175,185,186,187,188,189,190,191,215,216,217,219,220,223,224,225,226,238,239,240,],[10,10,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,10,-81,-84,190,-74,-76,-77,10,-95,-89,-87,-88,190,-134,-135,-137,-138,-139,-140,-75,-78,-80,-94,-86,-22,-133,-136,-141,-79,-21,-142,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,39,40,45,99,100,102,103,128,162,163,164,167,168,173,174,175,185,186,187,188,189,190,191,215,216,217,219,220,223,224,225,226,238,239,240,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,11,-81,-84,191,-74,-76,-77,11,-95,-89,-87,-88,191,-134,-135,-137,-138,-139,-140,-75,-78,-80,-94,-86,-22,-133,-136,-141,-79,-21,-142,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,39,40,45,50,99,100,102,103,162,163,164,167,168,172,173,174,175,186,215,216,217,219,220,223,224,238,239,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,18,-73,18,-81,-84,-74,-76,-77,18,-95,18,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,39,40,45,50,99,100,102,103,162,163,164,167,168,172,173,174,175,186,215,216,217,219,220,223,224,238,239,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,19,-73,19,-81,-84,-74,-76,-77,19,-95,19,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'IF':([2,3,4,6,7,8,9,10,11,12,39,40,45,99,100,102,103,162,163,164,167,168,173,174,175,186,215,216,217,219,220,223,224,238,239,],[22,22,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,22,-81,-84,-74,-76,-77,22,-95,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,39,40,45,99,100,102,103,162,163,164,167,168,173,174,175,186,215,216,217,219,220,223,224,238,239,],[23,23,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,23,-81,-84,-74,-76,-77,23,-95,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,28,33,35,36,39,40,45,64,76,79,85,88,89,90,91,92,93,94,99,100,102,103,127,136,137,140,142,149,162,163,164,167,168,173,174,175,186,192,193,194,195,197,205,206,209,215,216,217,219,220,223,224,238,239,],[25,25,-2,-5,-6,-7,-8,-9,-10,-11,80,80,-47,-48,-3,-4,-85,80,80,80,80,-39,-40,-41,-42,-43,-44,80,-73,25,-81,-84,80,80,80,-39,80,80,-74,-76,-77,25,-95,-89,-87,-88,-134,25,-143,-144,-145,-120,80,80,80,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'CLASS':([2,3,4,6,7,8,9,10,11,12,39,40,45,99,100,102,103,162,163,164,167,168,173,174,175,186,215,216,217,219,220,223,224,238,239,],[27,27,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,27,-81,-84,-74,-76,-77,27,-95,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,39,40,45,50,99,100,102,103,162,163,164,167,168,172,173,174,175,186,215,216,217,219,220,223,224,238,239,],[29,29,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,29,-73,29,-81,-84,-74,-76,-77,29,-95,29,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,28,33,35,36,39,40,45,50,64,76,79,85,88,89,90,91,92,93,94,99,100,102,103,127,136,137,140,142,149,162,163,164,167,168,172,173,174,175,186,197,205,206,209,215,216,217,219,220,223,224,238,239,],[30,30,-2,-5,-6,-7,-8,-9,-10,-11,30,30,-47,-48,-3,-4,-85,30,30,30,30,30,-39,-40,-41,-42,-43,-44,30,-73,30,-81,-84,30,30,30,-39,30,30,-74,-76,-77,30,-95,30,-89,-87,-88,-134,-120,30,30,30,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,39,40,45,50,99,100,102,103,162,163,164,167,168,172,173,174,175,186,215,216,217,219,220,223,224,238,239,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,33,-73,33,-81,-84,-74,-76,-77,33,-95,33,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'FOR':([2,3,4,6,7,8,9,10,11,12,39,40,45,99,100,102,103,162,163,164,167,168,173,174,175,186,215,216,217,219,220,223,224,238,239,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,34,-81,-84,-74,-76,-77,34,-95,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,39,40,45,50,99,100,102,103,162,163,164,167,168,172,173,174,175,186,215,216,217,219,220,223,224,238,239,],[35,35,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,35,-73,35,-81,-84,-74,-76,-77,35,-95,35,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,39,40,45,50,99,100,102,103,162,163,164,167,168,172,173,174,175,186,215,216,217,219,220,223,224,238,239,],[36,36,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,36,-73,36,-81,-84,-74,-76,-77,36,-95,36,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'ID':([2,3,4,6,7,8,9,10,11,12,24,28,33,35,36,39,40,42,45,50,55,56,64,76,79,85,88,89,90,91,92,93,94,96,97,99,100,102,103,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,136,137,138,140,142,149,158,162,163,164,167,168,172,173,174,175,178,186,192,193,194,195,197,205,206,209,213,214,215,216,217,219,220,223,224,238,239,243,246,],[37,37,-2,-5,-6,-7,-8,-9,-10,-11,37,37,37,-47,-48,-3,-4,37,-85,37,37,37,37,37,37,37,-39,-40,-41,-42,-43,-44,37,37,37,-73,37,-81,-84,37,-117,-118,-119,37,37,37,-108,-109,-110,-111,-112,-113,-114,-115,-116,37,37,37,37,37,37,37,-39,37,37,-83,-74,-76,-77,37,-95,37,-89,-87,-88,37,-134,37,-143,-144,-145,-120,37,37,37,-82,37,-75,-78,-80,-94,-86,-22,-133,-79,-21,37,37,]),'NAME':([2,3,4,6,7,8,9,10,11,12,25,27,28,33,35,36,39,40,45,50,64,76,79,81,85,88,89,90,91,92,93,94,98,99,100,102,103,127,136,137,138,140,142,149,162,163,164,167,168,172,173,174,175,186,197,205,206,209,215,216,217,219,220,223,224,238,239,],[26,26,-2,-5,-6,-7,-8,-9,-10,-11,62,63,26,26,-47,-48,-3,-4,-85,26,26,26,26,150,26,-39,-40,-41,-42,-43,-44,26,161,-73,26,-81,-84,26,26,26,26,-39,26,26,-74,-76,-77,26,-95,26,-89,-87,-88,-134,-120,26,26,26,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,39,40,45,99,102,103,162,163,164,168,173,174,175,186,215,216,217,219,220,223,224,238,239,],[38,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,-81,-84,-74,-76,-77,-95,-89,-87,-88,-134,-75,-78,-80,-94,-86,-22,-133,-79,-21,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,39,40,45,99,100,102,103,128,162,163,164,167,168,173,174,175,185,186,187,188,189,190,191,215,216,217,219,220,223,224,225,226,238,239,240,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-85,-73,168,-81,-84,186,-74,-76,-77,219,-95,-89,-87,-88,224,-134,-135,-137,-138,-139,-140,-75,-78,-80,-94,-86,-22,-133,-136,-141,-79,-21,-142,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,21,24,37,44,46,47,48,49,51,52,53,54,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,77,82,86,87,95,97,109,111,141,153,154,156,157,158,159,161,168,169,170,171,176,177,179,180,181,182,196,198,199,201,204,211,212,213,219,227,228,229,233,234,237,241,242,247,],[40,-12,-13,-14,-15,-16,-17,-18,-19,-20,50,-34,50,-96,-97,-98,-99,-100,-101,-102,-103,-65,-68,-69,-70,-46,-49,-52,-53,-54,-102,-57,-56,-58,-59,-60,-62,-71,-37,-38,-25,158,173,-104,-61,-36,-123,-27,213,-83,-90,-35,-95,-106,-105,173,-72,-107,-63,-64,-66,-67,-45,-50,-51,-55,-125,-30,-26,-82,-94,240,-132,-124,-24,-146,-91,-23,-147,-31,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,21,37,46,47,48,49,50,51,52,53,54,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,77,82,86,87,94,95,101,108,110,111,112,127,130,131,132,133,134,135,141,144,145,147,148,149,152,153,154,155,156,161,168,169,170,176,177,179,180,181,182,183,196,198,199,201,203,204,207,209,211,212,219,221,228,229,230,231,233,234,235,241,242,244,245,247,248,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-34,-96,-97,-98,-99,109,-100,-101,-102,-103,-65,-68,-69,-70,-46,-49,-52,-53,-54,-102,-57,-56,-58,-59,-60,-62,-71,-37,-38,156,-25,169,171,-92,-104,176,184,196,197,176,-121,-122,-102,-61,-126,-128,-52,-69,208,211,-36,-123,212,-27,-35,-95,-106,-105,-72,-107,-63,-64,-66,-67,222,-45,-50,-51,-55,229,-125,232,234,-30,-26,-94,-93,-132,-124,-127,-129,-24,-146,242,-23,-147,247,-32,-31,-33,]),'COMMA':([13,14,15,16,17,18,19,20,21,37,46,47,48,49,51,52,53,54,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,77,82,86,87,95,101,108,110,111,130,132,135,141,143,144,145,147,148,151,153,154,155,156,157,159,161,168,169,170,176,177,179,180,181,182,183,196,198,199,201,203,204,207,211,212,219,221,228,229,230,231,233,234,235,236,237,241,242,244,245,247,248,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-34,-96,-97,-98,-99,-100,-101,-102,-103,-65,-68,-69,-70,137,-49,-52,-53,-54,-102,-57,-56,-58,-59,-60,-62,-71,-37,-38,137,-71,172,-92,-104,137,-53,-102,-61,205,-126,-128,-52,-69,210,-36,-123,137,-27,214,-90,-35,-95,-106,-105,-72,-107,-63,-64,-66,-67,205,-45,-50,-51,-55,205,-125,205,-30,-26,-94,-93,-132,-124,-127,-129,-24,-146,137,243,-91,-23,-147,246,-32,-31,-33,]),'LEFT_PAREN':([22,23,24,26,28,29,30,31,32,33,34,35,36,37,42,55,56,62,64,70,76,78,79,80,85,88,89,90,91,92,93,94,96,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,135,136,137,140,142,149,150,158,161,166,178,197,200,205,206,209,213,],[42,42,56,-28,64,83,84,-29,94,96,97,-47,-48,-34,56,56,56,127,129,-29,96,142,96,149,96,-39,-40,-41,-42,-43,-44,96,56,56,-117,-118,-119,178,178,178,-108,-109,-110,-111,-112,-113,-114,-115,-116,178,178,96,56,-29,96,96,-39,96,96,209,-83,-35,42,56,-120,-29,96,96,96,-82,]),'TRUE':([24,28,33,35,36,42,55,56,64,76,79,85,88,89,90,91,92,93,94,96,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,136,137,140,142,149,158,178,197,205,206,209,213,],[51,51,51,-47,-48,51,51,51,51,51,51,51,-39,-40,-41,-42,-43,-44,51,51,51,-117,-118,-119,51,51,51,-108,-109,-110,-111,-112,-113,-114,-115,-116,51,51,51,51,51,51,-39,51,51,-83,51,-120,51,51,51,-82,]),'FALSE':([24,28,33,35,36,42,55,56,64,76,79,85,88,89,90,91,92,93,94,96,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,136,137,140,142,149,158,178,197,205,206,209,213,],[52,52,52,-47,-48,52,52,52,52,52,52,52,-39,-40,-41,-42,-43,-44,52,52,52,-117,-118,-119,52,52,52,-108,-109,-110,-111,-112,-113,-114,-115,-116,52,52,52,52,52,52,-39,52,52,-83,52,-120,52,52,52,-82,]),'LOGICAL_NOT':([24,28,33,35,36,42,55,56,64,76,79,85,88,89,90,91,92,93,94,96,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,136,137,140,142,149,158,178,197,205,206,209,213,],[55,55,55,-47,-48,55,55,55,55,55,55,55,-39,-40,-41,-42,-43,-44,55,55,55,-117,-118,-119,55,55,55,-108,-109,-110,-111,-112,-113,-114,-115,-116,55,55,55,55,55,55,-39,55,55,-83,55,-120,55,55,55,-82,]),'INTEGER':([24,28,33,35,36,42,55,56,64,76,79,85,88,89,90,91,92,93,94,96,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,136,137,139,140,142,149,158,178,197,205,206,209,213,],[60,60,60,-47,-48,60,60,60,60,60,148,60,-39,-40,-41,-42,-43,-44,60,60,60,-117,-118,-119,60,60,60,-108,-109,-110,-111,-112,-113,-114,-115,-116,60,60,148,60,60,60,202,-39,148,148,-83,60,-120,148,60,60,-82,]),'FLOAT':([24,28,33,35,36,42,55,56,64,76,79,85,88,89,90,91,92,93,94,96,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,136,137,140,142,149,158,178,197,205,206,209,213,],[61,61,61,-47,-48,61,61,61,61,61,61,61,-39,-40,-41,-42,-43,-44,61,61,61,-117,-118,-119,61,61,61,-108,-109,-110,-111,-112,-113,-114,-115,-116,61,61,61,61,61,61,-39,61,61,-83,61,-120,61,61,61,-82,]),'STRING':([28,33,35,36,64,76,79,85,88,89,90,91,92,93,94,127,136,137,140,142,149,197,205,206,209,210,],[67,67,-47,-48,67,67,147,67,-39,-40,-41,-42,-43,-44,67,147,67,67,-39,147,147,-120,147,67,67,236,]),'ARRAY':([28,33,35,36,64,76,79,85,88,89,90,91,92,93,94,127,136,137,140,142,149,197,205,206,209,],[78,78,-47,-48,78,78,78,78,78,-40,-41,-42,-43,-44,78,78,78,78,-39,78,78,-120,78,78,78,]),'LEFT_BRACKET':([28,33,35,36,37,64,70,76,79,85,88,89,90,91,92,93,94,127,135,136,137,140,142,149,161,197,205,206,209,],[79,79,-47,-48,-34,79,139,79,79,79,79,-40,-41,-42,-43,-44,79,79,139,79,79,-39,79,79,-35,-120,79,79,79,]),'NEW':([28,33,35,36,64,76,79,85,88,89,90,91,92,93,94,127,136,137,140,142,149,197,205,206,209,],[81,81,-47,-48,81,81,81,81,-39,-40,-41,-42,-43,-44,81,81,81,81,-39,81,81,-120,81,81,81,]),'PLUS_PLUS':([31,37,70,135,160,161,],[86,-34,86,86,86,-35,]),'MINUS_MINUS':([31,37,70,135,160,161,],[87,-34,87,87,87,-35,]),'EQUALS':([31,37,70,135,160,161,],[88,-34,140,140,140,-35,]),'PLUS_EQUALS':([31,37,70,135,160,161,],[89,-34,89,89,89,-35,]),'MINUS_EQUALS':([31,37,70,135,160,161,],[90,-34,90,90,90,-35,]),'TIMES_EQUALS':([31,37,70,135,160,161,],[91,-34,91,91,91,-35,]),'DIVIDE_EQUALS':([31,37,70,135,160,161,],[92,-34,92,92,92,-35,]),'MOD_EQUALS':([31,37,70,135,160,161,],[93,-34,93,93,93,-35,]),'LOGICAL_AND':([37,44,46,47,48,49,51,52,53,54,58,59,60,61,70,82,101,111,135,161,169,170,176,177,179,180,181,182,],[-34,105,-96,-97,-98,-99,-100,-101,-102,-103,-65,-68,-69,-70,-102,105,105,105,-102,-35,-106,105,-72,-107,-63,-64,-66,-67,]),'LOGICAL_OR':([37,44,46,47,48,49,51,52,53,54,58,59,60,61,70,82,101,111,135,161,169,170,176,177,179,180,181,182,],[-34,106,-96,-97,-98,-99,-100,-101,-102,-103,-65,-68,-69,-70,-102,106,106,106,-102,-35,-106,106,-72,-107,-63,-64,-66,-67,]),'LOGICAL_XOR':([37,44,46,47,48,49,51,52,53,54,58,59,60,61,70,82,101,111,135,161,169,170,176,177,179,180,181,182,],[-34,107,-96,-97,-98,-99,-100,-101,-102,-103,-65,-68,-69,-70,-102,107,107,107,-102,-35,-106,107,-72,-107,-63,-64,-66,-67,]),'TIMES':([37,44,46,47,48,49,51,52,53,54,58,59,60,61,70,82,101,111,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,125,-68,-69,-70,-102,-71,-71,-71,-102,-69,-35,-106,-71,-72,-107,125,125,-66,-67,]),'DIVIDE':([37,44,46,47,48,49,51,52,53,54,58,59,60,61,70,82,101,111,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,126,-68,-69,-70,-102,-71,-71,-71,-102,-69,-35,-106,-71,-72,-107,126,126,-66,-67,]),'PLUS':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,114,-65,-68,-69,-70,114,-102,-71,-71,-71,114,114,-102,-69,-35,-106,-71,-72,114,-63,-64,-66,-67,]),'MINUS':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,115,-65,-68,-69,-70,115,-102,-71,-71,-71,115,115,-102,-69,-35,-106,-71,-72,115,-63,-64,-66,-67,]),'EQUAL_TO':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,116,-65,-68,-69,-70,116,-102,-71,-71,-71,116,116,-102,-69,-35,-106,-71,-72,116,-63,-64,-66,-67,]),'NOT_EQUAL_TO':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,117,-65,-68,-69,-70,117,-102,-71,-71,-71,117,117,-102,-69,-35,-106,-71,-72,117,-63,-64,-66,-67,]),'LESS_THAN':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,118,-65,-68,-69,-70,118,-102,-71,-71,-71,118,118,-102,-69,-35,-106,-71,-72,118,-63,-64,-66,-67,]),'GREATER_THAN':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,119,-65,-68,-69,-70,119,-102,-71,-71,-71,119,119,-102,-69,-35,-106,-71,-72,119,-63,-64,-66,-67,]),'LESS_EQUAL':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,120,-65,-68,-69,-70,120,-102,-71,-71,-71,120,120,-102,-69,-35,-106,-71,-72,120,-63,-64,-66,-67,]),'GREATER_EQUAL':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,121,-65,-68,-69,-70,121,-102,-71,-71,-71,121,121,-102,-69,-35,-106,-71,-72,121,-63,-64,-66,-67,]),'IDENTICAL_TO':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,122,-65,-68,-69,-70,122,-102,-71,-71,-71,122,122,-102,-69,-35,-106,-71,-72,122,-63,-64,-66,-67,]),'NOT_IDENTICAL_TO':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,123,-65,-68,-69,-70,123,-102,-71,-71,-71,123,123,-102,-69,-35,-106,-71,-72,123,-63,-64,-66,-67,]),'DIFFERENT':([37,44,46,47,48,49,51,52,53,54,57,58,59,60,61,68,70,82,101,111,112,132,135,148,161,169,170,176,177,179,180,181,182,],[-34,-71,-96,-97,-98,-99,-100,-101,-102,-103,124,-65,-68,-69,-70,124,-102,-71,-71,-71,124,124,-102,-69,-35,-106,-71,-72,124,-63,-64,-66,-67,]),'CALL':([37,70,135,161,],[98,138,138,-35,]),'DOT':([37,46,47,48,49,51,52,53,54,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,77,82,86,87,95,101,111,130,132,135,141,153,155,156,161,168,169,170,176,177,179,180,181,182,198,199,201,204,211,212,219,228,229,233,234,235,241,242,],[-34,-96,-97,-98,-99,-100,-101,-102,-103,-65,-68,-69,-70,136,-49,-52,-53,-54,-102,-57,-56,-58,-59,-60,-62,-71,-37,-38,136,-71,-104,136,-53,-102,-61,-36,136,-27,-35,-95,-106,-105,-72,-107,-63,-64,-66,-67,-50,-51,-55,-125,-30,-26,-94,-132,-124,-24,-146,136,-23,-147,]),'RIGHT_BRACKET':([37,46,47,48,49,51,52,53,54,58,59,60,61,67,68,69,70,71,72,73,74,75,77,82,86,87,111,141,143,144,145,147,148,153,156,161,168,169,170,176,177,179,180,181,182,201,202,204,211,212,219,228,229,230,231,233,234,241,242,],[-34,-96,-97,-98,-99,-100,-101,-102,-103,-65,-68,-69,-70,-52,-53,-54,-102,-57,-56,-58,-59,-60,-62,-71,-37,-38,-104,-61,204,-126,-128,-52,-69,-36,-27,-35,-95,-106,-105,-72,-107,-63,-64,-66,-67,-55,228,-125,-30,-26,-94,-132,-124,-127,-129,-24,-146,-23,-147,]),'LEFT_BRACE':([41,43,63,109,165,169,171,184,208,218,222,232,],[100,100,128,100,100,-106,100,100,100,100,100,100,]),'INT_TYPE':([64,96,129,],[133,133,133,]),'FLOAT_TYPE':([64,96,129,],[134,134,134,]),'STDIN':([83,84,],[151,152,]),'ELSE':([99,162,164,168,216,219,238,],[165,165,-77,-95,-78,-94,-79,]),'ELSEIF':([99,162,164,168,216,219,238,],[166,166,-77,-95,-78,-94,-79,]),'PUBLIC':([128,168,185,187,188,189,190,191,219,223,225,226,239,240,],[193,-95,193,-135,-137,-138,-139,-140,-94,-22,-136,-141,-21,-142,]),'PRIVATE':([128,168,185,187,188,189,190,191,219,223,225,226,239,240,],[194,-95,194,-135,-137,-138,-139,-140,-94,-22,-136,-141,-21,-142,]),'PROTECTED':([128,168,185,187,188,189,190,191,219,223,225,226,239,240,],[195,-95,195,-135,-137,-138,-139,-140,-94,-22,-136,-141,-21,-142,]),'KEY_VALUE':([146,147,148,],[206,-130,-131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,100,],[3,167,]),'statement2':([2,3,100,167,],[4,39,4,39,]),'statement':([2,3,50,100,167,172,],[5,5,110,5,5,221,]),'if_statement':([2,3,100,167,],[6,6,6,6,]),'while_statement':([2,3,100,167,],[7,7,7,7,]),'for_statement':([2,3,100,167,],[8,8,8,8,]),'function_statement':([2,3,100,167,192,],[9,9,9,9,226,]),'class_declaration':([2,3,100,167,],[12,12,12,12,]),'print_statement':([2,3,50,100,167,172,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,50,100,167,172,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,28,33,50,64,76,79,85,94,100,127,136,137,142,149,167,172,205,206,209,],[15,15,74,74,15,74,74,74,74,74,15,74,74,74,74,74,15,15,74,74,74,]),'assignment_statement':([2,3,28,33,50,64,76,79,85,94,97,100,127,136,137,142,149,167,172,205,206,209,214,],[16,16,69,69,16,69,69,69,69,69,159,16,69,69,69,69,69,16,16,69,69,69,237,]),'array_declaration_statement':([2,3,50,100,167,172,],[17,17,17,17,17,17,]),'function_call':([2,3,28,33,50,64,76,79,85,94,100,127,136,137,138,142,149,167,172,205,206,209,],[20,20,71,71,20,71,71,71,71,71,20,71,71,71,201,71,71,20,20,71,71,71,]),'return_statement':([2,3,50,100,167,172,],[21,21,21,21,21,21,]),'for_part1':([2,3,100,167,],[24,24,24,24,]),'print_function':([2,3,50,100,167,172,],[28,28,28,28,28,28,]),'variable':([2,3,24,28,33,42,50,55,56,64,76,79,85,94,96,97,100,104,113,114,115,125,126,127,129,136,137,138,142,149,167,172,178,192,205,206,209,214,243,246,],[31,31,53,70,70,53,31,53,53,135,70,70,70,70,53,160,31,53,53,53,53,53,53,70,53,70,70,200,70,70,31,31,53,227,70,70,70,160,245,248,]),'function_name':([2,3,28,33,50,64,76,79,85,94,100,127,136,137,138,142,149,167,172,205,206,209,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'parenthesized_condition':([22,23,24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,166,178,205,206,209,],[41,43,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,218,49,49,49,49,]),'condition':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[44,82,82,101,111,101,101,82,82,82,82,101,170,82,82,82,82,82,82,101,82,82,82,82,101,82,82,82,]),'for_part3':([24,44,],[45,103,]),'simple_condition':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'negated_condition':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'complex_condition':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'relational_expression':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'expression':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[57,68,68,57,57,112,132,68,68,68,68,112,57,177,57,57,57,57,68,112,68,68,68,68,112,68,68,68,]),'term':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,179,180,58,58,58,58,58,58,58,58,58,58,58,58,]),'factor':([24,28,33,42,55,56,64,76,79,85,94,96,104,113,114,115,125,126,127,129,136,137,142,149,178,205,206,209,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,181,182,59,59,59,59,59,59,59,59,59,59,]),'arguments':([28,33,64,94,209,],[65,95,130,155,235,]),'argument':([28,33,64,76,79,85,94,127,136,137,142,149,205,206,209,],[66,66,66,141,145,153,66,145,198,199,145,145,145,231,66,]),'array':([28,33,64,76,79,85,88,94,127,136,137,142,149,205,206,209,],[72,72,72,72,72,72,154,72,72,72,72,72,72,72,72,72,]),'anonymous_function':([28,33,64,76,79,85,94,127,136,137,142,149,205,206,209,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'array_indexing':([28,33,64,76,79,85,94,127,136,137,142,149,205,206,209,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'casting':([28,33,64,76,79,85,94,127,136,137,142,149,205,206,209,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'object_creation':([28,33,64,76,79,85,94,127,136,137,142,149,205,206,209,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'assignment_operator':([31,70,135,160,],[85,85,85,85,]),'block':([41,43,109,165,171,184,208,218,222,232,],[99,102,175,217,175,223,233,238,239,241,]),'logical_operator':([44,82,101,111,170,],[104,104,104,104,104,]),'statement_list':([50,],[108,]),'relational_operator':([57,68,112,132,177,],[113,113,113,113,113,]),'casting_type':([64,96,129,],[131,131,131,]),'array_elements':([79,127,142,149,],[143,183,203,207,]),'array_argument':([79,127,142,149,205,],[144,144,144,144,230,]),'clave':([79,127,142,149,205,],[146,146,146,146,146,]),'assignment_list':([97,],[157,]),'else_if_extended':([99,],[162,]),'if_part3':([99,162,],[163,215,]),'if_part2':([99,162,],[164,216,]),'for_part4':([109,171,],[174,220,]),'class_statements':([128,],[185,]),'class_statement':([128,185,],[187,225,]),'method_declaration':([128,185,],[188,188,]),'property_declaration':([128,185,],[189,189,]),'visibility_operator':([128,185,],[192,192,]),'variable_list':([243,],[244,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',8),
  ('statements -> statement2','statements',1,'p_statements','parser.py',12),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',13),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',21),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',22),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',23),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',24),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',25),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',26),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',27),
  ('statement2 -> class_declaration','statement2',1,'p_statement2','parser.py',28),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',38),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',39),
  ('statement -> function_call','statement',1,'p_statement','parser.py',40),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',41),
  ('function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',47),
  ('function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block','function_statement',5,'p_function_statement','parser.py',48),
  ('anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block','anonymous_function',5,'p_anonymous_function','parser.py',56),
  ('anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block','anonymous_function',4,'p_anonymous_function','parser.py',57),
  ('return_statement -> RETURN arguments','return_statement',2,'p_return_statement','parser.py',64),
  ('function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN','function_call',4,'p_function_call','parser.py',68),
  ('function_call -> function_name LEFT_PAREN RIGHT_PAREN','function_call',3,'p_function_call','parser.py',69),
  ('function_name -> NAME','function_name',1,'p_function_name','parser.py',76),
  ('function_name -> variable','function_name',1,'p_function_name','parser.py',77),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',83),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',88),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',92),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',93),
  ('variable -> ID','variable',1,'p_variable','parser.py',101),
  ('variable -> ID CALL NAME','variable',3,'p_variable','parser.py',102),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',110),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',111),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',112),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',119),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',120),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',121),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',122),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',123),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',124),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',129),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',130),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',137),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',138),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',142),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',143),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',144),
  ('argument -> STRING','argument',1,'p_argument','parser.py',152),
  ('argument -> expression','argument',1,'p_argument','parser.py',153),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',154),
  ('argument -> variable CALL function_call','argument',3,'p_argument','parser.py',155),
  ('argument -> array','argument',1,'p_argument','parser.py',156),
  ('argument -> function_call','argument',1,'p_argument','parser.py',157),
  ('argument -> anonymous_function','argument',1,'p_argument','parser.py',158),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',159),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',160),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',161),
  ('argument -> object_creation','argument',1,'p_argument','parser.py',162),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',170),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',171),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',172),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',179),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',180),
  ('term -> factor','term',1,'p_term','parser.py',181),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',188),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',189),
  ('factor -> condition','factor',1,'p_factor','parser.py',190),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',191),
  ('if_statement -> IF parenthesized_condition block','if_statement',3,'p_if_statement','parser.py',199),
  ('if_statement -> IF parenthesized_condition block else_if_extended','if_statement',4,'p_if_statement','parser.py',200),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',201),
  ('if_statement -> IF parenthesized_condition block if_part3','if_statement',4,'p_if_statement','parser.py',202),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',211),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',212),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',220),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',224),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',229),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',234),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',235),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',242),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',243),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',250),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',251),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',258),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',259),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',263),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',264),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',272),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',273),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',281),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',282),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',289),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',290),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',291),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',292),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',296),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',297),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',298),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',299),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',303),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',307),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',311),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',315),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',319),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',320),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',321),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',322),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',323),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',324),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',325),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',326),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',327),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',331),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',332),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',333),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',337),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',341),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',342),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',347),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',351),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',352),
  ('array_elements -> array_argument','array_elements',1,'p_array_elements','parser.py',359),
  ('array_elements -> array_elements COMMA array_argument','array_elements',3,'p_array_elements','parser.py',360),
  ('array_argument -> argument','array_argument',1,'p_array_argument','parser.py',369),
  ('array_argument -> clave KEY_VALUE argument','array_argument',3,'p_array_argument','parser.py',370),
  ('clave -> STRING','clave',1,'p_clave','parser.py',377),
  ('clave -> INTEGER','clave',1,'p_clave','parser.py',378),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',382),
  ('class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE','class_declaration',5,'p_class_declaration','parser.py',386),
  ('class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE','class_declaration',4,'p_class_declaration','parser.py',387),
  ('class_statements -> class_statement','class_statements',1,'p_class_statements','parser.py',394),
  ('class_statements -> class_statements class_statement','class_statements',2,'p_class_statements','parser.py',395),
  ('class_statement -> method_declaration','class_statement',1,'p_class_statement','parser.py',403),
  ('class_statement -> property_declaration','class_statement',1,'p_class_statement','parser.py',404),
  ('class_statement -> ONE_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',405),
  ('class_statement -> MULTI_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',406),
  ('method_declaration -> visibility_operator function_statement','method_declaration',2,'p_method_declaration','parser.py',410),
  ('property_declaration -> visibility_operator variable SEMICOLON','property_declaration',3,'p_property_declaration','parser.py',414),
  ('visibility_operator -> PUBLIC','visibility_operator',1,'p_visibility_operator','parser.py',418),
  ('visibility_operator -> PRIVATE','visibility_operator',1,'p_visibility_operator','parser.py',419),
  ('visibility_operator -> PROTECTED','visibility_operator',1,'p_visibility_operator','parser.py',420),
  ('object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN','object_creation',4,'p_object_creation','parser.py',424),
  ('object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN','object_creation',5,'p_object_creation','parser.py',425),
]
