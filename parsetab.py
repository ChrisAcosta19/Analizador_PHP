
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG OR PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE XOR YIELD YIELD_FROMstatement : print_statement\n                 | fscanf_statement\n                 | assignment_statement\n                 | if_statement\n                 | array_declaration_statementfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN SEMICOLONvariable_list : variable\n                     | variable_list COMMA variablevariable : IDprint_statement : ECHO LEFT_PAREN arguments RIGHT_PAREN SEMICOLON\n                       | ECHO arguments SEMICOLON\n                       | PRINT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON\n                       | PRINT arguments SEMICOLONarguments : argument\n                 | arguments DOT argumentargument : INTEGER\n                | FLOAT\n                | variable\n                | TRUE\n                | FALSE\n                | STRING\n                | expressionassignment_statement : variable EQUALS argument SEMICOLONexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | variable\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF LEFT_PAREN condition RIGHT_PAREN block\n                    | IF LEFT_PAREN condition RIGHT_PAREN block ELSE blockblock : LEFT_BRACE statements RIGHT_BRACEstatements : statement\n                  | statements statementrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTcondition : TRUE\n                 | FALSE\n                 | expression relational_operator expression\n                 | condition LOGICAL_AND condition\n                 | condition LOGICAL_OR condition\n                 | condition LOGICAL_XOR condition\n                 | LOGICAL_NOT conditionarray_declaration_statement : variable EQUALS array SEMICOLONarray : ARRAY LEFT_PAREN array_elements RIGHT_PARENarray_elements : argument\n                      | array_elements COMMA argument'
    
_lr_action_items = {'ECHO':([0,2,3,4,5,6,33,40,63,64,81,82,86,87,96,97,101,102,103,107,],[7,-1,-2,-3,-4,-5,-11,-13,-23,-55,-10,-12,-34,7,7,-37,-35,-36,-38,-6,]),'PRINT':([0,2,3,4,5,6,33,40,63,64,81,82,86,87,96,97,101,102,103,107,],[8,-1,-2,-3,-4,-5,-11,-13,-23,-55,-10,-12,-34,8,8,-37,-35,-36,-38,-6,]),'FSCANF':([0,2,3,4,5,6,33,40,63,64,81,82,86,87,96,97,101,102,103,107,],[9,-1,-2,-3,-4,-5,-11,-13,-23,-55,-10,-12,-34,9,9,-37,-35,-36,-38,-6,]),'IF':([0,2,3,4,5,6,33,40,63,64,81,82,86,87,96,97,101,102,103,107,],[11,-1,-2,-3,-4,-5,-11,-13,-23,-55,-10,-12,-34,11,11,-37,-35,-36,-38,-6,]),'ID':([0,2,3,4,5,6,7,8,13,25,28,29,30,33,34,35,36,37,38,40,49,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,86,87,92,94,96,97,101,102,103,104,107,],[12,-1,-2,-3,-4,-5,12,12,12,12,12,12,12,-11,12,12,12,12,12,-13,12,-23,-55,12,12,12,12,12,-39,-40,-41,-42,-43,-44,-45,-46,-47,-10,-12,-34,12,12,12,12,-37,-35,-36,-38,12,-6,]),'$end':([1,2,3,4,5,6,33,40,63,64,81,82,86,101,102,107,],[0,-1,-2,-3,-4,-5,-11,-13,-23,-55,-10,-12,-34,-35,-36,-6,]),'RIGHT_BRACE':([2,3,4,5,6,33,40,63,64,81,82,86,96,97,101,102,103,107,],[-1,-2,-3,-4,-5,-11,-13,-23,-55,-10,-12,-34,102,-37,-35,-36,-38,-6,]),'LEFT_PAREN':([7,8,9,11,13,25,28,29,30,34,35,36,37,38,44,49,65,67,68,69,70,71,72,73,74,75,76,77,78,79,94,],[13,25,27,29,30,30,30,30,30,30,30,30,30,30,65,30,30,30,30,30,30,-39,-40,-41,-42,-43,-44,-45,-46,-47,30,]),'INTEGER':([7,8,13,25,28,29,30,34,35,36,37,38,49,65,67,68,69,70,71,72,73,74,75,76,77,78,79,94,],[16,16,16,16,16,50,50,16,50,50,50,50,50,16,50,50,50,50,-39,-40,-41,-42,-43,-44,-45,-46,-47,16,]),'FLOAT':([7,8,13,25,28,29,30,34,35,36,37,38,49,65,67,68,69,70,71,72,73,74,75,76,77,78,79,94,],[17,17,17,17,17,51,51,17,51,51,51,51,51,17,51,51,51,51,-39,-40,-41,-42,-43,-44,-45,-46,-47,17,]),'TRUE':([7,8,13,25,28,29,34,49,65,67,68,69,94,],[19,19,19,19,19,46,19,46,19,46,46,46,19,]),'FALSE':([7,8,13,25,28,29,34,49,65,67,68,69,94,],[20,20,20,20,20,47,20,47,20,47,47,47,20,]),'STRING':([7,8,13,25,28,34,62,65,94,],[21,21,21,21,21,21,83,21,21,]),'EQUALS':([10,12,],[28,-9,]),'SEMICOLON':([12,14,15,16,17,18,19,20,21,22,23,24,26,42,43,50,51,52,54,55,56,57,58,59,60,61,93,105,],[-9,33,-14,-16,-17,-18,-19,-20,-21,-22,-26,-29,40,63,64,-30,-31,-32,81,-33,-15,-24,-25,-27,-28,82,-56,107,]),'DOT':([12,14,15,16,17,18,19,20,21,22,23,24,26,31,32,39,50,51,52,55,56,57,58,59,60,],[-9,34,-14,-16,-17,-18,-19,-20,-21,-22,-26,-29,34,34,-22,34,-30,-31,-32,-33,-15,-24,-25,-27,-28,]),'TIMES':([12,16,17,18,23,24,50,51,52,55,57,58,59,60,],[-9,-30,-31,-32,37,-29,-30,-31,-32,-33,37,37,-27,-28,]),'DIVIDE':([12,16,17,18,23,24,50,51,52,55,57,58,59,60,],[-9,-30,-31,-32,38,-29,-30,-31,-32,-33,38,38,-27,-28,]),'PLUS':([12,16,17,18,22,23,24,32,48,50,51,52,53,55,57,58,59,60,91,],[-9,-30,-31,-32,35,-26,-29,35,35,-30,-31,-32,35,-33,-24,-25,-27,-28,35,]),'MINUS':([12,16,17,18,22,23,24,32,48,50,51,52,53,55,57,58,59,60,91,],[-9,-30,-31,-32,36,-26,-29,36,36,-30,-31,-32,36,-33,-24,-25,-27,-28,36,]),'RIGHT_PAREN':([12,15,16,17,18,19,20,21,22,23,24,31,32,39,45,46,47,50,51,52,53,55,56,57,58,59,60,80,84,85,88,89,90,91,98,99,100,106,],[-9,-14,-16,-17,-18,-19,-20,-21,-22,-26,-29,54,55,61,66,-48,-49,-30,-31,-32,55,-33,-15,-24,-25,-27,-28,-54,93,-57,-51,-52,-53,-50,105,-7,-58,-8,]),'EQUAL_TO':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,71,-30,-31,-32,-33,-24,-25,-27,-28,]),'NOT_EQUAL_TO':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,72,-30,-31,-32,-33,-24,-25,-27,-28,]),'LESS_THAN':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,73,-30,-31,-32,-33,-24,-25,-27,-28,]),'GREATER_THAN':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,74,-30,-31,-32,-33,-24,-25,-27,-28,]),'LESS_EQUAL':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,75,-30,-31,-32,-33,-24,-25,-27,-28,]),'GREATER_EQUAL':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,76,-30,-31,-32,-33,-24,-25,-27,-28,]),'IDENTICAL_TO':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,77,-30,-31,-32,-33,-24,-25,-27,-28,]),'NOT_IDENTICAL_TO':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,78,-30,-31,-32,-33,-24,-25,-27,-28,]),'DIFFERENT':([12,23,24,48,50,51,52,55,57,58,59,60,],[-9,-26,-29,79,-30,-31,-32,-33,-24,-25,-27,-28,]),'COMMA':([12,16,17,18,19,20,21,22,23,24,41,50,51,52,55,57,58,59,60,83,84,85,98,99,100,106,],[-9,-16,-17,-18,-19,-20,-21,-22,-26,-29,62,-30,-31,-32,-33,-24,-25,-27,-28,92,94,-57,104,-7,-58,-8,]),'LOGICAL_AND':([12,23,24,45,46,47,50,51,52,55,57,58,59,60,80,88,89,90,91,],[-9,-26,-29,67,-48,-49,-30,-31,-32,-33,-24,-25,-27,-28,67,67,67,67,-50,]),'LOGICAL_OR':([12,23,24,45,46,47,50,51,52,55,57,58,59,60,80,88,89,90,91,],[-9,-26,-29,68,-48,-49,-30,-31,-32,-33,-24,-25,-27,-28,68,68,68,68,-50,]),'LOGICAL_XOR':([12,23,24,45,46,47,50,51,52,55,57,58,59,60,80,88,89,90,91,],[-9,-26,-29,69,-48,-49,-30,-31,-32,-33,-24,-25,-27,-28,69,69,69,69,-50,]),'STDIN':([27,],[41,]),'ARRAY':([28,],[44,]),'LOGICAL_NOT':([29,49,67,68,69,],[49,49,49,49,49,]),'LEFT_BRACE':([66,95,],[87,87,]),'ELSE':([86,102,],[95,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,87,96,],[1,97,103,]),'print_statement':([0,87,96,],[2,2,2,]),'fscanf_statement':([0,87,96,],[3,3,3,]),'assignment_statement':([0,87,96,],[4,4,4,]),'if_statement':([0,87,96,],[5,5,5,]),'array_declaration_statement':([0,87,96,],[6,6,6,]),'variable':([0,7,8,13,25,28,29,30,34,35,36,37,38,49,65,67,68,69,70,87,92,94,96,104,],[10,18,18,18,18,18,52,52,18,52,52,52,52,52,18,52,52,52,52,10,99,18,10,106,]),'arguments':([7,8,13,25,],[14,26,31,39,]),'argument':([7,8,13,25,28,34,65,94,],[15,15,15,15,42,56,85,100,]),'expression':([7,8,13,25,28,29,30,34,49,65,67,68,69,70,94,],[22,22,32,32,22,48,53,22,48,22,48,48,48,91,22,]),'term':([7,8,13,25,28,29,30,34,35,36,49,65,67,68,69,70,94,],[23,23,23,23,23,23,23,23,57,58,23,23,23,23,23,23,23,]),'factor':([7,8,13,25,28,29,30,34,35,36,37,38,49,65,67,68,69,70,94,],[24,24,24,24,24,24,24,24,24,24,59,60,24,24,24,24,24,24,24,]),'array':([28,],[43,]),'condition':([29,49,67,68,69,],[45,80,88,89,90,]),'relational_operator':([48,],[70,]),'array_elements':([65,],[84,]),'block':([66,95,],[86,101,]),'statements':([87,],[96,]),'variable_list':([92,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',6),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',7),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',8),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',9),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',10),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN SEMICOLON','fscanf_statement',9,'p_fscanf_statement','parser.py',16),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',20),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',21),
  ('variable -> ID','variable',1,'p_variable','parser.py',29),
  ('print_statement -> ECHO LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',34),
  ('print_statement -> ECHO arguments SEMICOLON','print_statement',3,'p_print_statement','parser.py',35),
  ('print_statement -> PRINT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',36),
  ('print_statement -> PRINT arguments SEMICOLON','print_statement',3,'p_print_statement','parser.py',37),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',47),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',48),
  ('argument -> INTEGER','argument',1,'p_argument','parser.py',56),
  ('argument -> FLOAT','argument',1,'p_argument','parser.py',57),
  ('argument -> variable','argument',1,'p_argument','parser.py',58),
  ('argument -> TRUE','argument',1,'p_argument','parser.py',59),
  ('argument -> FALSE','argument',1,'p_argument','parser.py',60),
  ('argument -> STRING','argument',1,'p_argument','parser.py',61),
  ('argument -> expression','argument',1,'p_argument','parser.py',62),
  ('assignment_statement -> variable EQUALS argument SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',67),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',72),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',73),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',74),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',81),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',82),
  ('term -> factor','term',1,'p_term','parser.py',83),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',90),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',91),
  ('factor -> variable','factor',1,'p_factor','parser.py',92),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',93),
  ('if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block','if_statement',5,'p_if_statement','parser.py',105),
  ('if_statement -> IF LEFT_PAREN condition RIGHT_PAREN block ELSE block','if_statement',7,'p_if_statement','parser.py',106),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',113),
  ('statements -> statement','statements',1,'p_statements','parser.py',117),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',118),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',126),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',127),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',128),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',129),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',130),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',131),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',132),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',133),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',134),
  ('condition -> TRUE','condition',1,'p_condition','parser.py',138),
  ('condition -> FALSE','condition',1,'p_condition','parser.py',139),
  ('condition -> expression relational_operator expression','condition',3,'p_condition','parser.py',140),
  ('condition -> condition LOGICAL_AND condition','condition',3,'p_condition','parser.py',141),
  ('condition -> condition LOGICAL_OR condition','condition',3,'p_condition','parser.py',142),
  ('condition -> condition LOGICAL_XOR condition','condition',3,'p_condition','parser.py',143),
  ('condition -> LOGICAL_NOT condition','condition',2,'p_condition','parser.py',144),
  ('array_declaration_statement -> variable EQUALS array SEMICOLON','array_declaration_statement',4,'p_array_declaration_statement','parser.py',163),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',167),
  ('array_elements -> argument','array_elements',1,'p_array_elements','parser.py',171),
  ('array_elements -> array_elements COMMA argument','array_elements',3,'p_array_elements','parser.py',172),
]
