
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE COUNT DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROMprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENT\n                  | class_declarationstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | return_statement\n                 | array_indexing\n                 | array_add_element\n                 | array_modify_element\n                 | array_remove_element\n                 | array_count_elements\n                 | expressionfunction_statement : FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block\n                          | FUNCTION NAME LEFT_PAREN RIGHT_PAREN blockanonymous_function : FUNCTION LEFT_PAREN parameters RIGHT_PAREN block\n                          | FUNCTION LEFT_PAREN RIGHT_PAREN blockparameters : parameter\n                  | parameters COMMA parameterparameter : variable\n                 | variable EQUALS argumentreturn_statement : RETURN argumentsfunction_call : function_name LEFT_PAREN arguments RIGHT_PAREN\n                     | function_name LEFT_PAREN RIGHT_PARENfunction_name : NAME\n                     | variablefgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : ID\n                | ID CALL NAMEassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | array\n                | array_indexing\n                | function_call\n                | variable CALL function_call\n                | anonymous_function\n                | assignment_statement\n                | fgets_statement\n                | object_creation\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | term MOD factor\n            | term POWER factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | STRING\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block\n                    | IF parenthesized_condition block else_if_extended\n                    | IF parenthesized_condition block else_if_extended if_part3\n                    | IF parenthesized_condition block if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition blockif_part3 : ELSE blockwhile_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : array_argument\n                      | array_elements COMMA array_argumentarray_argument : argument\n                      | clave KEY_VALUE argumentclave : STRING\n             | INTEGERarray_indexing : variable LEFT_BRACKET clave RIGHT_BRACKETarray_add_element : variable LEFT_BRACKET RIGHT_BRACKET EQUALS argumentarray_modify_element : variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argumentarray_remove_element : UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PARENarray_count_elements : COUNT LEFT_PAREN variable RIGHT_PARENclass_declaration : CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE\n                         | CLASS NAME LEFT_BRACE RIGHT_BRACEclass_statements : class_statement\n                        | class_statements class_statementclass_statement : method_declaration\n                       | property_declaration\n                       | ONE_LINE_COMMENT\n                       | MULTI_LINE_COMMENTmethod_declaration : visibility_operator function_statementproperty_declaration : visibility_operator variable SEMICOLONvisibility_operator : PUBLIC\n                           | PRIVATE\n                           | PROTECTEDobject_creation : NEW NAME LEFT_PAREN RIGHT_PAREN\n                       | NEW NAME LEFT_PAREN arguments RIGHT_PAREN'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,61,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,149,193,194,195,198,199,202,203,204,209,210,211,212,213,214,215,243,244,245,247,248,252,254,255,256,271,272,275,],[10,10,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,10,-94,-97,214,-87,-89,-90,10,-108,-102,-100,-101,214,-151,-152,-154,-155,-156,-157,-88,-91,-93,-107,-99,-28,-150,-153,-158,-92,-27,-159,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,149,193,194,195,198,199,202,203,204,209,210,211,212,213,214,215,243,244,245,247,248,252,254,255,256,271,272,275,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,11,-94,-97,215,-87,-89,-90,11,-108,-102,-100,-101,215,-151,-152,-154,-155,-156,-157,-88,-91,-93,-107,-99,-28,-150,-153,-158,-92,-27,-159,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,18,-86,18,-94,-97,-87,-89,-90,18,-108,18,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,19,-86,19,-94,-97,-87,-89,-90,19,-108,19,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'IF':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,210,243,244,245,247,248,252,254,271,272,],[28,28,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,28,-94,-97,-87,-89,-90,28,-108,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,210,243,244,245,247,248,252,254,271,272,],[30,30,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,30,-94,-97,-87,-89,-90,30,-108,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,37,43,48,49,62,63,80,93,106,108,113,116,118,119,120,121,122,123,138,139,140,141,157,158,161,163,193,194,195,198,199,202,203,204,210,216,217,218,219,221,229,230,233,237,243,244,245,247,248,252,253,254,267,271,272,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,109,109,-57,-58,-3,-4,-98,109,109,109,109,-49,-50,-51,-52,-53,-54,109,-86,33,-94,-97,109,109,-49,109,-87,-89,-90,33,-108,-102,-100,-101,-151,33,-160,-161,-162,-133,109,109,109,109,-88,-91,-93,-107,-99,-28,109,-150,109,-92,-27,]),'CLASS':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,210,243,244,245,247,248,252,254,271,272,],[36,36,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,36,-94,-97,-87,-89,-90,36,-108,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[38,38,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,38,-86,38,-94,-97,-87,-89,-90,38,-108,38,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,37,43,48,49,62,63,80,81,93,106,108,113,116,118,119,120,121,122,123,138,139,140,141,157,158,161,163,193,194,195,198,199,201,202,203,204,210,221,229,230,233,237,243,244,245,247,248,252,253,254,267,271,272,],[40,40,-2,-5,-6,-7,-8,-9,-10,-11,40,40,-57,-58,-3,-4,-98,40,40,40,40,40,-49,-50,-51,-52,-53,-54,40,-86,40,-94,-97,40,40,-49,40,-87,-89,-90,40,-108,40,-102,-100,-101,-151,-133,40,40,40,40,-88,-91,-93,-107,-99,-28,40,-150,40,-92,-27,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[43,43,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,43,-86,43,-94,-97,-87,-89,-90,43,-108,43,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'UNSET':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[44,44,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,44,-86,44,-94,-97,-87,-89,-90,44,-108,44,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'COUNT':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[45,45,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,45,-86,45,-94,-97,-87,-89,-90,45,-108,45,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'FOR':([2,3,4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,193,194,195,198,199,202,203,204,210,243,244,245,247,248,252,254,271,272,],[47,47,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,47,-94,-97,-87,-89,-90,47,-108,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[48,48,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,48,-86,48,-94,-97,-87,-89,-90,48,-108,48,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,62,63,80,81,138,139,140,141,193,194,195,198,199,201,202,203,204,210,243,244,245,247,248,252,254,271,272,],[49,49,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,49,-86,49,-94,-97,-87,-89,-90,49,-108,49,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'ID':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,126,127,128,129,130,131,132,138,139,140,141,146,150,157,158,159,161,163,170,189,193,194,195,198,199,201,202,203,204,210,216,217,218,219,221,229,230,233,237,241,242,243,244,245,247,248,251,252,253,254,267,271,272,278,284,],[50,50,-2,-5,-6,-7,-8,-9,-10,-11,50,50,50,50,-57,-58,50,-3,-4,50,50,50,-121,-122,-123,-124,-125,-126,-127,-128,-129,50,-98,50,50,50,-130,-131,-132,50,50,50,50,-49,-50,-51,-52,-53,-54,50,50,50,50,50,50,50,50,50,-86,50,-94,-97,50,50,50,50,50,-49,50,50,-96,-87,-89,-90,50,-108,50,-102,-100,-101,-151,50,-160,-161,-162,-133,50,50,50,50,-95,50,-88,-91,-93,-107,-99,50,-28,50,-150,50,-92,-27,50,50,]),'NAME':([2,3,4,6,7,8,9,10,11,12,33,36,37,43,48,49,62,63,80,81,93,106,108,110,113,116,118,119,120,121,122,123,133,138,139,140,141,157,158,159,161,163,193,194,195,198,199,201,202,203,204,210,221,229,230,233,237,243,244,245,247,248,252,253,254,267,271,272,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,89,92,34,34,-57,-58,-3,-4,-98,34,34,34,34,171,34,-49,-50,-51,-52,-53,-54,34,192,-86,34,-94,-97,34,34,34,-49,34,-87,-89,-90,34,-108,34,-102,-100,-101,-151,-133,34,34,34,34,-88,-91,-93,-107,-99,-28,34,-150,34,-92,-27,]),'INTEGER':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,117,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,150,157,158,160,161,163,189,193,194,195,198,199,201,202,203,204,210,221,229,230,233,237,239,241,243,244,245,247,248,252,253,254,267,271,272,],[52,52,-2,-5,-6,-7,-8,-9,-10,-11,52,52,52,52,-57,-58,52,-3,-4,52,52,52,-121,-122,-123,-124,-125,-126,-127,-128,-129,52,-98,52,52,52,-130,-131,-132,52,52,169,52,-49,179,-50,-51,-52,-53,-54,52,52,52,52,52,52,-86,52,-94,-97,52,52,52,179,-49,169,-96,-87,-89,-90,52,-108,52,-102,-100,-101,-151,-133,169,52,52,52,179,-95,-88,-91,-93,-107,-99,-28,52,-150,52,-92,-27,]),'FLOAT':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,150,157,158,161,163,189,193,194,195,198,199,201,202,203,204,210,221,229,230,233,237,241,243,244,245,247,248,252,253,254,267,271,272,],[53,53,-2,-5,-6,-7,-8,-9,-10,-11,53,53,53,53,-57,-58,53,-3,-4,53,53,53,-121,-122,-123,-124,-125,-126,-127,-128,-129,53,-98,53,53,53,-130,-131,-132,53,53,53,53,-49,-50,-51,-52,-53,-54,53,53,53,53,53,53,-86,53,-94,-97,53,53,53,-49,53,-96,-87,-89,-90,53,-108,53,-102,-100,-101,-151,-133,53,53,53,53,-95,-88,-91,-93,-107,-99,-28,53,-150,53,-92,-27,]),'STRING':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,117,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,150,157,158,160,161,163,189,193,194,195,198,199,201,202,203,204,210,221,229,230,233,234,237,239,241,243,244,245,247,248,252,253,254,267,271,272,],[39,39,-2,-5,-6,-7,-8,-9,-10,-11,39,39,96,96,-57,-58,39,-3,-4,39,39,39,-121,-122,-123,-124,-125,-126,-127,-128,-129,39,-98,39,39,39,-130,-131,-132,96,96,168,96,-49,178,-50,-51,-52,-53,-54,96,39,39,39,39,39,-86,39,-94,-97,39,96,96,178,-49,168,-96,-87,-89,-90,39,-108,39,-102,-100,-101,-151,-133,168,96,96,266,96,178,-95,-88,-91,-93,-107,-99,-28,96,-150,96,-92,-27,]),'LEFT_PAREN':([2,3,4,6,7,8,9,10,11,12,28,30,31,34,35,37,38,40,41,42,43,44,45,47,48,49,50,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,89,93,101,106,107,108,109,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,150,156,157,158,161,163,171,189,192,193,194,195,197,198,199,201,202,203,204,210,221,224,229,230,233,237,241,243,244,245,247,248,252,253,254,267,271,272,],[35,35,-2,-5,-6,-7,-8,-9,-10,-11,77,77,83,-38,83,93,111,112,-39,123,125,126,127,132,-57,-58,-44,83,-3,-4,35,35,35,-121,-122,-123,-124,-125,-126,-127,-128,-129,83,-98,35,83,83,-130,-131,-132,146,150,-39,125,163,125,170,125,-49,-50,-51,-52,-53,-54,125,83,35,35,35,35,-86,35,-94,-97,83,-39,125,125,-49,125,233,-96,-45,-87,-89,-90,77,35,-108,35,-102,-100,-101,-151,-133,-39,125,125,125,125,-95,-88,-91,-93,-107,-99,-28,125,-150,125,-92,-27,]),'TRUE':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,150,157,158,161,163,189,193,194,195,198,199,201,202,203,204,210,221,229,230,233,237,241,243,244,245,247,248,252,253,254,267,271,272,],[57,57,-2,-5,-6,-7,-8,-9,-10,-11,57,57,57,57,-57,-58,57,-3,-4,57,57,57,-121,-122,-123,-124,-125,-126,-127,-128,-129,57,-98,57,57,57,-130,-131,-132,57,57,57,57,-49,-50,-51,-52,-53,-54,57,57,57,57,57,57,-86,57,-94,-97,57,57,57,-49,57,-96,-87,-89,-90,57,-108,57,-102,-100,-101,-151,-133,57,57,57,57,-95,-88,-91,-93,-107,-99,-28,57,-150,57,-92,-27,]),'FALSE':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,150,157,158,161,163,189,193,194,195,198,199,201,202,203,204,210,221,229,230,233,237,241,243,244,245,247,248,252,253,254,267,271,272,],[58,58,-2,-5,-6,-7,-8,-9,-10,-11,58,58,58,58,-57,-58,58,-3,-4,58,58,58,-121,-122,-123,-124,-125,-126,-127,-128,-129,58,-98,58,58,58,-130,-131,-132,58,58,58,58,-49,-50,-51,-52,-53,-54,58,58,58,58,58,58,-86,58,-94,-97,58,58,58,-49,58,-96,-87,-89,-90,58,-108,58,-102,-100,-101,-151,-133,58,58,58,58,-95,-88,-91,-93,-107,-99,-28,58,-150,58,-92,-27,]),'LOGICAL_NOT':([2,3,4,6,7,8,9,10,11,12,31,35,37,43,48,49,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,81,83,85,86,87,88,93,106,108,113,116,118,119,120,121,122,123,125,128,129,130,131,138,139,140,141,150,157,158,161,163,189,193,194,195,198,199,201,202,203,204,210,221,229,230,233,237,241,243,244,245,247,248,252,253,254,267,271,272,],[60,60,-2,-5,-6,-7,-8,-9,-10,-11,60,60,60,60,-57,-58,60,-3,-4,60,60,60,-121,-122,-123,-124,-125,-126,-127,-128,-129,60,-98,60,60,60,-130,-131,-132,60,60,60,60,-49,-50,-51,-52,-53,-54,60,60,60,60,60,60,-86,60,-94,-97,60,60,60,-49,60,-96,-87,-89,-90,60,-108,60,-102,-100,-101,-151,-133,60,60,60,60,-95,-88,-91,-93,-107,-99,-28,60,-150,60,-92,-27,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,62,63,80,138,140,141,193,194,195,199,202,203,204,210,243,244,245,247,248,252,254,271,272,],[61,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,-94,-97,-87,-89,-90,-108,-102,-100,-101,-151,-88,-91,-93,-107,-99,-28,-150,-92,-27,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,62,63,80,138,139,140,141,149,193,194,195,198,199,202,203,204,209,210,211,212,213,214,215,243,244,245,247,248,252,254,255,256,271,272,275,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-98,-86,199,-94,-97,210,-87,-89,-90,247,-108,-102,-100,-101,254,-151,-152,-154,-155,-156,-157,-88,-91,-93,-107,-99,-28,-150,-153,-158,-92,-27,-159,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,94,95,96,97,98,99,100,101,102,103,104,105,114,115,124,132,134,135,136,137,143,145,147,148,162,174,175,181,184,185,186,187,188,189,190,192,199,200,220,222,223,225,228,235,236,238,240,241,247,257,258,259,263,264,268,270,276,277,279,283,285,],[63,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-112,81,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,81,-115,-56,-59,-62,-63,-64,-65,-66,-115,-68,-69,-70,-71,-47,-48,-35,189,-117,-73,-74,-120,202,-118,-85,-119,-72,-46,-136,-37,-76,-77,-78,-79,241,-96,-103,-45,-108,202,-55,-60,-61,-67,-138,-40,-145,-36,-149,-95,-107,275,-145,-137,-30,-163,-146,-104,-29,-164,-147,-148,-41,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,81,82,90,91,94,95,96,97,98,99,100,101,102,103,104,105,114,115,123,124,134,135,136,137,142,144,145,146,147,148,151,152,153,154,155,156,162,165,166,168,169,170,173,174,175,180,181,183,184,185,186,187,192,199,205,207,208,220,222,223,225,227,228,231,233,235,236,238,240,247,249,258,259,260,261,263,264,265,268,273,274,276,277,279,280,281,282,283,285,286,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,143,-115,147,148,-56,-59,-62,-63,-64,-65,-66,-115,-68,-69,-70,-71,-47,-48,181,-35,-117,-73,-74,-120,200,-105,-118,206,-85,-119,220,221,147,-134,-135,-115,-72,-139,-141,-62,-81,232,235,-46,-136,238,-37,240,-76,-77,-78,-79,-45,-108,250,-31,-33,-55,-60,-61,-67,259,-138,262,264,-40,-145,-36,-149,-107,-106,-145,-137,-140,-142,-30,-163,277,-146,-32,-34,-29,-164,-147,283,285,-42,-148,-41,-43,]),'COMMA':([13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,82,91,94,95,96,97,98,99,100,101,102,103,104,105,114,115,124,134,135,136,137,142,144,145,147,148,151,153,156,162,164,165,166,168,169,172,174,175,180,181,184,185,186,187,188,190,192,199,205,207,208,220,222,223,225,227,228,231,235,236,238,240,247,249,258,259,260,261,263,264,265,266,268,270,273,274,276,277,279,281,282,283,285,286,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-115,-83,158,-59,-62,-63,-64,-65,-66,-115,-68,-69,-70,-71,-47,-48,158,-117,-73,-74,-120,201,-105,-118,-85,-119,158,-63,-115,-72,229,-139,-141,-62,-81,234,-46,-136,158,-37,-76,-77,-78,-79,242,-103,-45,-108,251,-31,-33,-55,-60,-61,-67,229,-138,251,-40,-145,-36,-149,-107,-106,-145,-137,-140,-142,-30,-163,158,278,-146,-104,-32,-34,-29,-164,-147,284,-42,-148,-41,-43,]),'PLUS':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[64,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,64,64,-83,-84,64,-115,-83,-73,-74,64,-83,-85,-119,64,-115,-84,-81,-76,-77,-78,-79,-45,]),'MINUS':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[65,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,65,65,-83,-84,65,-115,-83,-73,-74,65,-83,-85,-119,65,-115,-84,-81,-76,-77,-78,-79,-45,]),'EQUAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[67,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,67,67,-83,-84,67,-115,-83,-73,-74,67,-83,-85,-119,67,-115,-84,-81,-76,-77,-78,-79,-45,]),'NOT_EQUAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[68,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,68,68,-83,-84,68,-115,-83,-73,-74,68,-83,-85,-119,68,-115,-84,-81,-76,-77,-78,-79,-45,]),'LESS_THAN':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[69,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,69,69,-83,-84,69,-115,-83,-73,-74,69,-83,-85,-119,69,-115,-84,-81,-76,-77,-78,-79,-45,]),'GREATER_THAN':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[70,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,70,70,-83,-84,70,-115,-83,-73,-74,70,-83,-85,-119,70,-115,-84,-81,-76,-77,-78,-79,-45,]),'LESS_EQUAL':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[71,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,71,71,-83,-84,71,-115,-83,-73,-74,71,-83,-85,-119,71,-115,-84,-81,-76,-77,-78,-79,-45,]),'GREATER_EQUAL':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[72,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,72,72,-83,-84,72,-115,-83,-73,-74,72,-83,-85,-119,72,-115,-84,-81,-76,-77,-78,-79,-45,]),'IDENTICAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[73,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,73,73,-83,-84,73,-115,-83,-73,-74,73,-83,-85,-119,73,-115,-84,-81,-76,-77,-78,-79,-45,]),'NOT_IDENTICAL_TO':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[74,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,74,74,-83,-84,74,-115,-83,-73,-74,74,-83,-85,-119,74,-115,-84,-81,-76,-77,-78,-79,-45,]),'DIFFERENT':([27,29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,84,90,91,96,97,101,134,135,136,137,145,147,148,153,156,168,169,184,185,186,187,192,],[75,-112,-83,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,75,75,-83,-84,75,-115,-83,-73,-74,75,-83,-85,-119,75,-115,-84,-81,-76,-77,-78,-79,-45,]),'LOGICAL_AND':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,101,134,135,136,137,145,147,148,156,184,185,186,187,192,],[-112,86,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,86,-115,86,-115,86,-73,-74,-120,86,-85,-119,-115,-76,-77,-78,-79,-45,]),'LOGICAL_OR':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,101,134,135,136,137,145,147,148,156,184,185,186,187,192,],[-112,87,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,87,-115,87,-115,87,-73,-74,-120,87,-85,-119,-115,-76,-77,-78,-79,-45,]),'LOGICAL_XOR':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,101,134,135,136,137,145,147,148,156,184,185,186,187,192,],[-112,88,-84,-115,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,88,-115,88,-115,88,-73,-74,-120,88,-85,-119,-115,-76,-77,-78,-79,-45,]),'TIMES':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-112,-83,-84,-115,128,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,-83,-84,-115,-83,128,128,-120,-83,-85,-119,-115,-84,-81,-76,-77,-78,-79,-45,]),'DIVIDE':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-112,-83,-84,-115,129,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,-83,-84,-115,-83,129,129,-120,-83,-85,-119,-115,-84,-81,-76,-77,-78,-79,-45,]),'MOD':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-112,-83,-84,-115,130,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,-83,-84,-115,-83,130,130,-120,-83,-85,-119,-115,-84,-81,-76,-77,-78,-79,-45,]),'POWER':([29,32,39,41,46,50,51,52,53,54,55,56,57,58,59,79,82,91,96,101,134,135,136,137,145,147,148,156,168,169,184,185,186,187,192,],[-112,-83,-84,-115,131,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-83,-115,-83,-84,-115,-83,131,131,-120,-83,-85,-119,-115,-84,-81,-76,-77,-78,-79,-45,]),'DOT':([29,32,39,46,50,51,52,53,54,55,56,57,58,59,82,91,94,95,96,97,98,99,100,101,102,103,104,105,114,115,124,134,135,136,137,145,147,148,151,153,156,162,174,180,181,184,185,186,187,192,199,222,223,225,228,235,238,247,258,259,263,264,265,276,277,],[-112,-83,-84,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-115,-83,157,-59,-62,-63,-64,-65,-66,-115,-68,-69,-70,-71,-47,-48,157,-117,-73,-74,-120,-118,-85,-119,157,-63,-115,-72,-46,157,-37,-76,-77,-78,-79,-45,-108,-60,-61,-67,-138,-40,-36,-107,-145,-137,-30,-163,157,-29,-164,]),'RIGHT_BRACKET':([29,32,39,46,50,51,52,53,54,55,56,57,58,59,82,96,97,98,99,100,101,102,103,104,105,114,115,117,134,135,136,137,145,147,148,162,164,165,166,168,169,174,176,178,179,181,184,185,186,187,192,199,225,226,228,235,238,247,258,259,260,261,263,264,269,276,277,],[-112,-83,-84,-75,-44,-80,-81,-82,-109,-110,-111,-113,-114,-116,-115,-62,-63,-64,-65,-66,-115,-68,-69,-70,-71,-47,-48,177,-117,-73,-74,-120,-118,-85,-119,-72,228,-139,-141,-62,-81,-46,236,-143,-144,-37,-76,-77,-78,-79,-45,-108,-67,258,-138,-40,-36,-107,-145,-137,-140,-142,-30,-163,280,-29,-164,]),'ARRAY':([37,43,48,49,93,106,108,113,116,118,119,120,121,122,123,157,158,161,163,221,229,230,233,237,253,267,],[107,107,-57,-58,107,107,107,107,107,-50,-51,-52,-53,-54,107,107,107,-49,107,-133,107,107,107,107,107,107,]),'LEFT_BRACKET':([37,41,43,48,49,50,93,101,106,108,113,116,118,119,120,121,122,123,156,157,158,161,163,182,192,221,229,230,233,237,253,267,],[108,117,108,-57,-58,-44,108,160,108,108,108,108,-50,-51,-52,-53,-54,108,160,108,108,-49,108,239,-45,-133,108,108,108,108,108,108,]),'NEW':([37,43,48,49,93,106,108,113,116,118,119,120,121,122,123,157,158,161,163,221,229,230,233,237,253,267,],[110,110,-57,-58,110,110,110,110,-49,-50,-51,-52,-53,-54,110,110,110,-49,110,-133,110,110,110,110,110,110,]),'PLUS_PLUS':([41,50,101,156,191,192,],[114,-44,114,114,114,-45,]),'MINUS_MINUS':([41,50,101,156,191,192,],[115,-44,115,115,115,-45,]),'EQUALS':([41,50,101,156,177,191,192,208,236,],[116,-44,161,161,237,161,-45,253,267,]),'PLUS_EQUALS':([41,50,101,156,191,192,],[118,-44,118,118,118,-45,]),'MINUS_EQUALS':([41,50,101,156,191,192,],[119,-44,119,119,119,-45,]),'TIMES_EQUALS':([41,50,101,156,191,192,],[120,-44,120,120,120,-45,]),'DIVIDE_EQUALS':([41,50,101,156,191,192,],[121,-44,121,121,121,-45,]),'MOD_EQUALS':([41,50,101,156,191,192,],[122,-44,122,122,122,-45,]),'CALL':([50,101,156,192,],[133,159,159,-45,]),'LEFT_BRACE':([76,78,92,143,148,196,200,206,232,246,250,262,],[139,139,149,139,-119,139,139,139,139,139,139,139,]),'INT_TYPE':([93,125,150,],[154,154,154,]),'FLOAT_TYPE':([93,125,150,],[155,155,155,]),'STDIN':([111,112,],[172,173,]),'ELSE':([138,193,195,199,244,247,271,],[196,196,-90,-108,-91,-107,-92,]),'ELSEIF':([138,193,195,199,244,247,271,],[197,197,-90,-108,-91,-107,-92,]),'PUBLIC':([149,199,209,211,212,213,214,215,247,252,255,256,272,275,],[217,-108,217,-152,-154,-155,-156,-157,-107,-28,-153,-158,-27,-159,]),'PRIVATE':([149,199,209,211,212,213,214,215,247,252,255,256,272,275,],[218,-108,218,-152,-154,-155,-156,-157,-107,-28,-153,-158,-27,-159,]),'PROTECTED':([149,199,209,211,212,213,214,215,247,252,255,256,272,275,],[219,-108,219,-152,-154,-155,-156,-157,-107,-28,-153,-158,-27,-159,]),'KEY_VALUE':([167,168,169,],[230,-143,-144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,139,],[3,198,]),'statement2':([2,3,139,198,],[4,62,4,62,]),'statement':([2,3,81,139,198,201,],[5,5,144,5,5,249,]),'if_statement':([2,3,139,198,],[6,6,6,6,]),'while_statement':([2,3,139,198,],[7,7,7,7,]),'for_statement':([2,3,139,198,],[8,8,8,8,]),'function_statement':([2,3,139,198,216,],[9,9,9,9,256,]),'class_declaration':([2,3,139,198,],[12,12,12,12,]),'print_statement':([2,3,81,139,198,201,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,81,139,198,201,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,37,43,81,93,106,108,113,123,139,157,158,163,198,201,229,230,233,237,253,267,],[15,15,104,104,15,104,104,104,104,104,15,104,104,104,15,15,104,104,104,104,104,104,]),'assignment_statement':([2,3,37,43,81,93,106,108,113,123,132,139,157,158,163,198,201,229,230,233,237,242,253,267,],[16,16,103,103,16,103,103,103,103,103,190,16,103,103,103,16,16,103,103,103,103,270,103,103,]),'array_declaration_statement':([2,3,81,139,198,201,],[17,17,17,17,17,17,]),'function_call':([2,3,37,43,81,93,106,108,113,123,139,157,158,159,163,198,201,229,230,233,237,253,267,],[20,20,100,100,20,100,100,100,100,100,20,100,100,225,100,20,20,100,100,100,100,100,100,]),'return_statement':([2,3,81,139,198,201,],[21,21,21,21,21,21,]),'array_indexing':([2,3,37,43,81,93,106,108,113,123,139,157,158,163,198,201,229,230,233,237,253,267,],[22,22,99,99,22,99,99,99,99,99,22,99,99,99,22,22,99,99,99,99,99,99,]),'array_add_element':([2,3,81,139,198,201,],[23,23,23,23,23,23,]),'array_modify_element':([2,3,81,139,198,201,],[24,24,24,24,24,24,]),'array_remove_element':([2,3,81,139,198,201,],[25,25,25,25,25,25,]),'array_count_elements':([2,3,81,139,198,201,],[26,26,26,26,26,26,]),'expression':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[27,27,84,90,97,97,84,84,84,137,84,27,90,84,153,97,97,97,97,90,84,84,84,84,27,90,97,97,97,27,27,97,97,97,97,97,97,]),'parenthesized_condition':([2,3,28,30,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,197,198,201,229,230,233,237,253,267,],[29,29,76,78,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,246,29,29,29,29,29,29,29,29,]),'for_part1':([2,3,139,198,],[31,31,31,31,]),'condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[32,32,79,91,32,32,134,32,32,32,91,32,91,145,91,32,32,32,32,91,32,32,32,32,32,91,32,32,32,32,32,32,32,32,32,32,32,]),'print_function':([2,3,81,139,198,201,],[37,37,37,37,37,37,]),'variable':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,126,127,128,129,130,131,132,139,146,150,157,158,159,163,170,198,201,216,229,230,233,237,242,251,253,267,278,284,],[41,41,82,82,101,101,82,82,82,82,82,41,82,82,156,101,101,101,101,82,182,183,82,82,82,82,191,41,208,82,101,101,224,101,208,41,41,257,101,101,101,101,191,208,101,101,282,286,]),'function_name':([2,3,37,43,81,93,106,108,113,123,139,157,158,159,163,198,201,229,230,233,237,253,267,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'term':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[46,46,46,46,46,46,46,135,136,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'factor':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,184,185,186,187,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'simple_condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'negated_condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'complex_condition':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'relational_expression':([2,3,31,35,37,43,60,64,65,66,77,81,83,85,93,106,108,113,123,125,128,129,130,131,139,150,157,158,163,198,201,229,230,233,237,253,267,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'relational_operator':([27,84,90,97,137,153,],[66,66,66,66,66,66,]),'for_part3':([31,79,],[80,141,]),'logical_operator':([32,79,91,134,145,],[85,85,85,85,85,]),'arguments':([37,43,93,123,233,],[94,124,151,180,265,]),'argument':([37,43,93,106,108,113,123,157,158,163,229,230,233,237,253,267,],[95,95,95,162,166,174,95,222,223,166,166,261,95,268,274,279,]),'array':([37,43,93,106,108,113,116,123,157,158,163,229,230,233,237,253,267,],[98,98,98,98,98,98,175,98,98,98,98,98,98,98,98,98,98,]),'anonymous_function':([37,43,93,106,108,113,123,157,158,163,229,230,233,237,253,267,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'object_creation':([37,43,93,106,108,113,123,157,158,163,229,230,233,237,253,267,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'casting':([37,43,93,106,108,113,123,157,158,163,229,230,233,237,253,267,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'assignment_operator':([41,101,156,191,],[113,113,113,113,]),'block':([76,78,143,196,200,206,232,246,250,262,],[138,140,204,245,204,252,263,271,272,276,]),'statement_list':([81,],[142,]),'casting_type':([93,125,150,],[152,152,152,]),'array_elements':([108,163,],[164,227,]),'array_argument':([108,163,229,],[165,165,260,]),'clave':([108,117,160,163,229,239,],[167,176,226,167,167,269,]),'assignment_list':([132,],[188,]),'else_if_extended':([138,],[193,]),'if_part3':([138,193,],[194,243,]),'if_part2':([138,193,],[195,244,]),'for_part4':([143,200,],[203,248,]),'parameters':([146,170,],[205,231,]),'parameter':([146,170,251,],[207,207,273,]),'class_statements':([149,],[209,]),'class_statement':([149,209,],[211,255,]),'method_declaration':([149,209,],[212,212,]),'property_declaration':([149,209,],[213,213,]),'visibility_operator':([149,209,],[216,216,]),'variable_list':([278,],[281,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',29),
  ('statements -> statement2','statements',1,'p_statements','parser.py',34),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',35),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',43),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',44),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',45),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',46),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',47),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',48),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',49),
  ('statement2 -> class_declaration','statement2',1,'p_statement2','parser.py',50),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',54),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',55),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',56),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',57),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',58),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',59),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',60),
  ('statement -> function_call','statement',1,'p_statement','parser.py',61),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',62),
  ('statement -> array_indexing','statement',1,'p_statement','parser.py',63),
  ('statement -> array_add_element','statement',1,'p_statement','parser.py',64),
  ('statement -> array_modify_element','statement',1,'p_statement','parser.py',65),
  ('statement -> array_remove_element','statement',1,'p_statement','parser.py',66),
  ('statement -> array_count_elements','statement',1,'p_statement','parser.py',67),
  ('statement -> expression','statement',1,'p_statement','parser.py',68),
  ('function_statement -> FUNCTION NAME LEFT_PAREN parameters RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',74),
  ('function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block','function_statement',5,'p_function_statement','parser.py',75),
  ('anonymous_function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN block','anonymous_function',5,'p_anonymous_function','parser.py',83),
  ('anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block','anonymous_function',4,'p_anonymous_function','parser.py',84),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',91),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser.py',92),
  ('parameter -> variable','parameter',1,'p_parameter','parser.py',100),
  ('parameter -> variable EQUALS argument','parameter',3,'p_parameter','parser.py',101),
  ('return_statement -> RETURN arguments','return_statement',2,'p_return_statement','parser.py',108),
  ('function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN','function_call',4,'p_function_call','parser.py',113),
  ('function_call -> function_name LEFT_PAREN RIGHT_PAREN','function_call',3,'p_function_call','parser.py',114),
  ('function_name -> NAME','function_name',1,'p_function_name','parser.py',121),
  ('function_name -> variable','function_name',1,'p_function_name','parser.py',122),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',128),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',133),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',137),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',138),
  ('variable -> ID','variable',1,'p_variable','parser.py',147),
  ('variable -> ID CALL NAME','variable',3,'p_variable','parser.py',148),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',156),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',157),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',158),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',166),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',167),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',168),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',169),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',170),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',171),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',176),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',177),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',184),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',185),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',189),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',190),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',191),
  ('argument -> STRING','argument',1,'p_argument','parser.py',199),
  ('argument -> expression','argument',1,'p_argument','parser.py',200),
  ('argument -> array','argument',1,'p_argument','parser.py',201),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',202),
  ('argument -> function_call','argument',1,'p_argument','parser.py',203),
  ('argument -> variable CALL function_call','argument',3,'p_argument','parser.py',204),
  ('argument -> anonymous_function','argument',1,'p_argument','parser.py',205),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',206),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',207),
  ('argument -> object_creation','argument',1,'p_argument','parser.py',208),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',209),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',219),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',220),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',221),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',229),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',230),
  ('term -> term MOD factor','term',3,'p_term','parser.py',231),
  ('term -> term POWER factor','term',3,'p_term','parser.py',232),
  ('term -> factor','term',1,'p_term','parser.py',233),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',240),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',241),
  ('factor -> condition','factor',1,'p_factor','parser.py',242),
  ('factor -> STRING','factor',1,'p_factor','parser.py',243),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',244),
  ('if_statement -> IF parenthesized_condition block','if_statement',3,'p_if_statement','parser.py',272),
  ('if_statement -> IF parenthesized_condition block else_if_extended','if_statement',4,'p_if_statement','parser.py',273),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',274),
  ('if_statement -> IF parenthesized_condition block if_part3','if_statement',4,'p_if_statement','parser.py',275),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',284),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',285),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',293),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',297),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',302),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',307),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',308),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',315),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',316),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',323),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',324),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',331),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',332),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',336),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',337),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',345),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',346),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',355),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',356),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',364),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',365),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',366),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',367),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',371),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',372),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',373),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',374),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',378),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',382),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',386),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',390),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',394),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',395),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',396),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',397),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',398),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',399),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',400),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',401),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',402),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',406),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',407),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',408),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',413),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',417),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',418),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',423),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',427),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',428),
  ('array_elements -> array_argument','array_elements',1,'p_array_elements','parser.py',435),
  ('array_elements -> array_elements COMMA array_argument','array_elements',3,'p_array_elements','parser.py',436),
  ('array_argument -> argument','array_argument',1,'p_array_argument','parser.py',445),
  ('array_argument -> clave KEY_VALUE argument','array_argument',3,'p_array_argument','parser.py',446),
  ('clave -> STRING','clave',1,'p_clave','parser.py',453),
  ('clave -> INTEGER','clave',1,'p_clave','parser.py',454),
  ('array_indexing -> variable LEFT_BRACKET clave RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',459),
  ('array_add_element -> variable LEFT_BRACKET RIGHT_BRACKET EQUALS argument','array_add_element',5,'p_array_add_element','parser.py',463),
  ('array_modify_element -> variable LEFT_BRACKET clave RIGHT_BRACKET EQUALS argument','array_modify_element',6,'p_array_modify_element','parser.py',467),
  ('array_remove_element -> UNSET LEFT_PAREN variable LEFT_BRACKET clave RIGHT_BRACKET RIGHT_PAREN','array_remove_element',7,'p_array_remove_element','parser.py',471),
  ('array_count_elements -> COUNT LEFT_PAREN variable RIGHT_PAREN','array_count_elements',4,'p_array_count_elements','parser.py',475),
  ('class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE','class_declaration',5,'p_class_declaration','parser.py',480),
  ('class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE','class_declaration',4,'p_class_declaration','parser.py',481),
  ('class_statements -> class_statement','class_statements',1,'p_class_statements','parser.py',488),
  ('class_statements -> class_statements class_statement','class_statements',2,'p_class_statements','parser.py',489),
  ('class_statement -> method_declaration','class_statement',1,'p_class_statement','parser.py',497),
  ('class_statement -> property_declaration','class_statement',1,'p_class_statement','parser.py',498),
  ('class_statement -> ONE_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',499),
  ('class_statement -> MULTI_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',500),
  ('method_declaration -> visibility_operator function_statement','method_declaration',2,'p_method_declaration','parser.py',504),
  ('property_declaration -> visibility_operator variable SEMICOLON','property_declaration',3,'p_property_declaration','parser.py',508),
  ('visibility_operator -> PUBLIC','visibility_operator',1,'p_visibility_operator','parser.py',512),
  ('visibility_operator -> PRIVATE','visibility_operator',1,'p_visibility_operator','parser.py',513),
  ('visibility_operator -> PROTECTED','visibility_operator',1,'p_visibility_operator','parser.py',514),
  ('object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN','object_creation',4,'p_object_creation','parser.py',518),
  ('object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN','object_creation',5,'p_object_creation','parser.py',519),
]
