
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ARRAY AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE KEY_VALUE LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POWER PRINT PRIVATE PROTECTED PUBLIC REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROMprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENT\n                  | class_declarationstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | return_statement\n                 | expressionfunction_statement : FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION NAME LEFT_PAREN RIGHT_PAREN blockanonymous_function : FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block\n                          | FUNCTION LEFT_PAREN RIGHT_PAREN blockreturn_statement : RETURN argumentsfunction_call : function_name LEFT_PAREN arguments RIGHT_PAREN\n                     | function_name LEFT_PAREN RIGHT_PARENfunction_name : NAME\n                     | variablefgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : ID\n                | ID CALL NAMEassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | array\n                | array_indexing\n                | function_call\n                | variable CALL function_call\n                | anonymous_function\n                | assignment_statement\n                | fgets_statement\n                | object_creation\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | term MOD factor\n            | term POWER factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block\n                    | IF parenthesized_condition block else_if_extended\n                    | IF parenthesized_condition block else_if_extended if_part3\n                    | IF parenthesized_condition block if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition blockif_part3 : ELSE blockwhile_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : array_argument\n                      | array_elements COMMA array_argumentarray_argument : argument\n                      | clave KEY_VALUE argumentclave : STRING\n             | INTEGERarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKETclass_declaration : CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE\n                         | CLASS NAME LEFT_BRACE RIGHT_BRACEclass_statements : class_statement\n                        | class_statements class_statementclass_statement : method_declaration\n                       | property_declaration\n                       | ONE_LINE_COMMENT\n                       | MULTI_LINE_COMMENTmethod_declaration : visibility_operator function_statementproperty_declaration : visibility_operator variable SEMICOLONvisibility_operator : PUBLIC\n                           | PRIVATE\n                           | PROTECTEDobject_creation : NEW NAME LEFT_PAREN RIGHT_PAREN\n                       | NEW NAME LEFT_PAREN arguments RIGHT_PAREN'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,53,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,54,55,72,127,128,129,130,138,176,177,178,181,182,185,186,187,190,191,192,193,194,195,196,220,221,222,224,225,228,229,230,231,243,244,245,],[10,10,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,10,-84,-87,195,-77,-79,-80,10,-98,-92,-90,-91,195,-137,-138,-140,-141,-142,-143,-78,-81,-83,-97,-89,-23,-136,-139,-144,-82,-22,-145,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,54,55,72,127,128,129,130,138,176,177,178,181,182,185,186,187,190,191,192,193,194,195,196,220,221,222,224,225,228,229,230,231,243,244,245,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,11,-84,-87,196,-77,-79,-80,11,-98,-92,-90,-91,196,-137,-138,-140,-141,-142,-143,-78,-81,-83,-97,-89,-23,-136,-139,-144,-82,-22,-145,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,54,55,72,73,127,128,129,130,176,177,178,181,182,184,185,186,187,191,220,221,222,224,225,228,229,243,244,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,18,-76,18,-84,-87,-77,-79,-80,18,-98,18,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,54,55,72,73,127,128,129,130,176,177,178,181,182,184,185,186,187,191,220,221,222,224,225,228,229,243,244,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,19,-76,19,-84,-87,-77,-79,-80,19,-98,19,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'IF':([2,3,4,6,7,8,9,10,11,12,54,55,72,127,128,129,130,176,177,178,181,182,185,186,187,191,220,221,222,224,225,228,229,243,244,],[23,23,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,23,-84,-87,-77,-79,-80,23,-98,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,54,55,72,127,128,129,130,176,177,178,181,182,185,186,187,191,220,221,222,224,225,228,229,243,244,],[25,25,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,25,-84,-87,-77,-79,-80,25,-98,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,32,37,40,41,54,55,72,85,98,100,105,108,109,110,111,112,113,114,127,128,129,130,135,146,147,150,152,159,176,177,178,181,182,185,186,187,191,197,198,199,200,202,210,211,214,220,221,222,224,225,228,229,243,244,],[28,28,-2,-5,-6,-7,-8,-9,-10,-11,101,101,-48,-49,-3,-4,-88,101,101,101,101,-40,-41,-42,-43,-44,-45,101,-76,28,-84,-87,101,101,101,-40,101,101,-77,-79,-80,28,-98,-92,-90,-91,-137,28,-146,-147,-148,-123,101,101,101,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'CLASS':([2,3,4,6,7,8,9,10,11,12,54,55,72,127,128,129,130,176,177,178,181,182,185,186,187,191,220,221,222,224,225,228,229,243,244,],[31,31,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,31,-84,-87,-77,-79,-80,31,-98,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,54,55,72,73,127,128,129,130,176,177,178,181,182,184,185,186,187,191,220,221,222,224,225,228,229,243,244,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,33,-76,33,-84,-87,-77,-79,-80,33,-98,33,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,32,37,40,41,54,55,72,73,85,98,100,105,108,109,110,111,112,113,114,127,128,129,130,135,146,147,150,152,159,176,177,178,181,182,184,185,186,187,191,202,210,211,214,220,221,222,224,225,228,229,243,244,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,34,34,-48,-49,-3,-4,-88,34,34,34,34,34,-40,-41,-42,-43,-44,-45,34,-76,34,-84,-87,34,34,34,-40,34,34,-77,-79,-80,34,-98,34,-92,-90,-91,-137,-123,34,34,34,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,54,55,72,73,127,128,129,130,176,177,178,181,182,184,185,186,187,191,220,221,222,224,225,228,229,243,244,],[37,37,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,37,-76,37,-84,-87,-77,-79,-80,37,-98,37,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'FOR':([2,3,4,6,7,8,9,10,11,12,54,55,72,127,128,129,130,176,177,178,181,182,185,186,187,191,220,221,222,224,225,228,229,243,244,],[39,39,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,39,-84,-87,-77,-79,-80,39,-98,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,54,55,72,73,127,128,129,130,176,177,178,181,182,184,185,186,187,191,220,221,222,224,225,228,229,243,244,],[40,40,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,40,-76,40,-84,-87,-77,-79,-80,40,-98,40,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,54,55,72,73,127,128,129,130,176,177,178,181,182,184,185,186,187,191,220,221,222,224,225,228,229,243,244,],[41,41,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,41,-76,41,-84,-87,-77,-79,-80,41,-98,41,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'ID':([2,3,4,6,7,8,9,10,11,12,26,30,32,37,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,73,75,77,78,79,80,85,98,100,105,108,109,110,111,112,113,114,116,117,118,119,120,121,127,128,129,130,135,139,146,147,148,150,152,159,172,176,177,178,181,182,184,185,186,187,191,197,198,199,200,202,210,211,214,218,219,220,221,222,224,225,228,229,243,244,248,251,],[42,42,-2,-5,-6,-7,-8,-9,-10,-11,42,42,42,42,-48,-49,42,-3,-4,42,42,42,-111,-112,-113,-114,-115,-116,-117,-118,-119,42,-88,42,42,42,-120,-121,-122,42,42,42,42,-40,-41,-42,-43,-44,-45,42,42,42,42,42,42,42,-76,42,-84,-87,42,42,42,42,42,-40,42,42,-86,-77,-79,-80,42,-98,42,-92,-90,-91,-137,42,-146,-147,-148,-123,42,42,42,-85,42,-78,-81,-83,-97,-89,-23,-136,-82,-22,42,42,]),'NAME':([2,3,4,6,7,8,9,10,11,12,28,31,32,37,40,41,54,55,72,73,85,98,100,102,105,108,109,110,111,112,113,114,122,127,128,129,130,135,146,147,148,150,152,159,176,177,178,181,182,184,185,186,187,191,202,210,211,214,220,221,222,224,225,228,229,243,244,],[29,29,-2,-5,-6,-7,-8,-9,-10,-11,81,84,29,29,-48,-49,-3,-4,-88,29,29,29,29,160,29,-40,-41,-42,-43,-44,-45,29,175,-76,29,-84,-87,29,29,29,29,-40,29,29,-77,-79,-80,29,-98,29,-92,-90,-91,-137,-123,29,29,29,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'INTEGER':([2,3,4,6,7,8,9,10,11,12,26,30,32,37,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,73,75,77,78,79,80,85,98,100,105,108,109,110,111,112,113,114,116,117,118,119,120,127,128,129,130,135,139,146,147,149,150,152,159,172,176,177,178,181,182,184,185,186,187,191,202,210,211,214,218,220,221,222,224,225,228,229,243,244,],[44,44,-2,-5,-6,-7,-8,-9,-10,-11,44,44,44,44,-48,-49,44,-3,-4,44,44,44,-111,-112,-113,-114,-115,-116,-117,-118,-119,44,-88,44,44,44,-120,-121,-122,44,44,158,44,-40,-41,-42,-43,-44,-45,44,44,44,44,44,44,-76,44,-84,-87,158,44,44,44,207,-40,158,158,-86,-77,-79,-80,44,-98,44,-92,-90,-91,-137,-123,158,44,44,-85,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'FLOAT':([2,3,4,6,7,8,9,10,11,12,26,30,32,37,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,73,75,77,78,79,80,85,98,100,105,108,109,110,111,112,113,114,116,117,118,119,120,127,128,129,130,135,139,146,147,150,152,159,172,176,177,178,181,182,184,185,186,187,191,202,210,211,214,218,220,221,222,224,225,228,229,243,244,],[45,45,-2,-5,-6,-7,-8,-9,-10,-11,45,45,45,45,-48,-49,45,-3,-4,45,45,45,-111,-112,-113,-114,-115,-116,-117,-118,-119,45,-88,45,45,45,-120,-121,-122,45,45,45,45,-40,-41,-42,-43,-44,-45,45,45,45,45,45,45,-76,45,-84,-87,45,45,45,45,-40,45,45,-86,-77,-79,-80,45,-98,45,-92,-90,-91,-137,-123,45,45,45,-85,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'LEFT_PAREN':([2,3,4,6,7,8,9,10,11,12,23,25,26,29,30,32,33,34,35,36,37,39,40,41,42,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,73,75,77,78,79,80,81,85,93,98,99,100,101,105,108,109,110,111,112,113,114,116,117,118,119,120,127,128,129,130,135,139,145,146,147,150,152,159,160,172,175,176,177,178,180,181,182,184,185,186,187,191,202,205,210,211,214,218,220,221,222,224,225,228,229,243,244,],[30,30,-2,-5,-6,-7,-8,-9,-10,-11,69,69,75,-29,75,85,103,104,-30,114,116,121,-48,-49,-35,75,-3,-4,30,30,30,-111,-112,-113,-114,-115,-116,-117,-118,-119,75,-88,30,75,75,-120,-121,-122,135,139,-30,116,152,116,159,116,-40,-41,-42,-43,-44,-45,116,75,30,30,30,30,-76,30,-84,-87,116,75,-30,116,116,-40,116,116,214,-86,-36,-77,-79,-80,69,30,-98,30,-92,-90,-91,-137,-123,-30,116,116,116,-85,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'TRUE':([2,3,4,6,7,8,9,10,11,12,26,30,32,37,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,73,75,77,78,79,80,85,98,100,105,108,109,110,111,112,113,114,116,117,118,119,120,127,128,129,130,135,139,146,147,150,152,159,172,176,177,178,181,182,184,185,186,187,191,202,210,211,214,218,220,221,222,224,225,228,229,243,244,],[49,49,-2,-5,-6,-7,-8,-9,-10,-11,49,49,49,49,-48,-49,49,-3,-4,49,49,49,-111,-112,-113,-114,-115,-116,-117,-118,-119,49,-88,49,49,49,-120,-121,-122,49,49,49,49,-40,-41,-42,-43,-44,-45,49,49,49,49,49,49,-76,49,-84,-87,49,49,49,49,-40,49,49,-86,-77,-79,-80,49,-98,49,-92,-90,-91,-137,-123,49,49,49,-85,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'FALSE':([2,3,4,6,7,8,9,10,11,12,26,30,32,37,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,73,75,77,78,79,80,85,98,100,105,108,109,110,111,112,113,114,116,117,118,119,120,127,128,129,130,135,139,146,147,150,152,159,172,176,177,178,181,182,184,185,186,187,191,202,210,211,214,218,220,221,222,224,225,228,229,243,244,],[50,50,-2,-5,-6,-7,-8,-9,-10,-11,50,50,50,50,-48,-49,50,-3,-4,50,50,50,-111,-112,-113,-114,-115,-116,-117,-118,-119,50,-88,50,50,50,-120,-121,-122,50,50,50,50,-40,-41,-42,-43,-44,-45,50,50,50,50,50,50,-76,50,-84,-87,50,50,50,50,-40,50,50,-86,-77,-79,-80,50,-98,50,-92,-90,-91,-137,-123,50,50,50,-85,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'LOGICAL_NOT':([2,3,4,6,7,8,9,10,11,12,26,30,32,37,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,73,75,77,78,79,80,85,98,100,105,108,109,110,111,112,113,114,116,117,118,119,120,127,128,129,130,135,139,146,147,150,152,159,172,176,177,178,181,182,184,185,186,187,191,202,210,211,214,218,220,221,222,224,225,228,229,243,244,],[52,52,-2,-5,-6,-7,-8,-9,-10,-11,52,52,52,52,-48,-49,52,-3,-4,52,52,52,-111,-112,-113,-114,-115,-116,-117,-118,-119,52,-88,52,52,52,-120,-121,-122,52,52,52,52,-40,-41,-42,-43,-44,-45,52,52,52,52,52,52,-76,52,-84,-87,52,52,52,52,-40,52,52,-86,-77,-79,-80,52,-98,52,-92,-90,-91,-137,-123,52,52,52,-85,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,54,55,72,127,129,130,176,177,178,182,185,186,187,191,220,221,222,224,225,228,229,243,244,],[53,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,-84,-87,-77,-79,-80,-98,-92,-90,-91,-137,-78,-81,-83,-97,-89,-23,-136,-82,-22,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,54,55,72,127,128,129,130,138,176,177,178,181,182,185,186,187,190,191,192,193,194,195,196,220,221,222,224,225,228,229,230,231,243,244,245,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-88,-76,182,-84,-87,191,-77,-79,-80,224,-98,-92,-90,-91,229,-137,-138,-140,-141,-142,-143,-78,-81,-83,-97,-89,-23,-136,-139,-144,-82,-22,-145,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,21,22,24,26,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,86,87,88,89,90,91,92,93,94,95,96,97,106,107,115,121,123,124,125,126,132,134,136,137,151,163,164,166,167,168,169,170,171,172,173,175,182,183,201,203,204,206,209,216,217,218,224,232,233,234,238,239,242,246,247,252,],[55,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-102,73,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,73,-105,-47,-50,-53,-54,-55,-56,-57,-105,-59,-60,-61,-62,-38,-39,-26,172,-107,-64,-65,-110,185,-108,-75,-109,-63,-37,-126,-28,-67,-68,-69,-70,218,-86,-93,-36,-98,185,-46,-51,-52,-58,-128,-31,-27,-85,-97,245,-135,-127,-25,-149,-94,-24,-150,-32,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,21,22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,73,74,82,83,86,87,88,89,90,91,92,93,94,95,96,97,106,107,114,115,123,124,125,126,131,133,134,135,136,137,140,141,142,143,144,145,151,154,155,157,158,159,162,163,164,165,166,167,168,169,170,175,182,188,201,203,204,206,208,209,212,214,216,217,224,226,233,234,235,236,238,239,240,246,247,249,250,252,253,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,132,-105,136,137,-47,-50,-53,-54,-55,-56,-57,-105,-59,-60,-61,-62,-38,-39,166,-26,-107,-64,-65,-110,183,-95,-108,189,-75,-109,201,202,136,-124,-125,-105,-63,-129,-131,-53,-72,213,216,-37,-126,217,-28,-67,-68,-69,-70,-36,-98,227,-46,-51,-52,-58,234,-128,237,239,-31,-27,-97,-96,-135,-127,-130,-132,-25,-149,247,-24,-150,252,-33,-32,-34,]),'COMMA':([13,14,15,16,17,18,19,20,21,22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,74,83,86,87,88,89,90,91,92,93,94,95,96,97,106,107,115,123,124,125,126,131,133,134,136,137,140,142,145,151,153,154,155,157,158,161,163,164,165,166,167,168,169,170,171,173,175,182,188,201,203,204,206,208,209,212,216,217,224,226,233,234,235,236,238,239,240,241,242,246,247,249,250,252,253,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-105,-74,147,-50,-53,-54,-55,-56,-57,-105,-59,-60,-61,-62,-38,-39,147,-107,-64,-65,-110,184,-95,-108,-75,-109,147,-54,-105,-63,210,-129,-131,-53,-72,215,-37,-126,147,-28,-67,-68,-69,-70,219,-93,-36,-98,210,-46,-51,-52,-58,210,-128,210,-31,-27,-97,-96,-135,-127,-130,-132,-25,-149,147,248,-94,-24,-150,251,-33,-32,-34,]),'PLUS':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[56,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,56,56,-74,56,-105,-74,-64,-65,56,-74,-75,-109,56,-105,-72,-67,-68,-69,-70,-36,]),'MINUS':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[57,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,57,57,-74,57,-105,-74,-64,-65,57,-74,-75,-109,57,-105,-72,-67,-68,-69,-70,-36,]),'EQUAL_TO':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[59,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,59,59,-74,59,-105,-74,-64,-65,59,-74,-75,-109,59,-105,-72,-67,-68,-69,-70,-36,]),'NOT_EQUAL_TO':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[60,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,60,60,-74,60,-105,-74,-64,-65,60,-74,-75,-109,60,-105,-72,-67,-68,-69,-70,-36,]),'LESS_THAN':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[61,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,61,61,-74,61,-105,-74,-64,-65,61,-74,-75,-109,61,-105,-72,-67,-68,-69,-70,-36,]),'GREATER_THAN':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[62,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,62,62,-74,62,-105,-74,-64,-65,62,-74,-75,-109,62,-105,-72,-67,-68,-69,-70,-36,]),'LESS_EQUAL':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[63,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,63,63,-74,63,-105,-74,-64,-65,63,-74,-75,-109,63,-105,-72,-67,-68,-69,-70,-36,]),'GREATER_EQUAL':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[64,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,64,64,-74,64,-105,-74,-64,-65,64,-74,-75,-109,64,-105,-72,-67,-68,-69,-70,-36,]),'IDENTICAL_TO':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[65,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,65,65,-74,65,-105,-74,-64,-65,65,-74,-75,-109,65,-105,-72,-67,-68,-69,-70,-36,]),'NOT_IDENTICAL_TO':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[66,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,66,66,-74,66,-105,-74,-64,-65,66,-74,-75,-109,66,-105,-72,-67,-68,-69,-70,-36,]),'DIFFERENT':([22,24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,76,82,83,89,93,123,124,125,126,134,136,137,142,145,158,167,168,169,170,175,],[67,-102,-74,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,67,67,-74,67,-105,-74,-64,-65,67,-74,-75,-109,67,-105,-72,-67,-68,-69,-70,-36,]),'LOGICAL_AND':([24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,83,93,123,124,125,126,134,136,137,145,167,168,169,170,175,],[-102,78,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,78,-105,78,-105,78,-64,-65,-110,78,-75,-109,-105,-67,-68,-69,-70,-36,]),'LOGICAL_OR':([24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,83,93,123,124,125,126,134,136,137,145,167,168,169,170,175,],[-102,79,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,79,-105,79,-105,79,-64,-65,-110,79,-75,-109,-105,-67,-68,-69,-70,-36,]),'LOGICAL_XOR':([24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,83,93,123,124,125,126,134,136,137,145,167,168,169,170,175,],[-102,80,-105,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,80,-105,80,-105,80,-64,-65,-110,80,-75,-109,-105,-67,-68,-69,-70,-36,]),'TIMES':([24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,83,93,123,124,125,126,134,136,137,145,158,167,168,169,170,175,],[-102,-74,-105,117,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,-74,-105,-74,117,117,-110,-74,-75,-109,-105,-72,-67,-68,-69,-70,-36,]),'DIVIDE':([24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,83,93,123,124,125,126,134,136,137,145,158,167,168,169,170,175,],[-102,-74,-105,118,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,-74,-105,-74,118,118,-110,-74,-75,-109,-105,-72,-67,-68,-69,-70,-36,]),'MOD':([24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,83,93,123,124,125,126,134,136,137,145,158,167,168,169,170,175,],[-102,-74,-105,119,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,-74,-105,-74,119,119,-110,-74,-75,-109,-105,-72,-67,-68,-69,-70,-36,]),'POWER':([24,27,35,38,42,43,44,45,46,47,48,49,50,51,71,74,83,93,123,124,125,126,134,136,137,145,158,167,168,169,170,175,],[-102,-74,-105,120,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-74,-105,-74,-105,-74,120,120,-110,-74,-75,-109,-105,-72,-67,-68,-69,-70,-36,]),'DOT':([24,27,38,42,43,44,45,46,47,48,49,50,51,74,83,86,87,88,89,90,91,92,93,94,95,96,97,106,107,115,123,124,125,126,134,136,137,140,142,145,151,163,165,166,167,168,169,170,175,182,203,204,206,209,216,217,224,233,234,238,239,240,246,247,],[-102,-74,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-105,-74,146,-50,-53,-54,-55,-56,-57,-105,-59,-60,-61,-62,-38,-39,146,-107,-64,-65,-110,-108,-75,-109,146,-54,-105,-63,-37,146,-28,-67,-68,-69,-70,-36,-98,-51,-52,-58,-128,-31,-27,-97,-135,-127,-25,-149,146,-24,-150,]),'RIGHT_BRACKET':([24,27,38,42,43,44,45,46,47,48,49,50,51,74,88,89,90,91,92,93,94,95,96,97,106,107,123,124,125,126,134,136,137,151,153,154,155,157,158,163,166,167,168,169,170,175,182,206,207,209,216,217,224,233,234,235,236,238,239,246,247,],[-102,-74,-66,-35,-71,-72,-73,-99,-100,-101,-103,-104,-106,-105,-53,-54,-55,-56,-57,-105,-59,-60,-61,-62,-38,-39,-107,-64,-65,-110,-108,-75,-109,-63,209,-129,-131,-53,-72,-37,-28,-67,-68,-69,-70,-36,-98,-58,233,-128,-31,-27,-97,-135,-127,-130,-132,-25,-149,-24,-150,]),'STRING':([32,37,40,41,85,98,100,105,108,109,110,111,112,113,114,135,146,147,150,152,159,202,210,211,214,215,],[88,88,-48,-49,88,88,157,88,-40,-41,-42,-43,-44,-45,88,157,88,88,-40,157,157,-123,157,88,88,241,]),'ARRAY':([32,37,40,41,85,98,100,105,108,109,110,111,112,113,114,135,146,147,150,152,159,202,210,211,214,],[99,99,-48,-49,99,99,99,99,99,-41,-42,-43,-44,-45,99,99,99,99,-40,99,99,-123,99,99,99,]),'LEFT_BRACKET':([32,37,40,41,42,85,93,98,100,105,108,109,110,111,112,113,114,135,145,146,147,150,152,159,175,202,210,211,214,],[100,100,-48,-49,-35,100,149,100,100,100,100,-41,-42,-43,-44,-45,100,100,149,100,100,-40,100,100,-36,-123,100,100,100,]),'NEW':([32,37,40,41,85,98,100,105,108,109,110,111,112,113,114,135,146,147,150,152,159,202,210,211,214,],[102,102,-48,-49,102,102,102,102,-40,-41,-42,-43,-44,-45,102,102,102,102,-40,102,102,-123,102,102,102,]),'PLUS_PLUS':([35,42,93,145,174,175,],[106,-35,106,106,106,-36,]),'MINUS_MINUS':([35,42,93,145,174,175,],[107,-35,107,107,107,-36,]),'EQUALS':([35,42,93,145,174,175,],[108,-35,150,150,150,-36,]),'PLUS_EQUALS':([35,42,93,145,174,175,],[109,-35,109,109,109,-36,]),'MINUS_EQUALS':([35,42,93,145,174,175,],[110,-35,110,110,110,-36,]),'TIMES_EQUALS':([35,42,93,145,174,175,],[111,-35,111,111,111,-36,]),'DIVIDE_EQUALS':([35,42,93,145,174,175,],[112,-35,112,112,112,-36,]),'MOD_EQUALS':([35,42,93,145,174,175,],[113,-35,113,113,113,-36,]),'CALL':([42,93,145,175,],[122,148,148,-36,]),'LEFT_BRACE':([68,70,84,132,137,179,183,189,213,223,227,237,],[128,128,138,128,-109,128,128,128,128,128,128,128,]),'INT_TYPE':([85,116,139,],[143,143,143,]),'FLOAT_TYPE':([85,116,139,],[144,144,144,]),'STDIN':([103,104,],[161,162,]),'ELSE':([127,176,178,182,221,224,243,],[179,179,-80,-98,-81,-97,-82,]),'ELSEIF':([127,176,178,182,221,224,243,],[180,180,-80,-98,-81,-97,-82,]),'PUBLIC':([138,182,190,192,193,194,195,196,224,228,230,231,244,245,],[198,-98,198,-138,-140,-141,-142,-143,-97,-23,-139,-144,-22,-145,]),'PRIVATE':([138,182,190,192,193,194,195,196,224,228,230,231,244,245,],[199,-98,199,-138,-140,-141,-142,-143,-97,-23,-139,-144,-22,-145,]),'PROTECTED':([138,182,190,192,193,194,195,196,224,228,230,231,244,245,],[200,-98,200,-138,-140,-141,-142,-143,-97,-23,-139,-144,-22,-145,]),'KEY_VALUE':([156,157,158,],[211,-133,-134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,128,],[3,181,]),'statement2':([2,3,128,181,],[4,54,4,54,]),'statement':([2,3,73,128,181,184,],[5,5,133,5,5,226,]),'if_statement':([2,3,128,181,],[6,6,6,6,]),'while_statement':([2,3,128,181,],[7,7,7,7,]),'for_statement':([2,3,128,181,],[8,8,8,8,]),'function_statement':([2,3,128,181,197,],[9,9,9,9,231,]),'class_declaration':([2,3,128,181,],[12,12,12,12,]),'print_statement':([2,3,73,128,181,184,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,73,128,181,184,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,32,37,73,85,98,100,105,114,128,135,146,147,152,159,181,184,210,211,214,],[15,15,96,96,15,96,96,96,96,96,15,96,96,96,96,96,15,15,96,96,96,]),'assignment_statement':([2,3,32,37,73,85,98,100,105,114,121,128,135,146,147,152,159,181,184,210,211,214,219,],[16,16,95,95,16,95,95,95,95,95,173,16,95,95,95,95,95,16,16,95,95,95,242,]),'array_declaration_statement':([2,3,73,128,181,184,],[17,17,17,17,17,17,]),'function_call':([2,3,32,37,73,85,98,100,105,114,128,135,146,147,148,152,159,181,184,210,211,214,],[20,20,92,92,20,92,92,92,92,92,20,92,92,92,206,92,92,20,20,92,92,92,]),'return_statement':([2,3,73,128,181,184,],[21,21,21,21,21,21,]),'expression':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[22,22,76,82,89,89,76,76,76,126,76,22,82,76,142,89,89,89,89,82,76,76,76,76,22,89,82,89,89,89,89,22,22,89,89,89,]),'parenthesized_condition':([2,3,23,25,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,180,181,184,210,211,214,],[24,24,68,70,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,223,24,24,24,24,24,]),'for_part1':([2,3,128,181,],[26,26,26,26,]),'condition':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[27,27,71,83,27,27,123,27,27,27,83,27,83,134,83,27,27,27,27,83,27,27,27,27,27,27,83,27,27,27,27,27,27,27,27,27,]),'print_function':([2,3,73,128,181,184,],[32,32,32,32,32,32,]),'variable':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,121,128,135,139,146,147,148,152,159,181,184,197,210,211,214,219,248,251,],[35,35,74,74,93,93,74,74,74,74,74,35,74,74,145,93,93,93,93,74,74,74,74,74,174,35,93,74,93,93,205,93,93,35,35,232,93,93,93,174,250,253,]),'function_name':([2,3,32,37,73,85,98,100,105,114,128,135,146,147,148,152,159,181,184,210,211,214,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'term':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[38,38,38,38,38,38,38,124,125,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'factor':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,167,168,169,170,43,43,43,43,43,43,43,43,43,43,43,43,]),'simple_condition':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'negated_condition':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'complex_condition':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'relational_expression':([2,3,26,30,32,37,52,56,57,58,69,73,75,77,85,98,100,105,114,116,117,118,119,120,128,135,139,146,147,152,159,181,184,210,211,214,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'relational_operator':([22,76,82,89,126,142,],[58,58,58,58,58,58,]),'for_part3':([26,71,],[72,130,]),'logical_operator':([27,71,83,123,134,],[77,77,77,77,77,]),'arguments':([32,37,85,114,214,],[86,115,140,165,240,]),'argument':([32,37,85,98,100,105,114,135,146,147,152,159,210,211,214,],[87,87,87,151,155,163,87,155,203,204,155,155,155,236,87,]),'array':([32,37,85,98,100,105,108,114,135,146,147,152,159,210,211,214,],[90,90,90,90,90,90,164,90,90,90,90,90,90,90,90,90,]),'array_indexing':([32,37,85,98,100,105,114,135,146,147,152,159,210,211,214,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'anonymous_function':([32,37,85,98,100,105,114,135,146,147,152,159,210,211,214,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'object_creation':([32,37,85,98,100,105,114,135,146,147,152,159,210,211,214,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'casting':([32,37,85,98,100,105,114,135,146,147,152,159,210,211,214,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'assignment_operator':([35,93,145,174,],[105,105,105,105,]),'block':([68,70,132,179,183,189,213,223,227,237,],[127,129,187,222,187,228,238,243,244,246,]),'statement_list':([73,],[131,]),'casting_type':([85,116,139,],[141,141,141,]),'array_elements':([100,135,152,159,],[153,188,208,212,]),'array_argument':([100,135,152,159,210,],[154,154,154,154,235,]),'clave':([100,135,152,159,210,],[156,156,156,156,156,]),'assignment_list':([121,],[171,]),'else_if_extended':([127,],[176,]),'if_part3':([127,176,],[177,220,]),'if_part2':([127,176,],[178,221,]),'for_part4':([132,183,],[186,225,]),'class_statements':([138,],[190,]),'class_statement':([138,190,],[192,230,]),'method_declaration':([138,190,],[193,193,]),'property_declaration':([138,190,],[194,194,]),'visibility_operator':([138,190,],[197,197,]),'variable_list':([248,],[249,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',20),
  ('statements -> statement2','statements',1,'p_statements','parser.py',24),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',25),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',33),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',34),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',35),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',36),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',37),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',38),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',39),
  ('statement2 -> class_declaration','statement2',1,'p_statement2','parser.py',40),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',45),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',46),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',47),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',48),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',49),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',50),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',51),
  ('statement -> function_call','statement',1,'p_statement','parser.py',52),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',53),
  ('statement -> expression','statement',1,'p_statement','parser.py',54),
  ('function_statement -> FUNCTION NAME LEFT_PAREN array_elements RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',60),
  ('function_statement -> FUNCTION NAME LEFT_PAREN RIGHT_PAREN block','function_statement',5,'p_function_statement','parser.py',61),
  ('anonymous_function -> FUNCTION LEFT_PAREN array_elements RIGHT_PAREN block','anonymous_function',5,'p_anonymous_function','parser.py',69),
  ('anonymous_function -> FUNCTION LEFT_PAREN RIGHT_PAREN block','anonymous_function',4,'p_anonymous_function','parser.py',70),
  ('return_statement -> RETURN arguments','return_statement',2,'p_return_statement','parser.py',77),
  ('function_call -> function_name LEFT_PAREN arguments RIGHT_PAREN','function_call',4,'p_function_call','parser.py',81),
  ('function_call -> function_name LEFT_PAREN RIGHT_PAREN','function_call',3,'p_function_call','parser.py',82),
  ('function_name -> NAME','function_name',1,'p_function_name','parser.py',89),
  ('function_name -> variable','function_name',1,'p_function_name','parser.py',90),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',96),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',101),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',105),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',106),
  ('variable -> ID','variable',1,'p_variable','parser.py',114),
  ('variable -> ID CALL NAME','variable',3,'p_variable','parser.py',115),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',123),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',124),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',125),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',133),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',134),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',135),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',136),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',137),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',138),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',143),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',144),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',151),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',152),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',156),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',157),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',158),
  ('argument -> STRING','argument',1,'p_argument','parser.py',166),
  ('argument -> expression','argument',1,'p_argument','parser.py',167),
  ('argument -> array','argument',1,'p_argument','parser.py',168),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',169),
  ('argument -> function_call','argument',1,'p_argument','parser.py',170),
  ('argument -> variable CALL function_call','argument',3,'p_argument','parser.py',171),
  ('argument -> anonymous_function','argument',1,'p_argument','parser.py',172),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',173),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',174),
  ('argument -> object_creation','argument',1,'p_argument','parser.py',175),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',176),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',186),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',187),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',188),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',196),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',197),
  ('term -> term MOD factor','term',3,'p_term','parser.py',198),
  ('term -> term POWER factor','term',3,'p_term','parser.py',199),
  ('term -> factor','term',1,'p_term','parser.py',200),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',208),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',209),
  ('factor -> condition','factor',1,'p_factor','parser.py',210),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',211),
  ('if_statement -> IF parenthesized_condition block','if_statement',3,'p_if_statement','parser.py',222),
  ('if_statement -> IF parenthesized_condition block else_if_extended','if_statement',4,'p_if_statement','parser.py',223),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',224),
  ('if_statement -> IF parenthesized_condition block if_part3','if_statement',4,'p_if_statement','parser.py',225),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',234),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',235),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',243),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',247),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',252),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',257),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',258),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',265),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',266),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',273),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',274),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',281),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',282),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',286),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',287),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',295),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',296),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',304),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',305),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',312),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',313),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',314),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',315),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',319),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',320),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',321),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',322),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',326),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',330),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',334),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',338),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',342),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',343),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',344),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',345),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',346),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',347),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',348),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',349),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',350),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',354),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',355),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',356),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',360),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',364),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',365),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',370),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',374),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',375),
  ('array_elements -> array_argument','array_elements',1,'p_array_elements','parser.py',382),
  ('array_elements -> array_elements COMMA array_argument','array_elements',3,'p_array_elements','parser.py',383),
  ('array_argument -> argument','array_argument',1,'p_array_argument','parser.py',392),
  ('array_argument -> clave KEY_VALUE argument','array_argument',3,'p_array_argument','parser.py',393),
  ('clave -> STRING','clave',1,'p_clave','parser.py',400),
  ('clave -> INTEGER','clave',1,'p_clave','parser.py',401),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',405),
  ('class_declaration -> CLASS NAME LEFT_BRACE class_statements RIGHT_BRACE','class_declaration',5,'p_class_declaration','parser.py',409),
  ('class_declaration -> CLASS NAME LEFT_BRACE RIGHT_BRACE','class_declaration',4,'p_class_declaration','parser.py',410),
  ('class_statements -> class_statement','class_statements',1,'p_class_statements','parser.py',417),
  ('class_statements -> class_statements class_statement','class_statements',2,'p_class_statements','parser.py',418),
  ('class_statement -> method_declaration','class_statement',1,'p_class_statement','parser.py',426),
  ('class_statement -> property_declaration','class_statement',1,'p_class_statement','parser.py',427),
  ('class_statement -> ONE_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',428),
  ('class_statement -> MULTI_LINE_COMMENT','class_statement',1,'p_class_statement','parser.py',429),
  ('method_declaration -> visibility_operator function_statement','method_declaration',2,'p_method_declaration','parser.py',433),
  ('property_declaration -> visibility_operator variable SEMICOLON','property_declaration',3,'p_property_declaration','parser.py',437),
  ('visibility_operator -> PUBLIC','visibility_operator',1,'p_visibility_operator','parser.py',441),
  ('visibility_operator -> PRIVATE','visibility_operator',1,'p_visibility_operator','parser.py',442),
  ('visibility_operator -> PROTECTED','visibility_operator',1,'p_visibility_operator','parser.py',443),
  ('object_creation -> NEW NAME LEFT_PAREN RIGHT_PAREN','object_creation',4,'p_object_creation','parser.py',447),
  ('object_creation -> NEW NAME LEFT_PAREN arguments RIGHT_PAREN','object_creation',5,'p_object_creation','parser.py',448),
]
