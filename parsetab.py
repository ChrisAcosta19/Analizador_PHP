
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD_CHILD APPEND APPENDLEFT ARRAY ARROW AS ASYNC AWAIT BOOL BREAK CALL CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONST CONTINUE DECLARE DEFAULT DEQUEUE DICTIONARY DIE DIFFERENT DIVIDE DIVIDE_EQUALS DO DOT ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE ENQUEUE ENUM EQUALS EQUAL_TO EVAL EXIT EXTENDS FALSE FGETS FINAL FINALLY FLOAT FLOAT_TYPE FN FOR FOREACH FSCANF FUNCTION GLOBAL GOTO GREATER_EQUAL GREATER_THAN HALT_COMPILER ID IDENTICAL_TO IF IMPLEMENTS INCLUDE INCLUDE_ONCE INSTANCEOF INSTEADOF INTEGER INTERFACE INT_TYPE ISSET ITERABLE ITERATOR KEY_VALUE LAMBDA LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS_EQUAL LESS_THAN LIST LOGICAL_AND LOGICAL_NOT LOGICAL_OR LOGICAL_XOR LPAREN MATCH MINUS MINUS_EQUALS MINUS_MINUS MIXED MOD MOD_EQUALS MULTI_LINE_COMMENT NAME NAMESPACE NEW NOT_EQUAL_TO NOT_IDENTICAL_TO NULL OBJECT ONE_LINE_COMMENT OPEN_TAG PLUS PLUS_EQUALS PLUS_PLUS POP POPLEFT POWER PRINT PRIVATE PROTECTED PUBLIC PUSH REQUIRE REQUIRE_ONCE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN RPAREN SELF SEMICOLON SET STATIC STDIN STRING SWITCH THROW TIMES TIMES_EQUALS TRAIT TRUE TRY UNSET USE VAR VOID WHILE YIELD YIELD_FROM object_declarationprogram : OPEN_TAG statements CLOSE_TAGstatements : statement2\n                  | statements statement2statement2 : statement SEMICOLON\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | function_statement\n                  | ONE_LINE_COMMENT\n                  | MULTI_LINE_COMMENT\n                  | conditionstatement : print_statement\n                 | fscanf_statement\n                 | fgets_statement\n                 | assignment_statement\n                 | array_declaration_statement\n                 | BREAK\n                 | CONTINUE\n                 | function_call\n                 | statement_returnfunction_statement : FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN blockstatement_return : RETURN expressionfgets_statement : FGETS LEFT_PAREN STDIN RIGHT_PARENfscanf_statement : FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PARENvariable_list : variable\n                     | variable_list COMMA variablevariable : IDassignment_statement : variable assignment_operator argument\n                            | variable PLUS_PLUS\n                            | variable MINUS_MINUSassignment_operator : EQUALS\n                           | PLUS_EQUALS\n                           | MINUS_EQUALS\n                           | TIMES_EQUALS\n                           | DIVIDE_EQUALS\n                           | MOD_EQUALSprint_statement : print_function LEFT_PAREN arguments RIGHT_PAREN\n                       | print_function argumentsprint_function : PRINT\n                      | ECHOarguments : argument\n                 | arguments DOT argument\n                 | arguments COMMA argumentargument : STRING                \n                | expression\n                | assignment_statement\n                | function_call\n                | fgets_statement\n                | array_indexing\n                | casting argumentexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : INTEGER\n              | FLOAT\n              | condition\n              | LEFT_PAREN expression RIGHT_PARENif_statement : IF parenthesized_condition block else_if_extended if_part3else_if_extended : if_part2\n                        | else_if_extended if_part2if_part2 : ELSEIF parenthesized_condition block\n                | if_part3 : ELSE block\n                |while_statement : WHILE parenthesized_condition blockfor_part1 : FOR LEFT_PAREN assignment_list SEMICOLON\n                 | FOR LEFT_PAREN SEMICOLONfor_statement : for_part1 condition for_part3\n                     | for_part1 for_part3for_part3 : SEMICOLON statement_list RIGHT_PAREN for_part4\n                 | SEMICOLON RIGHT_PAREN for_part4for_part4 : block\n                 | SEMICOLONassignment_list : assignment_statement\n                       | assignment_list COMMA assignment_statementstatement_list : statement\n                      | statement_list COMMA statementblock : LEFT_BRACE statements RIGHT_BRACE\n             | LEFT_BRACE RIGHT_BRACEcondition : simple_condition\n                 | negated_condition\n                 | complex_condition\n                 | parenthesized_conditionsimple_condition : TRUE\n                        | FALSE\n                        | variable\n                        | relational_expressionnegated_condition : LOGICAL_NOT conditioncomplex_condition : condition logical_operator conditionparenthesized_condition : LEFT_PAREN condition RIGHT_PARENrelational_expression : expression relational_operator expressionrelational_operator : EQUAL_TO\n                           | NOT_EQUAL_TO\n                           | LESS_THAN\n                           | GREATER_THAN\n                           | LESS_EQUAL\n                           | GREATER_EQUAL\n                           | IDENTICAL_TO\n                           | NOT_IDENTICAL_TO\n                           | DIFFERENTlogical_operator : LOGICAL_AND\n                        | LOGICAL_OR\n                        | LOGICAL_XORcasting : LEFT_PAREN casting_type RIGHT_PARENcasting_type : INT_TYPE\n                    | FLOAT_TYPEfunction_call : NAME LEFT_PAREN array_elements RIGHT_PARENarray_declaration_statement : variable EQUALS arrayarray : ARRAY LEFT_PAREN array_elements RIGHT_PAREN\n             | LEFT_BRACKET array_elements RIGHT_BRACKETarray_elements : argument\n                      | array_elements COMMA argumentarray_indexing : variable LEFT_BRACKET INTEGER RIGHT_BRACKET'
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,50,],[0,-1,]),'ONE_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,158,159,160,175,176,179,180,189,190,191,],[10,10,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,10,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,10,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'MULTI_LINE_COMMENT':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,158,159,160,175,176,179,180,189,190,191,],[11,11,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,11,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,11,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'BREAK':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,62,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,157,158,159,160,175,176,179,180,189,190,191,],[18,18,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,18,-89,-59,-91,-92,-65,18,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,18,-82,18,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'CONTINUE':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,62,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,157,158,159,160,175,176,179,180,189,190,191,],[19,19,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,19,-89,-59,-91,-92,-65,19,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,19,-82,19,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'IF':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,158,159,160,175,176,179,180,189,190,191,],[22,22,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,22,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,22,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'WHILE':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,158,159,160,175,176,179,180,189,190,191,],[24,24,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,24,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,24,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'FUNCTION':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,158,159,160,175,176,179,180,189,190,191,],[26,26,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,26,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,26,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'FSCANF':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,62,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,157,158,159,160,175,176,179,180,189,190,191,],[33,33,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,33,-89,-59,-91,-92,-65,33,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,33,-82,33,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'FGETS':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,32,35,39,40,41,43,44,45,46,47,48,49,51,52,61,62,63,65,68,77,79,82,85,86,87,88,89,90,106,109,110,111,112,113,118,122,123,131,132,135,141,142,143,144,149,150,151,152,154,155,157,158,159,160,163,165,171,175,176,179,180,189,190,191,],[34,34,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,34,-89,-87,-88,-90,-39,-40,-27,-53,-56,-57,-58,-3,-4,-72,34,-89,34,34,34,-59,34,-31,-32,-33,-34,-35,-36,-91,-92,-65,34,-68,-71,34,-93,-60,34,34,-31,34,-94,-51,-52,-54,-55,-65,-62,34,-82,34,-76,-74,-75,34,-107,34,-61,-63,-81,-73,-66,-64,-21,]),'NAME':([2,3,4,6,7,8,9,10,11,12,23,26,29,30,31,32,35,39,40,41,43,44,45,46,47,48,49,51,52,61,62,63,65,68,77,79,82,85,86,87,88,89,90,106,109,110,111,112,113,118,122,123,131,132,135,141,142,143,144,149,150,151,152,154,155,157,158,159,160,163,165,171,175,176,179,180,189,190,191,],[27,27,-2,-5,-6,-7,-8,-9,-10,-11,-86,64,-83,-84,-85,27,-89,-87,-88,-90,-39,-40,-27,-53,-56,-57,-58,-3,-4,-72,27,-89,27,27,27,-59,27,-31,-32,-33,-34,-35,-36,-91,-92,-65,27,-68,-71,27,-93,-60,27,27,-31,27,-94,-51,-52,-54,-55,-65,-62,27,-82,27,-76,-74,-75,27,-107,27,-61,-63,-81,-73,-66,-64,-21,]),'RETURN':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,62,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,157,158,159,160,175,176,179,180,189,190,191,],[36,36,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,36,-89,-59,-91,-92,-65,36,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,36,-82,36,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'FOR':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,158,159,160,175,176,179,180,189,190,191,],[38,38,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,38,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,38,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'TRUE':([2,3,4,6,7,8,9,10,11,12,23,25,28,29,30,31,32,35,36,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,61,63,65,68,77,79,82,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,118,119,122,123,124,131,132,135,141,142,143,144,146,149,150,151,152,154,155,158,159,160,163,165,171,173,175,176,179,180,189,190,191,],[39,39,-2,-5,-6,-7,-8,-9,-10,-11,-86,39,39,-83,-84,-85,39,-89,39,-87,-88,-90,39,-39,-40,-27,-53,-56,-57,-58,-3,-4,39,-104,-105,-106,39,-72,-89,39,39,39,-59,39,-31,-32,-33,-34,-35,-36,39,39,39,39,-95,-96,-97,-98,-99,-100,-101,-102,-103,-91,39,39,-92,-65,39,-68,-71,39,39,-93,-60,39,39,39,-31,39,-94,-51,-52,-70,-54,-55,-65,-62,39,-82,-76,-74,-75,39,-107,39,-69,-61,-63,-81,-73,-66,-64,-21,]),'FALSE':([2,3,4,6,7,8,9,10,11,12,23,25,28,29,30,31,32,35,36,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,61,63,65,68,77,79,82,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,118,119,122,123,124,131,132,135,141,142,143,144,146,149,150,151,152,154,155,158,159,160,163,165,171,173,175,176,179,180,189,190,191,],[40,40,-2,-5,-6,-7,-8,-9,-10,-11,-86,40,40,-83,-84,-85,40,-89,40,-87,-88,-90,40,-39,-40,-27,-53,-56,-57,-58,-3,-4,40,-104,-105,-106,40,-72,-89,40,40,40,-59,40,-31,-32,-33,-34,-35,-36,40,40,40,40,-95,-96,-97,-98,-99,-100,-101,-102,-103,-91,40,40,-92,-65,40,-68,-71,40,40,-93,-60,40,40,40,-31,40,-94,-51,-52,-70,-54,-55,-65,-62,40,-82,-76,-74,-75,40,-107,40,-69,-61,-63,-81,-73,-66,-64,-21,]),'LOGICAL_NOT':([2,3,4,6,7,8,9,10,11,12,23,25,28,29,30,31,32,35,36,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,61,63,65,68,77,79,82,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,118,119,122,123,124,131,132,135,141,142,143,144,146,149,150,151,152,154,155,158,159,160,163,165,171,173,175,176,179,180,189,190,191,],[42,42,-2,-5,-6,-7,-8,-9,-10,-11,-86,42,42,-83,-84,-85,42,-89,42,-87,-88,-90,42,-39,-40,-27,-53,-56,-57,-58,-3,-4,42,-104,-105,-106,42,-72,-89,42,42,42,-59,42,-31,-32,-33,-34,-35,-36,42,42,42,42,-95,-96,-97,-98,-99,-100,-101,-102,-103,-91,42,42,-92,-65,42,-68,-71,42,42,-93,-60,42,42,42,-31,42,-94,-51,-52,-70,-54,-55,-65,-62,42,-82,-76,-74,-75,42,-107,42,-69,-61,-63,-81,-73,-66,-64,-21,]),'LEFT_PAREN':([2,3,4,6,7,8,9,10,11,12,22,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,61,63,64,65,68,77,79,82,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,118,119,122,123,124,131,132,135,140,141,142,143,144,146,149,150,151,152,153,154,155,158,159,160,163,165,171,173,175,176,179,180,189,190,191,],[28,28,-2,-5,-6,-7,-8,-9,-10,-11,58,-86,58,28,65,28,-83,-84,-85,68,80,81,-89,92,105,-87,-88,-90,28,-39,-40,-27,-53,-56,-57,-58,-3,-4,28,-104,-105,-106,28,-72,-89,118,119,124,119,-59,119,-31,-32,-33,-34,-35,-36,28,92,92,92,-95,-96,-97,-98,-99,-100,-101,-102,-103,-91,92,92,-92,-65,28,-68,-71,119,28,-93,-60,28,119,119,-31,171,119,-94,-51,-52,-70,-54,-55,-65,-62,58,28,-82,-76,-74,-75,119,-107,119,-69,-61,-63,-81,-73,-66,-64,-21,]),'PRINT':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,62,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,157,158,159,160,175,176,179,180,189,190,191,],[43,43,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,43,-89,-59,-91,-92,-65,43,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,43,-82,43,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'ECHO':([2,3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,62,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,157,158,159,160,175,176,179,180,189,190,191,],[44,44,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,44,-89,-59,-91,-92,-65,44,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,44,-82,44,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'ID':([2,3,4,6,7,8,9,10,11,12,23,25,28,29,30,31,32,35,36,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,61,62,63,65,68,77,79,82,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,118,119,122,123,124,131,132,135,141,142,143,144,146,149,150,151,152,154,155,157,158,159,160,163,165,171,173,174,175,176,179,180,189,190,191,192,196,],[45,45,-2,-5,-6,-7,-8,-9,-10,-11,-86,45,45,-83,-84,-85,45,-89,45,-87,-88,-90,45,-39,-40,-27,-53,-56,-57,-58,-3,-4,45,-104,-105,-106,45,-72,45,-89,45,45,45,-59,45,-31,-32,-33,-34,-35,-36,45,45,45,45,-95,-96,-97,-98,-99,-100,-101,-102,-103,45,-91,45,45,-92,-65,45,-68,-71,45,45,-93,-60,45,45,45,-31,45,-94,-51,-52,-70,-54,-55,-65,-62,45,-82,45,-76,-74,-75,45,-107,45,-69,45,-61,-63,-81,-73,-66,-64,-21,45,45,]),'INTEGER':([2,3,4,6,7,8,9,10,11,12,23,25,28,29,30,31,32,35,36,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,61,63,65,68,77,79,82,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,118,119,122,123,124,131,132,134,135,141,142,143,144,146,149,150,151,152,154,155,158,159,160,163,165,171,173,175,176,179,180,189,190,191,],[48,48,-2,-5,-6,-7,-8,-9,-10,-11,-86,48,48,-83,-84,-85,48,-89,48,-87,-88,-90,48,-39,-40,-27,-53,-56,-57,-58,-3,-4,48,-104,-105,-106,48,-72,-89,48,48,48,-59,48,-31,-32,-33,-34,-35,-36,48,48,48,48,-95,-96,-97,-98,-99,-100,-101,-102,-103,-91,48,48,-92,-65,48,-68,-71,48,48,-93,-60,48,48,48,168,-31,48,-94,-51,-52,-70,-54,-55,-65,-62,48,-82,-76,-74,-75,48,-107,48,-69,-61,-63,-81,-73,-66,-64,-21,]),'FLOAT':([2,3,4,6,7,8,9,10,11,12,23,25,28,29,30,31,32,35,36,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,61,63,65,68,77,79,82,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,118,119,122,123,124,131,132,135,141,142,143,144,146,149,150,151,152,154,155,158,159,160,163,165,171,173,175,176,179,180,189,190,191,],[49,49,-2,-5,-6,-7,-8,-9,-10,-11,-86,49,49,-83,-84,-85,49,-89,49,-87,-88,-90,49,-39,-40,-27,-53,-56,-57,-58,-3,-4,49,-104,-105,-106,49,-72,-89,49,49,49,-59,49,-31,-32,-33,-34,-35,-36,49,49,49,49,-95,-96,-97,-98,-99,-100,-101,-102,-103,-91,49,49,-92,-65,49,-68,-71,49,49,-93,-60,49,49,49,-31,49,-94,-51,-52,-70,-54,-55,-65,-62,49,-82,-76,-74,-75,49,-107,49,-69,-61,-63,-81,-73,-66,-64,-21,]),'CLOSE_TAG':([3,4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,112,113,122,123,142,143,144,149,150,151,152,155,158,159,160,175,176,179,180,189,190,191,],[50,-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'RIGHT_BRACE':([4,6,7,8,9,10,11,12,23,29,30,31,35,39,40,41,45,46,47,48,49,51,52,61,63,79,106,109,110,111,112,113,122,123,142,143,144,149,150,151,152,154,155,158,159,160,175,176,179,180,189,190,191,],[-2,-5,-6,-7,-8,-9,-10,-11,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,-3,-4,-72,-89,-59,-91,-92,-65,155,-68,-71,-93,-60,-94,-51,-52,-54,-55,-65,-62,179,-82,-76,-74,-75,-61,-63,-81,-73,-66,-64,-21,]),'SEMICOLON':([5,13,14,15,16,17,18,19,20,21,23,25,29,30,31,39,40,41,45,46,47,48,49,60,63,69,70,71,72,73,74,75,76,78,79,83,84,91,105,106,109,115,122,123,133,138,139,142,143,144,145,146,147,149,150,156,162,164,166,167,170,173,184,187,188,193,197,],[52,-12,-13,-14,-15,-16,-17,-18,-19,-20,-86,62,-83,-84,-85,-87,-88,-90,-27,-53,-56,-57,-58,62,-89,-38,-41,-44,-45,-46,-47,-48,-49,-89,-59,-29,-30,-22,146,-91,-92,158,-93,-60,-50,-28,-111,-94,-51,-52,173,-70,-77,-54,-55,158,-110,-37,-42,-43,-23,-69,-116,-113,-78,-112,-24,]),'TIMES':([12,23,29,30,31,35,39,40,41,45,46,47,48,49,60,63,66,78,79,106,109,122,123,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,-87,-88,-90,-27,107,-56,-57,-58,-59,-89,-59,-89,-59,-59,-59,-93,-60,-89,-94,107,107,-54,-55,]),'DIVIDE':([12,23,29,30,31,35,39,40,41,45,46,47,48,49,60,63,66,78,79,106,109,122,123,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,-87,-88,-90,-27,108,-56,-57,-58,-59,-89,-59,-89,-59,-59,-59,-93,-60,-89,-94,108,108,-54,-55,]),'PLUS':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,94,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,94,94,-89,-59,94,-59,-59,-93,-60,94,-89,94,-51,-52,-54,-55,]),'MINUS':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,95,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,95,95,-89,-59,95,-59,-59,-93,-60,95,-89,95,-51,-52,-54,-55,]),'EQUAL_TO':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,96,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,96,96,-89,-59,96,-59,-59,-93,-60,96,-89,96,-51,-52,-54,-55,]),'NOT_EQUAL_TO':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,97,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,97,97,-89,-59,97,-59,-59,-93,-60,97,-89,97,-51,-52,-54,-55,]),'LESS_THAN':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,98,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,98,98,-89,-59,98,-59,-59,-93,-60,98,-89,98,-51,-52,-54,-55,]),'GREATER_THAN':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,99,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,99,99,-89,-59,99,-59,-59,-93,-60,99,-89,99,-51,-52,-54,-55,]),'LESS_EQUAL':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,100,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,100,100,-89,-59,100,-59,-59,-93,-60,100,-89,100,-51,-52,-54,-55,]),'GREATER_EQUAL':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,101,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,101,101,-89,-59,101,-59,-59,-93,-60,101,-89,101,-51,-52,-54,-55,]),'IDENTICAL_TO':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,102,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,102,102,-89,-59,102,-59,-59,-93,-60,102,-89,102,-51,-52,-54,-55,]),'NOT_IDENTICAL_TO':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,103,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,103,103,-89,-59,103,-59,-59,-93,-60,103,-89,103,-51,-52,-54,-55,]),'DIFFERENT':([12,23,29,30,31,35,37,39,40,41,45,46,47,48,49,60,63,66,67,72,78,79,91,106,109,122,123,127,130,142,143,144,149,150,],[-59,-86,-83,-84,-85,-89,104,-87,-88,-90,-27,-53,-56,-57,-58,-59,-89,-59,104,104,-89,-59,104,-59,-59,-93,-60,104,-89,104,-51,-52,-54,-55,]),'LOGICAL_AND':([12,23,29,30,31,35,39,40,41,45,46,47,48,49,60,63,66,78,79,106,109,122,123,130,142,143,144,149,150,],[54,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,54,-89,54,-89,54,54,54,-93,-60,-89,-94,-51,-52,-54,-55,]),'LOGICAL_OR':([12,23,29,30,31,35,39,40,41,45,46,47,48,49,60,63,66,78,79,106,109,122,123,130,142,143,144,149,150,],[55,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,55,-89,55,-89,55,55,55,-93,-60,-89,-94,-51,-52,-54,-55,]),'LOGICAL_XOR':([12,23,29,30,31,35,39,40,41,45,46,47,48,49,60,63,66,78,79,106,109,122,123,130,142,143,144,149,150,],[56,-86,-83,-84,-85,-89,-87,-88,-90,-27,-53,-56,-57,-58,56,-89,56,-89,56,56,56,-93,-60,-89,-94,-51,-52,-54,-55,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,21,23,29,30,31,39,40,41,45,46,47,48,49,62,63,66,67,69,70,71,72,73,74,75,76,78,79,83,84,91,106,109,114,116,120,121,122,123,125,126,127,128,129,130,133,137,138,139,142,143,144,149,150,161,162,164,166,167,170,181,183,184,186,187,193,194,195,197,198,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-86,-83,-84,-85,-87,-88,-90,-27,-53,-56,-57,-58,115,-89,122,123,-38,-41,-44,-45,-46,-47,-48,-49,-89,-59,-29,-30,-22,-91,-92,156,-79,162,-114,-93,-60,164,165,123,-108,-109,-89,-50,170,-28,-111,-94,-51,-52,-54,-55,182,-110,-37,-42,-43,-23,-80,-115,-116,193,-113,-112,197,-25,-24,-26,]),'COMMA':([13,14,15,16,17,18,19,20,21,23,29,30,31,39,40,41,45,46,47,48,49,63,66,69,70,71,72,73,74,75,76,78,79,83,84,91,106,109,114,116,120,121,122,123,125,127,130,133,136,138,139,142,143,144,145,147,149,150,161,162,164,166,167,170,172,181,183,184,185,186,187,188,193,194,195,197,198,],[-12,-13,-14,-15,-16,-17,-18,-19,-20,-86,-83,-84,-85,-87,-88,-90,-27,-53,-56,-57,-58,-89,-59,132,-41,-44,-45,-46,-47,-48,-49,-89,-59,-29,-30,-22,-91,-92,157,-79,163,-114,-93,-60,132,-45,-89,-50,169,-28,-111,-94,-51,-52,174,-77,-54,-55,132,-110,-37,-42,-43,-23,163,-80,-115,-116,192,163,-113,-78,-112,196,-25,-24,-26,]),'DOT':([23,29,30,31,39,40,41,45,46,47,48,49,63,66,69,70,71,72,73,74,75,76,78,79,83,84,106,109,122,123,125,127,130,133,138,142,143,144,149,150,161,162,166,167,170,184,],[-86,-83,-84,-85,-87,-88,-90,-27,-53,-56,-57,-58,-89,-59,131,-41,-44,-45,-46,-47,-48,-49,-89,-59,-29,-30,-91,-92,-93,-60,131,-45,-89,-50,-28,-94,-51,-52,-54,-55,131,-110,-42,-43,-23,-116,]),'RIGHT_BRACKET':([23,29,30,31,39,40,41,45,46,47,48,49,63,71,72,73,74,75,76,78,79,83,84,106,109,121,122,123,133,138,142,143,144,149,150,162,168,170,172,183,184,],[-86,-83,-84,-85,-87,-88,-90,-27,-53,-56,-57,-58,-89,-44,-45,-46,-47,-48,-49,-89,-59,-29,-30,-91,-92,-114,-93,-60,-50,-28,-94,-51,-52,-54,-55,-110,184,-23,187,-115,-116,]),'STRING':([32,43,44,65,68,77,82,85,86,87,88,89,90,118,131,132,135,141,163,165,169,171,],[71,-39,-40,71,71,71,71,-31,-32,-33,-34,-35,-36,71,71,71,-31,71,71,-107,185,71,]),'PLUS_PLUS':([35,45,78,117,130,148,],[83,-27,83,83,83,83,]),'MINUS_MINUS':([35,45,78,117,130,148,],[84,-27,84,84,84,84,]),'EQUALS':([35,45,78,117,130,148,],[85,-27,135,85,135,135,]),'PLUS_EQUALS':([35,45,78,117,130,148,],[86,-27,86,86,86,86,]),'MINUS_EQUALS':([35,45,78,117,130,148,],[87,-27,87,87,87,87,]),'TIMES_EQUALS':([35,45,78,117,130,148,],[88,-27,88,88,88,88,]),'DIVIDE_EQUALS':([35,45,78,117,130,148,],[89,-27,89,89,89,89,]),'MOD_EQUALS':([35,45,78,117,130,148,],[90,-27,90,90,90,90,]),'LEFT_BRACKET':([45,78,85,130,],[-27,134,141,134,]),'LEFT_BRACE':([57,59,115,122,156,177,178,182,],[111,111,111,-93,111,111,111,111,]),'INT_TYPE':([68,119,124,],[128,128,128,]),'FLOAT_TYPE':([68,119,124,],[129,129,129,]),'STDIN':([80,81,],[136,137,]),'ARRAY':([85,],[140,]),'ELSEIF':([110,151,152,155,176,179,190,],[153,153,-62,-82,-63,-81,-64,]),'ELSE':([110,151,152,155,176,179,190,],[-65,177,-62,-82,-63,-81,-64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,111,],[3,154,]),'statement2':([2,3,111,154,],[4,51,4,51,]),'statement':([2,3,62,111,154,157,],[5,5,116,5,5,181,]),'if_statement':([2,3,111,154,],[6,6,6,6,]),'while_statement':([2,3,111,154,],[7,7,7,7,]),'for_statement':([2,3,111,154,],[8,8,8,8,]),'function_statement':([2,3,111,154,],[9,9,9,9,]),'condition':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[12,12,60,66,79,79,106,109,66,79,66,79,79,66,79,79,79,79,79,12,79,66,66,79,79,79,12,79,79,]),'print_statement':([2,3,62,111,154,157,],[13,13,13,13,13,13,]),'fscanf_statement':([2,3,62,111,154,157,],[14,14,14,14,14,14,]),'fgets_statement':([2,3,32,62,65,68,77,82,111,118,131,132,141,154,157,163,171,],[15,15,75,15,75,75,75,75,15,75,75,75,75,15,15,75,75,]),'assignment_statement':([2,3,32,62,65,68,77,82,105,111,118,131,132,141,154,157,163,171,174,],[16,16,73,16,73,73,73,73,147,16,73,73,73,73,16,16,73,73,188,]),'array_declaration_statement':([2,3,62,111,154,157,],[17,17,17,17,17,17,]),'function_call':([2,3,32,62,65,68,77,82,111,118,131,132,141,154,157,163,171,],[20,20,74,20,74,74,74,74,20,74,74,74,74,20,20,74,74,]),'statement_return':([2,3,62,111,154,157,],[21,21,21,21,21,21,]),'parenthesized_condition':([2,3,22,24,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,153,154,163,171,],[23,23,57,59,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,178,23,23,23,]),'for_part1':([2,3,111,154,],[25,25,25,25,]),'simple_condition':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'negated_condition':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'complex_condition':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'print_function':([2,3,62,111,154,157,],[32,32,32,32,32,32,]),'variable':([2,3,25,28,32,36,42,53,58,62,65,68,77,82,92,93,94,95,105,107,108,111,118,119,124,131,132,141,154,157,163,171,174,192,196,],[35,35,63,63,78,63,63,63,63,117,78,130,78,78,63,63,63,63,148,63,63,35,78,63,63,78,78,78,35,117,78,78,148,195,198,]),'expression':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[37,37,37,67,72,91,37,37,37,72,127,72,72,67,142,37,37,37,37,37,72,67,67,72,72,72,37,72,72,]),'relational_expression':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'term':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,143,144,46,46,46,46,46,46,46,46,46,46,46,46,]),'factor':([2,3,25,28,32,36,42,53,58,65,68,77,82,92,93,94,95,107,108,111,118,119,124,131,132,141,154,163,171,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,149,150,47,47,47,47,47,47,47,47,47,47,]),'logical_operator':([12,60,66,79,106,109,],[53,53,53,53,53,53,]),'for_part3':([25,60,],[61,113,]),'arguments':([32,68,118,],[69,125,161,]),'argument':([32,65,68,77,82,118,131,132,141,163,171,],[70,121,70,133,138,70,166,167,121,183,121,]),'array_indexing':([32,65,68,77,82,118,131,132,141,163,171,],[76,76,76,76,76,76,76,76,76,76,76,]),'casting':([32,65,68,77,82,118,131,132,141,163,171,],[77,77,77,77,77,77,77,77,77,77,77,]),'assignment_operator':([35,78,117,130,148,],[82,82,82,82,82,]),'relational_operator':([37,67,72,91,127,142,],[93,93,93,93,93,93,]),'block':([57,59,115,156,177,178,182,],[110,112,160,160,189,190,191,]),'statement_list':([62,],[114,]),'array_elements':([65,141,171,],[120,172,186,]),'casting_type':([68,119,124,],[126,126,126,]),'array':([85,],[139,]),'assignment_list':([105,],[145,]),'else_if_extended':([110,],[151,]),'if_part2':([110,151,],[152,176,]),'for_part4':([115,156,],[159,180,]),'if_part3':([151,],[175,]),'variable_list':([192,],[194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statements CLOSE_TAG','program',3,'p_program','parser.py',9),
  ('statements -> statement2','statements',1,'p_statements','parser.py',14),
  ('statements -> statements statement2','statements',2,'p_statements','parser.py',15),
  ('statement2 -> statement SEMICOLON','statement2',2,'p_statement2','parser.py',24),
  ('statement2 -> if_statement','statement2',1,'p_statement2','parser.py',25),
  ('statement2 -> while_statement','statement2',1,'p_statement2','parser.py',26),
  ('statement2 -> for_statement','statement2',1,'p_statement2','parser.py',27),
  ('statement2 -> function_statement','statement2',1,'p_statement2','parser.py',28),
  ('statement2 -> ONE_LINE_COMMENT','statement2',1,'p_statement2','parser.py',29),
  ('statement2 -> MULTI_LINE_COMMENT','statement2',1,'p_statement2','parser.py',30),
  ('statement2 -> condition','statement2',1,'p_statement2','parser.py',31),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> fscanf_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> fgets_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> array_declaration_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',42),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',43),
  ('statement -> function_call','statement',1,'p_statement','parser.py',44),
  ('statement -> statement_return','statement',1,'p_statement','parser.py',45),
  ('function_statement -> FUNCTION NAME LEFT_PAREN arguments RIGHT_PAREN block','function_statement',6,'p_function_statement','parser.py',51),
  ('statement_return -> RETURN expression','statement_return',2,'p_statement_return','parser.py',67),
  ('fgets_statement -> FGETS LEFT_PAREN STDIN RIGHT_PAREN','fgets_statement',4,'p_fgets_statement','parser.py',74),
  ('fscanf_statement -> FSCANF LEFT_PAREN STDIN COMMA STRING COMMA variable_list RIGHT_PAREN','fscanf_statement',8,'p_fscanf_statement','parser.py',79),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',83),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',84),
  ('variable -> ID','variable',1,'p_variable','parser.py',92),
  ('assignment_statement -> variable assignment_operator argument','assignment_statement',3,'p_assignment_statement','parser.py',97),
  ('assignment_statement -> variable PLUS_PLUS','assignment_statement',2,'p_assignment_statement','parser.py',98),
  ('assignment_statement -> variable MINUS_MINUS','assignment_statement',2,'p_assignment_statement','parser.py',99),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',106),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',107),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',108),
  ('assignment_operator -> TIMES_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',109),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',110),
  ('assignment_operator -> MOD_EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',111),
  ('print_statement -> print_function LEFT_PAREN arguments RIGHT_PAREN','print_statement',4,'p_print_statement','parser.py',116),
  ('print_statement -> print_function arguments','print_statement',2,'p_print_statement','parser.py',117),
  ('print_function -> PRINT','print_function',1,'p_print_function','parser.py',124),
  ('print_function -> ECHO','print_function',1,'p_print_function','parser.py',125),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',129),
  ('arguments -> arguments DOT argument','arguments',3,'p_arguments','parser.py',130),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',131),
  ('argument -> STRING','argument',1,'p_argument','parser.py',139),
  ('argument -> expression','argument',1,'p_argument','parser.py',140),
  ('argument -> assignment_statement','argument',1,'p_argument','parser.py',141),
  ('argument -> function_call','argument',1,'p_argument','parser.py',142),
  ('argument -> fgets_statement','argument',1,'p_argument','parser.py',143),
  ('argument -> array_indexing','argument',1,'p_argument','parser.py',144),
  ('argument -> casting argument','argument',2,'p_argument','parser.py',145),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','parser.py',153),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','parser.py',154),
  ('expression -> term','expression',1,'p_expression_arithmetic','parser.py',155),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',162),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',163),
  ('term -> factor','term',1,'p_term','parser.py',164),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',171),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',172),
  ('factor -> condition','factor',1,'p_factor','parser.py',173),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor','parser.py',174),
  ('if_statement -> IF parenthesized_condition block else_if_extended if_part3','if_statement',5,'p_if_statement','parser.py',182),
  ('else_if_extended -> if_part2','else_if_extended',1,'p_else_if_extended','parser.py',186),
  ('else_if_extended -> else_if_extended if_part2','else_if_extended',2,'p_else_if_extended','parser.py',187),
  ('if_part2 -> ELSEIF parenthesized_condition block','if_part2',3,'p_else_if_statement','parser.py',195),
  ('if_part2 -> <empty>','if_part2',0,'p_else_if_statement','parser.py',196),
  ('if_part3 -> ELSE block','if_part3',2,'p_else_statement','parser.py',203),
  ('if_part3 -> <empty>','if_part3',0,'p_else_statement','parser.py',204),
  ('while_statement -> WHILE parenthesized_condition block','while_statement',3,'p_while_statement','parser.py',212),
  ('for_part1 -> FOR LEFT_PAREN assignment_list SEMICOLON','for_part1',4,'p_for_part1','parser.py',217),
  ('for_part1 -> FOR LEFT_PAREN SEMICOLON','for_part1',3,'p_for_part1','parser.py',218),
  ('for_statement -> for_part1 condition for_part3','for_statement',3,'p_for_part2','parser.py',225),
  ('for_statement -> for_part1 for_part3','for_statement',2,'p_for_part2','parser.py',226),
  ('for_part3 -> SEMICOLON statement_list RIGHT_PAREN for_part4','for_part3',4,'p_for_part3','parser.py',233),
  ('for_part3 -> SEMICOLON RIGHT_PAREN for_part4','for_part3',3,'p_for_part3','parser.py',234),
  ('for_part4 -> block','for_part4',1,'p_for_part4','parser.py',241),
  ('for_part4 -> SEMICOLON','for_part4',1,'p_for_part4','parser.py',242),
  ('assignment_list -> assignment_statement','assignment_list',1,'p_assignment_list','parser.py',246),
  ('assignment_list -> assignment_list COMMA assignment_statement','assignment_list',3,'p_assignment_list','parser.py',247),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',255),
  ('statement_list -> statement_list COMMA statement','statement_list',3,'p_statement_list','parser.py',256),
  ('block -> LEFT_BRACE statements RIGHT_BRACE','block',3,'p_block','parser.py',264),
  ('block -> LEFT_BRACE RIGHT_BRACE','block',2,'p_block','parser.py',265),
  ('condition -> simple_condition','condition',1,'p_condition','parser.py',272),
  ('condition -> negated_condition','condition',1,'p_condition','parser.py',273),
  ('condition -> complex_condition','condition',1,'p_condition','parser.py',274),
  ('condition -> parenthesized_condition','condition',1,'p_condition','parser.py',275),
  ('simple_condition -> TRUE','simple_condition',1,'p_simple_condition','parser.py',279),
  ('simple_condition -> FALSE','simple_condition',1,'p_simple_condition','parser.py',280),
  ('simple_condition -> variable','simple_condition',1,'p_simple_condition','parser.py',281),
  ('simple_condition -> relational_expression','simple_condition',1,'p_simple_condition','parser.py',282),
  ('negated_condition -> LOGICAL_NOT condition','negated_condition',2,'p_negated_condition','parser.py',286),
  ('complex_condition -> condition logical_operator condition','complex_condition',3,'p_complex_condition','parser.py',290),
  ('parenthesized_condition -> LEFT_PAREN condition RIGHT_PAREN','parenthesized_condition',3,'p_parenthesized_condition','parser.py',294),
  ('relational_expression -> expression relational_operator expression','relational_expression',3,'p_relational_expression','parser.py',298),
  ('relational_operator -> EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',302),
  ('relational_operator -> NOT_EQUAL_TO','relational_operator',1,'p_relational_operator','parser.py',303),
  ('relational_operator -> LESS_THAN','relational_operator',1,'p_relational_operator','parser.py',304),
  ('relational_operator -> GREATER_THAN','relational_operator',1,'p_relational_operator','parser.py',305),
  ('relational_operator -> LESS_EQUAL','relational_operator',1,'p_relational_operator','parser.py',306),
  ('relational_operator -> GREATER_EQUAL','relational_operator',1,'p_relational_operator','parser.py',307),
  ('relational_operator -> IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',308),
  ('relational_operator -> NOT_IDENTICAL_TO','relational_operator',1,'p_relational_operator','parser.py',309),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','parser.py',310),
  ('logical_operator -> LOGICAL_AND','logical_operator',1,'p_logical_operator','parser.py',314),
  ('logical_operator -> LOGICAL_OR','logical_operator',1,'p_logical_operator','parser.py',315),
  ('logical_operator -> LOGICAL_XOR','logical_operator',1,'p_logical_operator','parser.py',316),
  ('casting -> LEFT_PAREN casting_type RIGHT_PAREN','casting',3,'p_casting','parser.py',320),
  ('casting_type -> INT_TYPE','casting_type',1,'p_casting_type','parser.py',324),
  ('casting_type -> FLOAT_TYPE','casting_type',1,'p_casting_type','parser.py',325),
  ('function_call -> NAME LEFT_PAREN array_elements RIGHT_PAREN','function_call',4,'p_function_call','parser.py',329),
  ('array_declaration_statement -> variable EQUALS array','array_declaration_statement',3,'p_array_declaration_statement','parser.py',334),
  ('array -> ARRAY LEFT_PAREN array_elements RIGHT_PAREN','array',4,'p_array','parser.py',338),
  ('array -> LEFT_BRACKET array_elements RIGHT_BRACKET','array',3,'p_array','parser.py',339),
  ('array_elements -> argument','array_elements',1,'p_array_elements','parser.py',346),
  ('array_elements -> array_elements COMMA argument','array_elements',3,'p_array_elements','parser.py',347),
  ('array_indexing -> variable LEFT_BRACKET INTEGER RIGHT_BRACKET','array_indexing',4,'p_array_indexing','parser.py',355),
]
